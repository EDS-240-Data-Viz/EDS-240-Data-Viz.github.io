---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 5.3]{.custom-title}

[*Colors & Choropleths*]{.custom-subtitle}

<hr class="hr-teal">

[Week 5 | February 7^th^, 2025]{.custom-subtitle3}

---

##  {#making-map data-menu-title="# Map #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Let's explore county-level precipitation data using a choropleth map. Importantly, we'll decide on a color palette / scale type and make any necessary adjustments.</p>
</div>

---

## {#choropleth data-menu-title="Choropleth"} 

[What's a choropleth?]{.slide-title}

<hr>

::: {.center-text}
Choropleths are maps that display the **spatial distribution of a variable** across divided geographical areas / regions, where variable is **encoded by color**. 
:::

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/geopandas-choropleth.png")
```

::: {.center-text .gray-text .body-text-s}
Choropleth by [Ramiro Gómez](https://ramiro.org/){target="_blank"} using [GeoPandas](https://geopandas.org/en/stable/index.html){target="_blank"} ([blog post](https://ramiro.org/notebook/geopandas-choropleth/){target="_blank"})
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/hanna-farnsworth-2013.png")
```

::: {.center-text .gray-text .body-text-s}
Choropleth by [Hanna & Farnsworth (2013)](https://www.researchgate.net/publication/263851588_Visualizing_Virginia'_s_Changing_Electorate_Mapping_Presidential_Elections_from_2000_to_2012){target="_blank"}
:::

:::

::::

. . . 

::: {.center-text}
Choosing the right color palette *and* scale type are critically important. Oftentimes, you'll need to adjust the default mapping of colors to accurately tell your story.
:::

---

## {#data data-menu-title="The Data"} 

[The Data]{.slide-title}

<hr>

[[NOAA National Centers for Environmental Information](https://www.ncei.noaa.gov/){target="_blank"} (NCEI) is responsible for preserving, monitoring, assessing, and providing public access to the Nation's geophysical data and information.]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}
<br>
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/ncei-logo1.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/ncei-logo2.png")
```
:::

::::

[Find public access to a massive inventory of climate data on their [Climate Monitoring](https://www.ncei.noaa.gov/access/monitoring/products/){target="_blank"} page. Today's lesson will use the [Climate at a Glance](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/){target="_blank"} collection. Specifically, **we'll be exploring how precipitation across the continental US over the past 5 years compares to the 20th century average.** To do so, we'll work with county-level precipitation data, accessed via the [County Mapping](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202312/60/value){target="_blank"} portal.]{.body-text-s}

<!-- **we'll be exploring county-level precipitation data from October 2023, accessed via the [County Mapping](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value) portal -- UPDATE THIS** -->

<!-- https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value -->

<!-- 5-year precip: https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202312/60/value -->

---

## {#tigris data-menu-title="{tigris}"} 

[Use `{tigris}` to download shapefiles]{.slide-title2}

<hr>

We can use the [`{tigris}` package](https://github.com/walkerke/tigris){target="_blank"} to download and use Census [TIGER/Line shapefiles](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html){target="_blank"} in R.

<br>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/week5/tigris.png")
```

:::

::: {.column width="50%"}
<br>

- A **shapefile** is a vector data file format commonly used for geospatial analysis. 

- Shapefiles contain information for spatially describing features (e.g. points, lines, polygons), as well as any associated attribute information. 

- You can find / download shapefiles online (e.g. from the [US Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2023.html#list-tab-790442341){target="_blank"}), or depending on the tools available, access them via packages (like we're doing today).
:::

::::

::: {.footer}
Check out [Ch. 5](https://walker-data.com/census-r/census-geographic-data-and-applications-in-r.html){target="_blank"} of [Analyzing US Census Data: Methods, Mpas, and Models in R](https://walker-data.com/census-r/index.html){target="_blank"} by [Kyle E. Walker](https://personal.tcu.edu/kylewalker/){target="_blank"} for a great intro to `{tigris}`
:::

---

## {#sf data-menu-title="simple features"} 

[Simple features in R]{.slide-title}

<hr>

::: {.center-text}
Spatial data can take many forms -- **[simple features]{.teal-text} is a standard that allows different types of software to specify spatial data in a common way.**
:::

<br>

. . .   

**Simple feature comprise:**

[1. [**a geometry object**]{.teal-text} (e.g. a point, line, polygon) that describes where on Earth the feature is located]{.body-text-s}

[2. [**attribute data**]{.teal-text} associated with the geometry object (e.g. the precipitation across a county during the last 5 years)]{.body-text-s}

<br>

. . . 

[Because of how simple feature (`sf`) objects are represented in R (they look like data frames!), **simple features can be maniupulated and plotted by other well-known packages like `{dplyr}` and `{ggplot2}`**. Packages like [`{sf}`](https://r-spatial.github.io/sf/){target="_blank"} provide additional tools for working with simple features (`sf` objects).]{.body-text-s}

<br>

. . . 

When we download our shapefile using `{tigris}`, **it'll be loaded as a simple features (`sf`) object** with geometries that allow us to plot county lines. We'll **join our county-level precipitation data to our `sf` object** so that we can color counties by precipitation.

---

## {#data-wrangling data-menu-title="Data wrangling"} 

[Data Wrangling]{.slide-title}

<hr>

[Here, we'll use the `{tigris}` package to import geometries for our US counties, then join it with our precipitation data:]{.body-text-s}

{{< include sections/5.3-choropleth.qmd >}}

```{r}
#| eval: false
#| echo: true
#| message: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(tigris)
library(sf)
library(RColorBrewer)
library(scales)

#.........................get shape data.........................
county_geo <- tigris::counties(class = "sf", cb = TRUE) |> # cb = TRUE to use cartographic boundary files
  
  # transform CRS to USA Contiguous Albers Equal Area Conic ----
  # see https://gis.stackexchange.com/questions/141580/which-projection-is-best-for-mapping-the-contiguous-united-states
  sf::st_transform("ESRI:102003")

#....................import precipitation data...................
precip_data <- read_csv(here::here("week5", "data", "NCEI-county-jan20-dec24-precip.csv"), 
                        skip = 4)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle geometries  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~

county_geo_wrangled <- county_geo |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county & state cols ----
  rename(county = namelsad, state = state_name) |>
  
  # keep only 50 US states (minus AK & HI) ----
  filter(state %in% state.name) |> # `state.name` is a build-in vector of the 50 US States
  filter(!state %in% c("Alaska", "Hawaii")) |> 
  
  # capitalize "city" in county names (so that it matches those in `precip_data`) ----
  mutate(county = str_replace(string = county, pattern = " city", replacement = " City"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle precipitation data  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precip_wrangled <- precip_data |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county col ----
  rename(county = name) |>
  
  # keep only US states (this will filter out DC) ----
  filter(state %in% state.name) |> 
  
  # update county name so that it matches the spelling in `county_geo` df ----
  mutate(county = str_replace(string = county, pattern = "Dona Ana County", replacement = "Doña Ana County")) |>
  
  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>
  
  # calculate % change in precip from 20th century avg ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>
  
  # select, rename, reorder cols ----
  select(id, state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~
##  ~ join dfs  ----
##~~~~~~~~~~~~~~~~~~

# join dfs (be sure to join precip TO sf object, not the other way around; see https://github.com/tidyverse/ggplot2/issues/3936 & https://map-rfun.library.duke.edu/032_thematic_mapping_geom_sf.html)) -------
joined_precip_geom <- full_join(county_geo_wrangled, precip_wrangled) 
```

::: {.footer}
Read more about cartographic boundary shapefiles (and the `cb` argument) in [Analyzing US Census Data: Methods, Maps, and Models in R](https://walker-data.com/census-r/census-geographic-data-and-applications-in-r.html?q=cartographic%20boundaries#tigerline-and-cartographic-boundary-shapefiles){target="_blank"}, by [Kyle Walker](https://github.com/walkerke){target="_blank"}.
:::

---

## {#base-map data-menu-title="Create base map"} 

[Start by creating a base map]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: true
#| output-location: column
base_map <- ggplot(joined_precip_geom) +
  geom_sf(aes(fill = perc_change), linewidth = 0.1) +
  labs(title = "5-year precipitation compared with the 20th century average",
       subtitle = "January 2020 - December 2024",
       caption = "Source: National Centers for Environmental Information") +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    plot.caption = element_text(face = "italic",
                                margin = margin(t = 10, r = 5, b = 0, l = 0))
  )

base_map
```

. . . 

::: {.center-text}
Because we want to map precipitation relative to the 20th century average (e.g. has precipitation for a given region over the last 5 years been *above* or *below* the average), a **divering color palette** makes a lot of sense.
:::

::: {.footer}
You may notice that Connecticut is missing most of its data. After some digging, I learned that CT recently (2022) replaced its eight counties with nine planning regions as county-equivalents (read more in the [UC Census Bureau Notice on 06/06/2022](https://www.federalregister.gov/documents/2022/06/06/2022-12063/change-to-county-equivalents-in-the-state-of-connecticut){target="_blank"}). I couldn't quite make sense of how to match old county names to new planning regions, as there's a decent amount of [geographic overlap](https://en.wikipedia.org/wiki/List_of_counties_in_Connecticut#/media/File:CT_Planning_vs_County_Census.png){target="_blank"}, soooo I gave up (for now) {{< fa face-grin-beam-sweat title="grinning face with sweat dripping from forehead" >}}. 
:::

---

## {#decide-on-scale-type data-menu-title="Decide on scale type"} 

[Classed or unclassed color scale?]{.slide-title}

<hr>

We've landed on a **diverging color palette**, but should we use a classed (aka binned) or unclassed (aka continuous) palette?

<br>

. . . 

**Use a [classed]{.teal-text} color scale if you want to [communicate statistical brackets]{.teal-text}:** <img src="images/week5/classed.png" alt="A classed color scale with 5 binned colors ranging from dark green on the left to dark red on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>

  - [the focus is on which data units fall into pre-defined classes, rather than overall pattern]{.body-text-s}
  - [best if you want you audience to read values (gets more difficult with more classes; easier with interactive visualizations)]{.body-text-s}
  - [the more classes you have, the more nuanced your map becomes]{.body-text-s}

. . . 

**Use an [unclassed]{.teal-text} color scale if you want to [show general patterns]{.teal-text}:** <img src="images/week5/unclassed.png" alt="An unclassed color scale with colors that smoothly transition from dark green on the left to dark red on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>

  - [the focus is on general patterns, rather than which statistical brackets regions fall into]{.body-text-s}
  - [best if you don't want to interpret for your reader -- it makes it easier to see outliers, transitions to and comparisons with neighboring regions]{.body-text-s}
  
::: {.footer}
Adapted from [When to use classed and when to use unclassed color scales](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/){target="_blank"}, by Lisa Charlotte Muth

For another great read on building color scales for choropleth maps, check out this [article](https://www.axismaps.com/guide/choropleth){target="_blank"} in Axis Map's Cartography Guide.
:::

---

## {#start-unclassed data-menu-title="Start unclassed"} 

[Start with an unclassed scale]{.slide-title}

<hr>
  
<br>
  
>“The unclassed choropleth is the most exact representation of the data model possible,” 

::: {.right-align-text}
-Judith A. Tyner, in [Priciples of Map Design](https://www.amazon.com/Principles-Map-Design-Judith-Tyner/dp/1462517129){target="_blank"}
:::
  
<br>

. . . 

> "No matter if you decide for a classed map at the end, you should **start your process by looking at an unclassed map**. This will help you see subtle differences between regions and make a conscious decision if and how you should simplify them."

::: {.right-align-text}
-Lisa Charlotte Muth, in [When to use classed and when to use unclassed color scales](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/){target="_blank"}
:::

. . . 

<br>

::: {.center-text .body-text-m}
**We'll heed this advice and start with an unclassed map!**
:::

---

## {#decide-on-palette data-menu-title="Decide on palette"} 

[Pick a color palette!]{.slide-title}

<hr>

Recall [from earlier](lecture5.2-colors-slides.qmd#climate-palettes){target="_blank"} that precipitation data is often encoded using a **brown / blue** color scheme (with drier conditions falling on the brown side and wetter conditions falling on the blue side). 

Lucky for us, **RColorBrewer** has this exact palette. **Let's use [all 11 hues]{.teal-text} for our unclassed map**:

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Preview the palette using `display.brewer.pal()` with our desired number of hues:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.pal(n = 11, name = "BrBG")
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Save the HEX codes to a named object using `brewer.pal()` (we'll call this in our plot later):
:::

```{r}
#| eval: true
#| echo: true
my_brew_palette11 <- RColorBrewer::brewer.pal(n = 11, name = "BrBG")
my_brew_palette11
```
:::

::::
  
---

## {#apply-palette-unclassed data-menu-title="Apply our palette (unclassed)"} 

[Apply our palette & adjust colorbar]{.slide-title}

<hr>

[Here, we leverage the awesome `{scales}` package to add **%s** to the colorbar labels and set our breaks. We also use `guides()` + `guide_colorbar()` to update label positioning and colorbar size:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 0.75))
```

---

## {#inspect-color-scale1 data-menu-title="Inspect color scale"} 

[Inspect the color scale -- anything off?]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 0.75))
```

---

## {#misleading data-menu-title="Misleading colors"} 

[Our color mapping may be misleading]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 0.75))
```

<br>

::: {.center-text}
**0%** (i.e. no change between 5-year precipitation and 20th century average) **is currently on the bluer side of our color scale**, rather than on the off-white color that's at the center of our palette. 

As a result, **our map is misleading** -- it would appear as if more counties received higher-than-average precipitation than in actuality.
:::

---

## {#rescale-colorbar data-menu-title="Rescale centerpoint"} 

[Rescale the colorbar so that 0 is at the center]{.slide-title2}

<hr>

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "5"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(-40, 0, 20))) +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 0.75))
```

::: {.notes}
See [this StackExchange post](https://stackoverflow.com/questions/74224130/r-scale-fill-stepsn-error-in-breaks-and-colors)

`values = scales::rescale(x = c(min, 0, max))`

- `scales::rescale()` transforms the input vector `(c(min, 0, max))` into the range `[0, 1]`.
- This ensures that 0 is always mapped to the middle of the color scale.
- The minimum value of `perc_change` maps to 0, the maximum to 1, and 0 remains the center point.

```{r}
#| eval: false
# OLD CODE ----
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(na.omit(joined_precip_geom)$perc_change),
                         0,
                         max(na.omit(joined_precip_geom)$perc_change)))) +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 0.75))
```

:::

---

## {#final-unclassed data-menu-title="Final unclassed map"} 

[Our final unclassed map]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(-40, 0, 20))) +
  guides(fill = guide_colorbar(barwidth = 25, barheight = 0.75))
```

---

## {#classed-palette data-menu-title="Classed palette"} 

[Modify our palette for our classed map]{.slide-title}

<hr>

We'll be using the same color palette for our classed map, but this time, **let's keep [10 hues]{.teal-text} (this will drop the middle off-white hue)**:

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Preview the palette using `display.brewer.pal()` with our desired number of hues:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "90%"
RColorBrewer::display.brewer.pal(n = 10, name = "BrBG")
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Save the HEX codes to a named object using `brewer.pal()` (we'll call this in our plot later):
:::

```{r}
#| eval: true
#| echo: true
my_brew_palette10 <- RColorBrewer::brewer.pal(n = 10, name = "BrBG")
my_brew_palette10
```
:::

::::

[By dropping the off-white hue, we can construct our scale so that **0%** sits at the break point between brown and blue shades -- any county that received more than the historical average will be a shade of blue, and any that received less will be a shade of brown.]{.body-text-s}

---

## {#apply-palette-classed data-menu-title="Apply our palette (classed)"} 

[By default, our resolution is pretty low]{.slide-title}

<hr>

We only get 5 bins by default, which means we lose a lot of detail in our map:

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```

---

## {#increase-classes data-menu-title="Increase # of classes"} 

[More classes = more nuance]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Breaks set to a width of **10** *(note: 0 not at center)*
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "4"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::: {.column width="%"}

::: {.center-text .body-text-s}
Breaks set to a width of **5** & rescaled with 0 at center *(note: `{ggplot2}` interpolates colors to create our scale)*
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "4-5"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 5),
                    values = scales::rescale(x = c(-40, 0, 20))) + 
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::::

::: {.footer}
*But* the more classes you have, the longer it will (likely) take a reader to interpret values.
:::

---

## {#unclassed-classed data-menu-title="Unclassed vs. classed"} 

[Unclassed vs. classed maps]{.slide-title}

<hr>

What stories to each of these maps tell? When might you choose one over the other? What additional modifications might you make?

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Unclassed map:
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(-40, 0, 20))) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 25, barheight = 0.75))
```
:::

::: {.column width="%"}

::: {.center-text .body-text-s .gray-text}
Classed map:
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 10),
                    values = scales::rescale(x = c(-40, 0, 20))) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::::

---

## {#multiple-maps data-menu-title="Multiple maps"} 

[Choropleths are powerful in multiples]{.slide-title}

<hr>

Several maps side-by-side can help you better spot important patterns and tell a more complete story.

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week5/nyt-precip.png")
```

::: {.footer}
[What's Going On in This Graph? | New Normal U.S. Precipitation](https://www.nytimes.com/2021/09/16/learning/whats-going-on-in-this-graph-new-normal-us-precipitation.html){target="_blank"} (New York Times)
:::

---

##  {#end-break data-menu-title="# END #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">See you next week!</p>
<p class="caption-text">*~ This is the end of Lesson 3 (of 3) ~*</p>
</div>


