---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 5.3]{.custom-title}

[*Colors & Choropleths*]{.custom-subtitle}

<hr class="hr-teal">

[Week 5 | February 5^th^, 2024]{.custom-subtitle3}

---

##  {#making-map data-menu-title="# Map #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Let's explore county-level precipitation data using a choropleth map. Importantly, we'll decide on a color palette / scale type and make any necessary adjustments.</p>
</div>

---

## {#choropleth data-menu-title="Choropleth"} 

[What's a choropleth?]{.slide-title}

<hr>

::: {.center-text}
Choropleths are maps that display the **spatial distribution of a variable** across divided geographical areas / regions, where variable is **encoded by color**. 
:::

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/geopandas-choropleth.png")
```

::: {.center-text .gray-text .body-text-s}
Choropleth by [Ramiro GÃ³mez](https://ramiro.org/) using [GeoPandas](https://geopandas.org/en/stable/index.html) ([blog post](https://ramiro.org/notebook/geopandas-choropleth/))
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/hanna-farnsworth-2013.png")
```

::: {.center-text .gray-text .body-text-s}
Choropleth by [Hanna & Farnsworth (2013)](https://www.researchgate.net/publication/263851588_Visualizing_Virginia'_s_Changing_Electorate_Mapping_Presidential_Elections_from_2000_to_2012)
:::

:::

::::

. . . 

::: {.center-text}
Choosing the right color palette *and* scale type are critically important. Oftentimes, you'll need to adjust the default mapping of colors to accurately tell your story.
:::

---

## {#data data-menu-title="The Data"} 

[The Data]{.slide-title}

<hr>

[[NOAA National Centers for Environmental Information](https://www.ncei.noaa.gov/) (NCEI) is responsible for preserving, monitoring, assessing, and providing public access to the Nation's geophysical data and information.]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}
<br>
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/ncei-logo1.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/ncei-logo2.png")
```
:::

::::

[Find public access to a massive inventory of climate data on their [Climate Monitoring](https://www.ncei.noaa.gov/access/monitoring/products/) page. Today's lesson will use the [Climate at a Glance](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/) collection. Specifically, **we'll be exploring how precipitation across the continental US over the past 5 years compares to the 20th century average.** To do so, we'll work with county-level precipitation data, accessed via the [County Mapping](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202312/60/value) portal.]{.body-text-s}

<!-- **we'll be exploring county-level precipitation data from October 2023, accessed via the [County Mapping](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value) portal -- UPDATE THIS** -->

<!-- https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value -->

<!-- 5-year precip: https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202312/60/value -->

---

## {#tigris data-menu-title="{tigris}"} 

[Use `{tigris}` to download shapefiles]{.slide-title2}

<hr>

We can use the [`{tigris}` package](https://github.com/walkerke/tigris) to download and use Census [TIGER/Line shapefiles](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) in R.

<br>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/week5/tigris.png")
```

:::

::: {.column width="50%"}
<br>

- A **shapefile** is a vector data file format commonly used for geospatial analysis. 

- Shapefiles contain information for spatially describing features (e.g. points, lines, polygons), as well as any associated attribute information. 

- You can find / download shapefiles online (e.g. from the [US Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2023.html#list-tab-790442341)), or depending on the tools available, access them via packages (like we're doing today).
:::

::::

::: {.footer}
Check out [Ch. 5](https://walker-data.com/census-r/census-geographic-data-and-applications-in-r.html) of [Analyzing US Census Data: Methods, Mpas, and Models in R](https://walker-data.com/census-r/index.html) by [Kyle E. Walker](https://personal.tcu.edu/kylewalker/) for a great intro to `{tigris}`
:::

---

## {#sf data-menu-title="simple features"} 

[Simple features in R]{.slide-title}

<hr>

::: {.center-text}
Spatial data can take many forms -- **[simple features]{.teal-text} is a standard that allows different types of software to specify spatial data in a common way.**
:::

<br>

. . . 

**Simple features are comprised of:**

[1. a geometry object (e.g. a point, line, polygon) that describes where on Earth the feature is located]{.body-text-s}

[2. attribute data associated with the geometry object (e.g. the precipitation across a county during the last 5 years)]{.body-text-s}

<br>

. . . 

[Because of how simple feature (`sf`) objects are represented in R (they look like data frames!), **simple features can be maniupulated and plotted by other well-known packages like `{dplyr}` and `{ggplot2}`**. Packages like [`{sf}`](https://r-spatial.github.io/sf/) provide tools for working with simple features (`sf` objects), but we'll only need to rely on `{ggplot2}`s built-in `geom_sf()` geometry to plot our data.]{.body-text-s}

<br>

. . . 

When we download our shapefile using `{tigris}`, **it'll be loaded as a simple features (`sf`) object** with geometries that allow us to plot county lines. We'll join our county-level precipitation data to our `sf` object so that we can color counties by precipitation.

<!-- --- -->

<!-- ## {#shapefiles-simple-features data-menu-title="shapefiles & simple features"}  -->

<!-- [Working with shapefiles & simple features in R]{.slide-title2} -->

<!-- <hr> -->

<!-- :::: {.columns} -->

<!-- ::: {.column width="50%"} -->

<!-- ::: {.center-text .body-text-s} -->
<!-- We can use the [`{tigris}` package](https://github.com/walkerke/tigris) to download and use Census [TIGER/Line shapefiles](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) in R. -->
<!-- ::: -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: false -->
<!-- #| out-width: "60%" -->
<!-- #| fig-align: "center" -->
<!-- knitr::include_graphics("images/week5/tigris.png") -->
<!-- ``` -->

<!-- ::: {.center-text .gray-text .body-text-s} -->
<!-- A **shapefile** is a vector data file format commonly used for geospatial analysis. The contain information for spatially describing features likes points, lines, and polygons, as well as any associated attribute information. You can find / download shapefiles online, or sometimes access them via packages (like we're doing today). -->
<!-- ::: -->
<!-- ::: -->

<!-- ::: {.column width="50%"} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: false -->
<!-- #| out-width: "70%" -->
<!-- #| fig-align: "center" -->
<!-- knitr::include_graphics("images/week5/sf.gif") -->
<!-- ``` -->

<!-- ::: {.center-text .body-text-s .gray-text} -->
<!-- The [`{sf}` package](https://r-spatial.github.io/sf/) provides tools for working with [simple features](https://r-spatial.github.io/sf/articles/sf1.html) in R.  -->
<!-- ::: -->

<!-- ::: -->

<!-- :::: -->

---

## {#data-wrangling data-menu-title="Data wrangling"} 

[Data Wrangling]{.slide-title}

<hr>

Here, we'll use the `{tigris}` package to import geometries for our US counties, then join it with our precipitation data:

{{< include sections/5.3-choropleth.qmd >}}

```{r}
#| eval: false
#| echo: true
#| message: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(tigris)

#.........................get shape data.........................
county_geo <- tigris::counties(class = "sf", cb = TRUE) |> # cb = TRUE to use cartographic boundary files
  
  # shift US to fit AK, HI, PR (we'll be filtering these out though) and transform CRS to USA Contiguous Albers Equal Area Conic (ESRI:102003) ----
  shift_geometry()

#....................import precipitation data...................
precip_data <- read_csv(here::here("week5", "data", "county-jan19-dec23-precip.csv"), skip = 4)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle geometries  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~

county_geo_wrangled <- county_geo |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county & state cols ----
  rename(county = namelsad, state = state_name) |>
  
  # remove states / territories that we don't have precip data for ----
  filter(!state %in% c("Alaska", "Hawaii", "District of Columbia",
                       "United States Virgin Islands", "Puerto Rico", "American Samoa",
                       "Commonwealth of the Northern Mariana Islands", "Guam")) |>
  
  # capitalize "city" (VA) ----
  mutate(county = str_replace(string = county, pattern = " city", replacement = " City"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle precipitation data  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precip_wrangled <- precip_data |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county col ----
  rename(county = name) |>
  
  # filter out DC ----
  filter(!county %in% c("Washington, D.C.")) |>
  
  # update name to match that in county_geo df ----
  mutate(county = str_replace(string = county, pattern = "Dona Ana County", replacement = "DoÃ±a Ana County")) |>
  
  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>
  
  # calculate % change ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>
  
  # select, rename, reorder cols ----
  select(id, state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~
##  ~ join dfs  ----
##~~~~~~~~~~~~~~~~~~

# join dfs (be sure to join precip TO sf object, not the other way around) -------
joined_precip_geom <- full_join(county_geo_wrangled, precip_wrangled) 
```

---

## {#base-map data-menu-title="Create base map"} 

[Start by creating a base map]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: true
#| output-location: column
base_map <- ggplot(joined_precip_geom) +
  geom_sf(aes(fill = perc_change), linewidth = 0.1) +
  labs(title = "5-year precipitation compared with the 20th century average",
       subtitle = "January 2019 - December 2023",
       caption = "Source: National Centers for Environmental Information") +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    plot.caption = element_text(face = "italic",
                                margin = margin(t = 2, r = 0.5, b = 0, l = 0, "lines"))
  )

base_map
```

. . . 

<br>

::: {.center-text}
Because we want to map precipitation relative to the 20th century average (e.g. has precipitation for a given region over the last 5 years been *above* or *below* the average), a **divering color palette** makes a lot of sense.
:::

::: {.footer}
You may notice that Connecticut is missing most of its data. After some digging, I learned that CT recently (2022) replaced its eight counties with nine planning regions as county-equivalents (read more in the [UC Census Bureau Notice on 06/06/2022](https://www.federalregister.gov/documents/2022/06/06/2022-12063/change-to-county-equivalents-in-the-state-of-connecticut)). I couldn't quite make sense of how to match old county names to new planning regions, as there's a decent amount of [geographic overlap](https://en.wikipedia.org/wiki/List_of_counties_in_Connecticut#/media/File:CT_Planning_vs_County_Census.png), soooo I gave up (for now) {{< fa face-grin-beam-sweat title="grinning face with sweat dripping from forehead" >}}. 
:::

<!-- --- -->

<!-- OLD  -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- #| echo: false -->
<!-- #| output-location: column -->
<!-- # 'group' controls whether adjacent points are connected by lines (each county is a "group," therefore points are connected) ---- -->
<!-- base_map <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) + -->

<!--   # plot precip values by county; geom_polygon() drawn lines between points and âcloses them upâ (i.e. draws a line from the last point back to the first point) ---- -->
<!--   geom_polygon(data = joined_precip_us_counties, aes(fill = perc_change)) + -->

<!--   # darken state lines ---- -->
<!--   geom_polygon(color = "#2F2D2C", fill = NA, linewidth = 0.1) + -->

<!--   # update labels ---- -->
<!--   labs(title = "5-year precipitation compared with the 20th century average", -->
<!--        caption = "Source: National Centers for Environmental Information") + -->

<!--   # set theme to clean up appearance ---- -->
<!--   theme_void() + -->

<!--   # theme adjustments ---- -->
<!--   theme( -->
<!--     legend.position = "bottom", -->
<!--     legend.title = element_blank(), -->
<!--     plot.caption = element_text(face = "italic", margin = margin(t = 20, r = 0, b = 0, l = 0)) -->
<!--   ) -->

<!-- base_map -->
<!-- ``` -->

<!-- ::: {.center-text} -->
<!-- This looks a bit wonky, so we'll need to specify a projection, next. -->
<!-- ::: -->

<!-- ::: {.footer} -->
<!-- [Eric C. Anderson's](https://github.com/eriqande) [Making Maps with R](https://eriqande.github.io/rep-res-web/lectures/making-maps-with-R.html) tutorial was a wonderful resource in getting started with the `{maps}` package. -->
<!-- ::: -->

<!-- --- -->

<!-- ## {#map-projection data-menu-title="Map projection"} -->

<!-- [Apply a Mercator projection]{.slide-title} -->

<!-- <hr> -->

<!-- [Lambert conformal conic](https://en.wikipedia.org/wiki/Lambert_conformal_conic_projection) and [Mercator projections](https://en.wikipedia.org/wiki/Mercator_projection) are both commonly used for mapping the United States. Here, we'll apply the latter: -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| fig-align: "center" -->
<!-- base_map_proj <- base_map + -->
<!--   coord_map(projection = "mercator") -->

<!-- base_map_proj -->
<!-- ``` -->

<!-- ::: {.notes} -->
<!-- Alternatively: -->

<!-- - fix the relationship between lat & long by using `coord_fixed(1.3)` -->
<!-- - apply a Lambert conformal projection, conic projection, using `coord_fixed(projection = "conic", lat0 = 30)` -->
<!-- - NOTE: `coord_map()` has been been superceded by `coord_sf()`: https://ggplot2.tidyverse.org/reference/coord_map.html -->
<!-- ::: -->

---

## {#decide-on-scale-type data-menu-title="Decide on scale type"} 

[Classed or unclassed color scale?]{.slide-title}

<hr>

We've landed on a **diverging color palette**, but should we use a classed (aka binned) or unclassed (aka continuous) palette?

<br>

. . . 

**Use a [classed]{.teal-text} color scale if you want to [communicate statistical brackets]{.teal-text}:** <img src="images/week5/classed.png" alt="A classed color scale with 5 binned colors ranging from dark green on the left to dark red on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>

  - [the focus is on which data units fall into pre-defined classes, rather than overall pattern]{.body-text-s}
  - [best if you want you audience to read values (gets more difficult with more classes; easier with interactive visualizations)]{.body-text-s}
  - [the more classes you have, the more nuanced your map becomes]{.body-text-s}

. . . 

**Use an [unclassed]{.teal-text} color scale if you want to [show general patterns]{.teal-text}:** <img src="images/week5/unclassed.png" alt="An unclassed color scale with colors that smoothly transition from dark green on the left to dark red on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>

  - [the focus is on general patterns, rather than which statistical brackets regions fall into]{.body-text-s}
  - [best if you don't want to interpret for your reader -- it makes it easier to see outliers, transitions to and comparisons with neighboring regions]{.body-text-s}
  
::: {.footer}
Adapted from [When to use classed and when to use unclassed color scales](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/), by Lisa Charlotte Muth

For another great read on building color scales for choropleth maps, check out this [article](https://www.axismaps.com/guide/choropleth) in Axis Map's Cartography Guide.
:::

---

## {#start-unclassed data-menu-title="Start unclassed"} 

[Start with an unclassed scale]{.slide-title}

<hr>
  
<br>
  
>âThe unclassed choropleth is the most exact representation of the data model possible,â 

::: {.right-align-text}
-Judith A. Tyner, in [Priciples of Map Design](https://www.amazon.com/Principles-Map-Design-Judith-Tyner/dp/1462517129)
:::
  
<br>

. . . 

> "No matter if you decide for a classed map at the end, you should **start your process by looking at an unclassed map**. This will help you see subtle differences between regions and make a conscious decision if and how you should simplify them."

::: {.right-align-text}
-Lisa Charlotte Muth, in [When to use classed and when to use unclassed color scales](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/)
:::

. . . 

<br>

::: {.center-text .body-text-m}
**We'll heed this advice and start with an unclassed map!**
:::

---

## {#decide-on-palette data-menu-title="Decide on palette"} 

[Pick a color palette!]{.slide-title}

<hr>

Recall [from earlier](https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.2-colors-slides.html#/suggested-colors) that precipitation data is often encoded using a **brown / blue** color scheme (with drier conditions falling on the brown side and wetter conditions falling on the blue side). 

Lucky for us, **RColorBrewer** has this exact palette. **Let's use [all 11 hues]{.teal-text} for our unclassed map**:

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Preview the palette using `display.brewer.pal()` with our desired number of hues:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.pal(n = 11, name = 'BrBG')
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Save the HEX codes to a named object using `brewer.pal()` (we'll call this in our plot later):
:::

```{r}
#| eval: true
#| echo: true
my_brew_palette11 <- RColorBrewer::brewer.pal(n = 11, name = 'BrBG')
my_brew_palette11
```
:::

::::
  
---

## {#apply-palette-unclassed data-menu-title="Apply our palette (unclassed)"} 

[Apply our palette & adjust colorbar]{.slide-title}

<hr>

[Here, we leverage the awesome `{scales}` package to add **%s** to the colorbar labels and set our breaks. We also use `guides()` + `guide_colorbar()` to update label positioning and colorbar size:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75))
```

---

## {#inspect-color-scale1 data-menu-title="Inspect color scale"} 

[Inspect the color scale -- anything off?]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75))
```

---

## {#misleading data-menu-title="Misleading colors"} 

[Our color mapping may be misleading]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75))
```

<br>

::: {.center-text}
**0%** (i.e. no change between 5-year precipitation and 20th century average) **is currently on the bluer side of our color scale**, rather than on the off-white color that's at the center of our palette. 

As a result, **our map may be misleading** -- it would appear as if more counties received higher-than-average precipitation than in actuality.
:::

---

## {#rescale-colorbar data-menu-title="Rescale centerpoint"} 

[Rescale the colorbar so that 0 is at the center]{.slide-title2}

<hr>

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "5-8"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(na.omit(joined_precip_geom)$perc_change),
                         0,
                         max(na.omit(joined_precip_geom)$perc_change)))) +
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75))
```

---

## {#final-unclassed data-menu-title="Final unclassed map"} 

[Our final unclassed map]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| code-line-numbers: "5-8"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(na.omit(joined_precip_geom)$perc_change),
                         0,
                         max(na.omit(joined_precip_geom)$perc_change)))) +
  guides(fill = guide_colorbar(barwidth = 15, barheight = 0.75))
```

---

## {#classed-palette data-menu-title="Classed palette"} 

[Modify our palette for our classed map]{.slide-title}

<hr>

We'll be using the same color palette for our classed map, but this time, **let's keep [10 hues]{.teal-text} (this will drop the middle-most off-white hue)**:

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Preview the palette using `display.brewer.pal()` with our desired number of hues:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "90%"
RColorBrewer::display.brewer.pal(n = 10, name = 'BrBG')
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Save the HEX codes to a named object using `brewer.pal()` (we'll call this in our plot later):
:::

```{r}
#| eval: true
#| echo: true
my_brew_palette10 <- RColorBrewer::brewer.pal(n = 10, name = 'BrBG')
my_brew_palette10
```
:::

::::

[By dropping the off-white hue, we can construct our scale so that **0%** sits at the break point between brown and blue shades -- any county that received more than the historical average will be a shade of blue, and any that received less will be a shade of brown.]{.body-text-s}

---

## {#apply-palette-classed data-menu-title="Apply our palette (classed)"} 

[By default, our resolution is pretty low]{.slide-title}

<hr>

We only get 4 bins by default, which means we lose a lot of detail in our map:

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```

---

## {#increase-classes data-menu-title="Increase # of classes"} 

[More classes = more nuance]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Breaks set to a width of **10**
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "4"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::: {.column width="%"}

::: {.center-text .body-text-s}
Breaks set to a width of **5** & rescaled with 0 at center
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "4-8"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    values = scales::rescale(x = c(
                         min(na.omit(joined_precip_geom)$perc_change),
                         0,
                         max(na.omit(joined_precip_geom)$perc_change))), 
                    breaks = scales::breaks_width(width = 5)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::::

::: {.footer}
*But* the more classes you have, the longer it will (likely) take a reader to interpret values.
:::

---

## {#unclassed-classed data-menu-title="Unclassed vs. classed"} 

[Unclassed vs. classed maps]{.slide-title}

<hr>

What stories to each of these maps tell? When might you choose one over the other? What additional modifications might you make?

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Unclassed map:
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
base_map + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(na.omit(joined_precip_geom)$perc_change),
                         0,
                         max(na.omit(joined_precip_geom)$perc_change)))) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```
:::

::: {.column width="%"}

::: {.center-text .body-text-s .gray-text}
Classed map:
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::::

---

## {#multiple-maps data-menu-title="Multiple maps"} 

[Choropleths are powerful in multiples]{.slide-title}

<hr>

Several maps side-by-side can help you better spot important patterns and tell a more complete story.

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week5/nyt-precip.png")
```

::: {.footer}
[What's Going On in This Graph? | New Normal U.S. Precipitation](https://www.nytimes.com/2021/09/16/learning/whats-going-on-in-this-graph-new-normal-us-precipitation.html) (New York Times)
:::

---

##  {#end-break data-menu-title="# END #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">See you next week!</p>
<p class="caption-text">*~ This is the end of Lesson 3 (of 3) ~*</p>
</div>


<!-- ##  {#end-break data-menu-title="# Break #" background="#047C90"} -->

<!-- <div class="page-center vertical-center"> -->
<!-- <p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p> -->
<!-- <p class="caption-text">*~ This is the end of Lesson 1 (of 3) ~*</p> -->
<!-- </div> -->

<!-- ```{r} -->
<!-- countdown::countdown( -->
<!--   minutes = 5, -->
<!--   # left = 0, right = 0, -->
<!--   # Fanfare when it's over -->
<!--   play_sound = TRUE, -->
<!--   color_border              = "#FFFFFF", -->
<!--   color_text                = "#7aa81e", -->
<!--   color_running_background  = "#7aa81e", -->
<!--   color_running_text        = "#FFFFFF", -->
<!--   color_finished_background = "#ffa07a", -->
<!--   color_finished_text       = "#FFFFFF", -->
<!--   font_size = "2em", -->
<!--   ) -->
<!-- ``` -->

