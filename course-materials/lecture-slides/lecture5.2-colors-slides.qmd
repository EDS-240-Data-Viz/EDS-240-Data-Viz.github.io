---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 5.2]{.custom-title}

[*Colors*]{.custom-subtitle}

<hr class="hr-teal">

[Week 5 | February 3^rd^, 2025]{.custom-subtitle3}

---

## {#good-design data-menu-title="Good data viz considerations"} 

[Good data visualization design considers:]{.slide-title}

<hr>

- [**data-ink ratio** (less is more, within reason)]{.gray-text}
- [how to **reduce eye movement** and **improve readability / interpretability** (e.g. through alternative legend positions, direct annotations)]{.gray-text}
- [putting things **in context**]{.gray-text}
- how to **draw the main attention** to the most **important info**
- **consistent** use of colors, spacing, typefaces, weights
- [**typeface / font choices** and how they affect both readability *and* emotions and perceptions]{.gray-text}
- [using **visual hierarchy** to guide the reader]{.gray-text}
- **color choices** (incl. palette types, emotions, readability)
- [how to **tell an interesting story**]{.gray-text}
- [how to **center the people and communities** represented in your data]{.gray-text}
- **accessibility** through colorblind-friendly palettes & alt text

::: {.center-text .teal-text}
**This lesson will focus on the use of colors in a good data visualization.**
:::

---

##  {#why-color data-menu-title="# Why use color? #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa palette title="a painter's palette" >}} Why do we use color?</p>
<p class="caption-text">*Spend a couple minutes discussing with your Learning Partners the following:*</p>
<p class="dark-blue-text">**Why and / or when should we use color in data visualizations?**</p>
<p class="dark-blue-text">**Find an example(s) of a data viz that uses color to convey information to share in #eds-240-data viz. Note some of your own observations about the color choices (i.e. why these colors? palette arrangement?).**</p>
</div>

```{r}
countdown::countdown(
  minutes = 2,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

::: {.notes}
- evoke emotions
- highlight important data / concepts
- branding
:::

<!-- --- -->

<!-- ~start by showing examples of data viz & colors to get reactions~ -->

<!-- - green ocean vs blue ocean map -->
<!-- - warm city cold city (temperature scales): https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/ -->
<!-- - precipitation -->
<!-- - urban areas -->
<!-- - forests -->
<!-- - bright colors on elevation maps = high areas; dark = low areas -->
<!-- - happy vs. sad -->

---

## {#colors-difficult data-menu-title="It's hard to choose colors!"} 

[Choosing colors is difficult and they should be purposefully chosen]{.slide-title3}

<hr>

<br>

::: {.center-text .body-text-m}
You'll probably iterate on them as you sit with your visualization and of course, as you get feedback from others.
:::

<br>

. . . 

**Some places to start / things to consider:**

- is using [**color the best and / or only way**]{.teal-text} to visually represent your variable(s)?

. . . 

- are you designing for a particular [**organization / brand**]{.teal-text}?
- what [**emotions**]{.teal-text} are you trying (or not trying) to elicit?
- who is your [**audience**]{.teal-text}?
- are your [**data commonly represented**]{.teal-text} using a particular color scheme?
- what [**data types**]{.teal-text} (e.g. numeric vs. categorical, discrete vs. continuous?) are you working with?

---

## {#color-properties data-menu-title="Color properties"} 

[What is color?]{.slide-title}

<hr>

There are a number of **different [*color spaces*](https://en.wikipedia.org/wiki/Color_space){target="_blank"} that are used to represent and define color**. [HSV and HSL](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.){target="_blank"} are used commonly in color pickers (e.g. [Google color picker](https://g.co/kgs/9SQkdgv){target="_blank"}). [HCL](https://en.wikipedia.org/wiki/HCL_color_space){target="_blank"} underlies some default `{ggplot2}` parameters.

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
HSV 
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
knitr::include_graphics("images/week5/hue-sat-val.png")
```

:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
HCL
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
knitr::include_graphics("images/week5/hcl.png")
```

:::
::::

. . . 

::: {.center-text}
You don't need to worry much about the underlying theory of color spaces, but know that **changing any of the parameters (e.g. hue, saturation, etc.) can influence how we perceive information in a data visualization.**
:::


::: {.footer}
Image sources: [medium.com](https://medium.com/awkbit/choosing-a-color-scheme-for-your-website-awkbit-59ab750151dc){target="_blank"} (left), Stauffer et al. (2015) [https://doi.org/10.1175/BAMS-D-13-00155.1](https://doi.org/10.1175/BAMS-D-13-00155.1){target="_blank"} (right)
:::

::: {.notes}
- Hue ranges from 0 to 360 (an angle) and gives the “colour” of the colour (blue, red, orange, etc).
- Chroma is the “purity” of a colour, ranging from 0 (grey) to a maximum that varies with luminance.
- Luminance is the lightness of the colour, ranging from 0 (black) to 1 (white).

Source: <https://ggplot2-book.org/scales-colour>
:::

<!-- --- -->

<!-- ##  {#data-types data-menu-title="# Data types #" background="#047C90"} -->

<!-- <div class="page-center vertical-center"> -->
<!-- <p class="custom-subtitle bottombr">Different data types require different palette types</p> -->
<!-- </div> -->

---

## {#color-scales data-menu-title="Color scales"} 

[Different color scales for different data types]{.slide-title2}

<hr>

<br>
<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/palette-types.png")
```

<br>

::: {.footer}
Image source: [Which color scale to use when visualizing data](https://blog.datawrapper.de/which-color-scale-to-use-in-data-vis/){target="_blank"}, by Lisa Charlottte Muth. 

This is the first article of a 4 part series ([Part 2](https://blog.datawrapper.de/quantitative-vs-qualitative-color-scales/){target="_blank"} / [Part 3](https://blog.datawrapper.de/diverging-vs-sequential-color-scales/){target="_blank"} / [Part 4](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/){target="_blank"}) -- I highly recommend reading!
:::

---

## {#categorical data-menu-title="Categorical scales"} 

[Categorical scales]{.slide-title}

<hr>

  - mainly formed by selecting [**different *hues***]{.teal-text}
  - hues assigned to each group must be [**distinct**]{.teal-text} and ideally have [**different lightnesses**]{.teal-text}
  <!-- - groups [**don't have an intrinsic order**]{.teal-text} -->
  - limit to [**no more than 7 hues**]{.teal-text}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/categorical-scales.png")
```

::: {.footer}
Map source: [Analyzing US Census Data](https://walker-data.com/census-r/index.html){target="_blank"}, by Kyle Walker
:::

---

## {#sequential data-menu-title="Sequential scales"} 

[Sequential scales]{.slide-title}

<hr>

  - colors assigned to data values on [**a continuum, based on lightness, hue, or both**]{.teal-text}
  - [**lower values**]{.teal-text} typically associated with [**lighter colors**]{.teal-text} & [**higher values**]{.teal-text} associated with [**darker colors**]{.teal-text} (though not a hard and fast rule; make choices clear with legend)
  - can use a [**single hue *or* two hues**]{.teal-text}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/sequential-scales.png")
```

::: {.footer}
Map source: [Analyzing US Census Data](https://walker-data.com/census-r/index.html){target="_blank"}, by Kyle Walker
:::

---

## {#diverging data-menu-title="Diverging scales"} 

[Diverging scales]{.slide-title}

<hr>

  - combination of [**two sequential palettes with a shared endpoint**]{.teal-text} at the central value
  - [**central value**]{.teal-text} is assigned a [**light color**]{.teal-text} (light gray is best)
  - use a [**distinctive hue**]{.teal-text} for each of the [**component palettes**]{.teal-text}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/diverging-scales.png")
```

::: {.footer}
Map source: [2020 U.S. Election Mapped: TrumpLand vs Biden Archipelago](https://vividmaps.com/us-election-2020/){target="_blank"}, by Vivid Maps
:::

---

## {#penguin-plots data-menu-title="Penguin base plots"} 

[Base plots (for applying color scales to)]{.slide-title}

<hr>

[We'll be testing out different palettes throughout this lesson. Instead of having to retype the code for our plots each time, let's create and save two versions of a penguin scatter plot. We can then call either of these plot objects to modify with different color scales:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)
```

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Requires a categorical color scale
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
cat_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8)

cat_color_plot 
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Requires a continuous color scale
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
con_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 

con_color_plot 
```
:::

::::

---

##  {#accessibility data-menu-title="# Accessibility #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Ensuring inclusive and accessible design through your color choices</p>
</div>

---

## {#colorblindness data-menu-title="Colorblindness"} 

[What is colorblindness?]{.slide-title}

<hr>

Color vision deficiency aka colorblindness is the decreased ability to see color or differences in color. It's estimated that about 1 in 12 men (8%) and 1 in 200 women (0.5%) are affected ([Wikipedia](https://en.wikipedia.org/wiki/Color_blindness){target="_blank"}).

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/color-test-plates.png")
```

::: {.center-text .body-text-s .gray-text}
Color plate tests are used to help identify different forms of color blindness. Try using the [Let's get color blind](https://chromewebstore.google.com/detail/lets-get-color-blind/bkdgdianpkfahpkmphgehigalpighjck){target="_blank"} Chrome extension to emulate different forms of colorblindness while looking at the above plates. Image source: [American Optometric Association](https://www.aoa.org/healthy-eyes/eye-and-vision-conditions/color-vision-deficiency?sso=y){target="_blank"}
:::

---

## {#rainbow-colormaps data-menu-title="Rainbow colormaps"} 

[The problem with rainbow color maps]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/moreland-rainbow.png")
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
knitr::include_graphics("images/week5/noaa-weathermap.png")
```
:::

::: {.column width="50%"}
- colors don't follow any natural perceived ordering (no innate sense of higher or lower)

- perceptual changes in rainbow colors are not uniform (e.g. colors appear to change faster in yellow region than green region)

- insensitive to color vision deficiencies
:::

::::

<br>

::: {.footer}
Top image source: [Why we use bad color maps and what you can do about it](https://www.kennethmoreland.com/color-advice/BadColorMaps.pdf){target="_blank"} | Bottom left image source: Ware C, Stone M, Albers Szafir D (2023) Rainbow colormaps are not all bad. IEEE Computer Graphics and Applications 43:88-93 [10.1109/MCG.2023.3246111](https://www.computer.org/csdl/magazine/cg/2023/03/10128890/1NdJMHqISnS){target="_blank"} | For another example of poor use of rainbow color maps, see this [world map with binned colors](https://en.wikipedia.org/wiki/Poverty#/media/File:Countries_by_Human_Development_Index_(2020).png){target="_blank"}
:::

---

## {#rainbow-colormaps-alt data-menu-title="Alt rainbow colormaps"} 

[If you're going to use a rainbow colormap. . . ]{.slide-title2}

<hr>

Try one of these improved versions (right), instead:

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text}
Problematic, perceptually nonuniform and unordered rainbow colormaps
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/bad-rainbow.png")
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text}
Improved, perceptual uniform and diverging rainbow colormaps
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/better-rainbow.png")
```
:::

::::

::: {.footer}
Image source: Ware C, Stone M, Albers Szafir D (2023) Rainbow colormaps are not all bad. IEEE Computer Graphics and Applications 43:88-93 [10.1109/MCG.2023.3246111](https://www.computer.org/csdl/magazine/cg/2023/03/10128890/1NdJMHqISnS){target="_blank"}

Also check out [Stoelzle & Stein (2021)](https://doi.org/10.5194/hess-25-4549-2021){target="_blank"} (Figure 1 is particularly helpful!) and [Crameri et al. (2020)](https://doi.org/10.1038/s41467-020-19160-7){target="_blank"} for some really great supplemental reading 
:::

---

## {#viridis data-menu-title="Viridis"} 

[ALTERNATIVE: Viridis]{.slide-title}

<hr>

[The `viridis` color scales](https://ggplot2.tidyverse.org/reference/scale_viridis.html){target="_blank"} are perceptually-uniform (even when printed in gray scale) and colorblindness-friendly:

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text}
Continuous viridis scales
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/viridis-continuous.png")
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text}
Binned viridis scales
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/viridis-binned.png")
```
:::

::::

There are a number of different ways to apply `viridis` color scales, but I often opt for [`scale_*_viridis_*()` functions](https://ggplot2.tidyverse.org/reference/scale_viridis.html){target="_blank"}, which come as part of `{ggplot2}`.

---

## {#use-viridis data-menu-title="Use viridis"} 

[Using viridis color scales]{.slide-title}

<hr>

Try out the palette options below, then check out the [documentation](https://ggplot2.tidyverse.org/reference/scale_viridis.html){target="_blank"} and play around with some alternative options as well.

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text}
Discrete viridis scales
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
cat_color_plot +
  scale_color_viridis_d(option = "viridis") 
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text}
Continuous viridis scales
:::

```{r}
#| eval: true
#| echo: true
#| #| fig-align: "center"
#| out-width: "100%"
con_color_plot +
  scale_color_viridis_c(option = "magma")
```
:::

::::

```{r}
# countdown::countdown(
#   minutes = 2,
#   # left = 0, right = 0,
#   # Fanfare when it's over
#   play_sound = TRUE,
#   color_border              = "#FFFFFF",
#   color_text                = "#7aa81e",
#   color_running_background  = "#7aa81e",
#   color_running_text        = "#FFFFFF",
#   color_finished_background = "#ffa07a",
#   color_finished_text       = "#FFFFFF",
#   font_size = "2em",
#   )
```

---

## {#color-brewer data-menu-title="ColorBrewer"} 

[ALTERNATIVE: RColorBrewer]{.slide-title}

<hr>

[ColorBrewer](https://ggplot2.tidyverse.org/reference/scale_brewer.html){target="_blank"} offers a number of colorblind-friendly color schemes for maps and other graphics. Check them out using `{RColorBrewer}` or the [web-based interface](http://colorbrewer2.org){target="_blank"}.

<br>

```{r}
#| eval: false
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)
```

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Colorblind-friendly palettes, viewed using `display.brewer.all()`
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/brewer-colorblind.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
ColorBrewer's web-based interface for exploring palettes
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/ColorBrewer-web.png")
```
:::

::::

---

## {#color-brewer-pal data-menu-title="Show RColorBrewer palette"} 

[ALTERNATIVE: RColorBrewer]{.slide-title}

<hr>

<br>

`{RColorBrewer}` comes with a couple useful functions for quickly viewing and assembling your palette's HEX codes: 

<br>

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Preview a palette with your number of desired colors:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.pal(n = 4, name = "Dark2")
```

:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Print the HEX codes of your palette:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::brewer.pal(n = 4, name = "Dark2")
```

:::

::::

::: {.notes}
```{r}
#| eval: false
#| echo: true
# preview palette with your number of desired colors ----
RColorBrewer::display.brewer.pal(n = 7, name = "Dark2")
display.brewer.pal(n = brewer.pal.info["Dark2", "maxcolors"], name = "Dark2") # alternatively

# print the HEX codes of your palette ----
all_cols <- RColorBrewer::brewer.pal(n = 7, name = "Dark2")

# select just desired colors ----
selected_colors <- all_cols[c(1, 7)]
```
:::

---

## {#use-RColorBrewer data-menu-title="Use RColorBrewer"} 

[Using RColorBrewer color scales]{.slide-title}

<hr>

Use the right function (all part of `{ggplot2}`) for the type of data / palette:

<br>

:::: {.columns}

::: {.column width="33%"}

::: {.center-text .body-text-s .gray-text}
Use `scale_color_brewer()` to apply **qualitative palettes** 
:::

```{r}
#| eval: true
#| echo: true
#| #| fig-align: "center"
#| out-width: "100%"
cat_color_plot +
  scale_color_brewer(palette = "Dark2") 
```
:::

::: {.column width="33%"}

::: {.center-text .body-text-s .gray-text}
Use `scale_color_distiller()` for **unclassed continuous color scales**
:::

```{r}
#| eval: true
#| echo: true
#| #| fig-align: "center"
#| out-width: "100%"
con_color_plot +
  scale_color_distiller(palette = "BuPu")
```
:::

::: {.column width="33%"}

::: {.center-text .body-text-s .gray-text}
Use `scale_color_fermenter()` for **classed continuous color scales**
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
con_color_plot +
  scale_color_fermenter(palette = "YlGnBu")
```
:::

::::

Check out the [documentation](https://ggplot2.tidyverse.org/reference/scale_brewer.html){target="_blank"} and play around with some alternative options.

```{r}
# countdown::countdown(
#   minutes = 2,
#   # left = 0, right = 0,
#   # Fanfare when it's over
#   play_sound = TRUE,
#   color_border              = "#FFFFFF",
#   color_text                = "#7aa81e",
#   color_running_background  = "#7aa81e",
#   color_running_text        = "#FFFFFF",
#   color_finished_background = "#ffa07a",
#   color_finished_text       = "#FFFFFF",
#   font_size = "2em",
#   )
```

---

## {#outline-points data-menu-title="Tip: outline points"} 

[Accessibility tip: outline points to make light colors more visible]{.slide-title2}

<hr>

Rather than `color` points by `body_mass_g`, we can `fill` points by `body_mass_g`. Then, we need to change the [`shape` of our points to `21`](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#sec:shape-spec){target="_blank"}, which is the code for an outlined, fill-able point: 

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, fill = body_mass_g)) +
  geom_point(shape = 21, size = 4, alpha = 0.8) +
  scale_fill_distiller(palette = "BuPu")
```

::: {.footer}
Trick comes courtesy of [Albert Rapp](https://albert-rapp.de/){target="_blank"} and his [How to Use Better Colors in ggplot (3 Easy Ways)](https://www.youtube.com/watch?v=ZVSbY4z7tMY){target="_blank"} video tutorial. Check out his [YouTube channel](https://www.youtube.com/@rappa753){target="_blank"} for *tons* of great R content.
:::

---

## {#redundant-mapping data-menu-title="Redundant mapping"} 

[Accessibility tip: use redundant mapping whenever possible]{.slide-title}

<hr>

Recall that colors are [low on the hierarchy of elementary perceptual tasks](lecture2.1-choosing-graphic-forms-slides.html#/hierarchy){target="_blank"}. **When possible, avoid conveying important information purely through color** -- consider how you might additionally use shapes, symbols, typography, or annotations.

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/apigo2022.png")
```

<br>

::: {.footer}
Figure 2 from Apigo A and Oono R (2022) Plant abundance, but not plant evolutionary history, shapes patterns of host specificity in foliar fungal endophytes. Ecosphere. 13(1):e03879. [https://doi.org/10.1002/ecs2.3879](https://doi.org/10.1002/ecs2.3879){target="_blank"}
:::

---

##  {#premade-palettes data-menu-title="# Additional palette packages#" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">There are *so many* other great pre-made color palettes to explore, many of which take into consideration color vision deficiencies (*but always double check!*)</p>
</div>

---

## {#paletteer data-menu-title="Paletteer"} 

[Use paletteer to access TONS of pre-made palettes]{.slide-title2}

<hr>

The [`{paletteer}` package](https://emilhvitfeldt.github.io/paletteer/){target="_blank"}  provides a **common interface** for accessing a near-comprehensive **list of palettes (over 2,500!!) across various packages**.

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/paletteer.png")
```
:::

::: {.column width="50%"}

<br>
<br>

- two groups of palettes: **discrete** and **continuous**
- discrete palettes can be **fixed** (have a set # of colors) or **dynamic** (adjustable # of colors based on your specifications)
:::

::::

---

## {#explore-paletteer data-menu-title="Explore paletteer"} 

[Take a couple minutes to explore palettes]{.slide-title}

<hr>

There are a number of ways to browse the extensive list of supported palette packages, including in the [**`{paletter}` documentation**](https://emilhvitfeldt.github.io/paletteer/#included-packages){target="_blank"}, on the [**r-color-palettes**](https://github.com/EmilHvitfeldt/r-color-palettes){target="_blank"} GitHub repo, on the [**R Color Palettes**](https://emilhvitfeldt.github.io/r-color-palettes/){target="_blank"} website, the [**R-Graph Gallery's Color Palette Finder**](https://r-graph-gallery.com/color-palette-finder){target="_blank"} (built on `{paletteer}`; see below).

<!-- ::: {.center-text .body-text-s .gray-text} -->
<!-- The **[R-Graph Gallery's Color Palette Finder**](https://r-graph-gallery.com/color-palette-finder){target="_blank"} provides an easy interface for exploring supported `{paletteer}` palettes. You can also simulate vision deficiencies and find code for building the example visualizations.  -->
<!-- ::: -->

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
knitr::include_graphics("images/week5/r-graph-gallery-paletteer.gif")
```


```{r}
countdown::countdown(
  minutes = 2,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

. . .

::: {.center-text}
**`{paletteer}` is useful in a number of ways -- let's consider [two options]{.teal-text} next**
:::

::: {.footer}
TIP: Check out the `palettes_c_names` & `palettes_d_names` data frames, which contain information about supported palettes and packages.
:::

---

## {#1-scale-paletteer data-menu-title="1. scale_*_paletteer()"} 

[1. Apply a palette using `scale_*_paletteer_*()`]{.slide-title2}

<hr>

[where `scale_*` can be `scale_color` or `scale_fill` & and `paletteer_*` can be `paletteer_d` (discrete), `paletteer_c` (continuous), or `paletteer_binned`]{.body-text-s}

::: {.body-text-s .gray-text}
**Find eligible palettes in the following built-in data frames:**
:::

```{r}
#| eval: false
#| echo: true
View(palettes_d_names)
View(palettes_c_names)
```

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
**superbloom3** palette from `{calecopal}`
:::

```{r}
#| eval: true
#| echo: true
#| warning: false
cat_color_plot +
  paletteer::scale_color_paletteer_d("calecopal::superbloom3")
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
**batlow** palette from `{scico}`
:::

```{r}
#| eval: true
#| echo: true
#| warning: false
con_color_plot +
  paletteer::scale_color_paletteer_c("scico::batlow", direction = -1)
```
:::

::::

::: {.footer}
Also try using `scale_color_paletteer_binned()` to apply the **batlow** palette, above.
:::

---

## {#2a-generate-hex-codes data-menu-title="2a. Generate HEX codes"} 

[2a. Create vector of HEX codes using `paletteer_*()`]{.slide-title3}

<hr>

- be sure to specify the number of desired colors (`n`), and optionally, the `direction`

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
**GrandBudapest1** palette from `{wesanderson}` 

(discrete, with 3 colors)
:::

```{r}
#| eval: true
#| echo: true
#| warning: false
pal_d <- paletteer::paletteer_d("wesanderson::GrandBudapest1", n = 3)
pal_d
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
**grayC** palette from `{scico}` 

(continuous, with 5 colors)
:::

```{r}
#| eval: true
#| echo: true
#| warning: false
pal_c <- paletteer::paletteer_c("scico::grayC", n = 5)
pal_c
```
:::

::::

. . .

<br>

::: {.body-text-m .center-text}
**We can now apply our palette to our plot using the appropriate `ggplot2::scale_*()` function.**

<br>

See the next slide for some commonly used options. 
:::

---

## {#common-scaling-fxns data-menu-title="Common scaling functions"} 

[Some common functions for scaling colors]{.slide-title2}

<hr>

**For qualitative (categorical) data <img src="images/week5/qualitative.png" alt="A qualitative color scale with 5 distinct colors: dark blue, medium blue, yellow, orange, red." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/> :**

- [`scale_*_manual()`]{.body-text-s}

**For quantitative (numeric) data:**

Unclassed palettes <img src="images/week5/unclassed-seq.png" alt="An unclassed sequential color scale which transitions from light to dark blue moving left to right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/> :

- [`scale_*_gradient()`: creates a two color gradient (low-high)]{.body-text-s}
- [`scale_*_gradient2()`: creates a diverging color gradient (low-mid-high)]{.body-text-s}
- [`scale_*_gradientn()`: creates a n-color gradient]{.body-text-s}

Classed palettes <img src="images/week5/classed-seq.png" alt="A classed sequential color scale with 5 binned colors ranging from light blue on the left to dark blue on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/> :

- [`scale_*steps()`: creates a two color binned gradient (low-high)]{.body-text-s}
- [`scale_*_steps2()`: creates a diverging binned color gradient (low-mid-high)]{.body-text-s}
- [`scale_*_stepsn()`: creates a n-color binned gradient]{.body-text-s}

::: {.center-text .body-text-s}
**Use the `fill` variant of the above functions for areas, bars, etc. and the `color` variant for points, lines, etc.**
:::

---

## {#2b-apply-palettes_d data-menu-title="2b. Apply palettes using scale_*()"} 

[2b. Apply palette using `ggplot2::scale_*()`]{.slide-title2}

<hr>

**Examples using our discrete color palette:**

```{r}
#| eval: true
#| echo: true
#| warning: false
pal_d <- paletteer::paletteer_d("wesanderson::GrandBudapest1", n = 3)
```

<br>

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
apply to scatter plot using the `color` variant
:::
```{r}
#| eval: true
#| echo: true
#| warning: false
cat_color_plot + 
  scale_color_manual(values = pal_d)
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
apply to histogram using the `fill` variant
:::
```{r}
#| eval: true
#| echo: true
#| warning: false
ggplot(penguins, aes(x = body_mass_g, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = pal_d)
```
:::

::::

---

## {#2b-apply-palettes_c data-menu-title="2b. Apply palettes using scale_*()"} 

[2b. Apply palette using `ggplot2::scale_*()`]{.slide-title2}

<hr>

**Examples using our continuous color palette:**

```{r}
#| eval: true
#| echo: true
#| warning: false
pal_c <- paletteer::paletteer_c("scico::grayC", n = 5, direction = -1)
```

<br>

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
apply to scatter plot as an unclassed palette (use `gradientn` variant)
:::
```{r}
#| eval: true
#| echo: true
#| warning: false
con_color_plot + 
  scale_color_gradientn(colors = pal_c)
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
apply to scatter plot as a classed (binned) palette (use `stepsn` variant)
:::
```{r}
#| eval: true
#| echo: true
#| warning: false
con_color_plot + 
  scale_color_stepsn(colors = pal_c)
```
:::

::::

---

##  {#climate-colors data-menu-title="# Climate colors #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Climate and environmental science visualizations can (should) draw from community standards, when possible</p>
</div>

---

## {#climate-palettes data-menu-title="Kaye et al. 2012"} 

[Some widely-used climate science palettes]{.slide-title}

<hr>

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "40%"
#| fig-align: "center"
knitr::include_graphics("images/week5/kaye-etal-2012-colors.png")
```

<br>

::: {.center-text .body-text-s}
**Figure 4.** Appropriate diverging and sequential colour schemes for the following climate data (a), absolute temperature (b), absolute precipitation (c), temperature anomaly (d), precipitation or runoff anomaly (e and f) other climate variables with no symbolic association . Schemes in this figure are 7 class ones designed by Cynthia Brewer, ([Brewer et al. 2003](https://tizmogollon.weebly.com/uploads/1/5/4/7/15475746/brewer_etal_2003_colorbrewer_in_print.pdf){target="_blank"})
:::

<br>

::: {.footer}
**Citation:** Kaye NR, Hartley A, Hemming D (2012) Mapping the climate: guidance on appropriate techniques to map climate variables and their uncertainty. Geoscientific Model Development. 5:245-256. www.geosci-model-dev.net/5/245/2012/ ([PDF download](https://www.researchgate.net/publication/307824079_Mapping_the_climate_guidance_on_appropriate_techniques_to_map_climate_variables_and_their_uncertainty){target="_blank"})
:::

---

## {#cc-abs-temp data-menu-title="Absolute temp palette example"} 

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "30%"
#| fig-align: "center"
knitr::include_graphics("images/week5/abs-temp.png")
```

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week5/abs-temp-palette.png")
```

::: {.footer}
Source: Zittis, G., Lazoglou, G., Hadjinicolaou, P. et al. Emerging extreme heat conditions as part of the new climate normal. Theor Appl Climatol 155, 143–150 (2024). [https://doi.org/10.1007/s00704-023-04605-y](https://doi.org/10.1007/s00704-023-04605-y){target="_blank"}
:::

---

## {#cc-temp-precip-anomaly data-menu-title="Temp & precip anomaly palette examples"} 

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "40%"
#| fig-align: "center"
knitr::include_graphics("images/week5/anomaly-temp-precip.png")
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week5/temp-anomaly-palette.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week5/precip-anomaly-palette.png")
```
:::

::::

::: {.footer}
Source: [C3S seasonal lookback: summer 2024](https://climate.copernicus.eu/c3s-seasonal-lookback-summer-2024){target="_blank"}, by [Copernicus](https://www.copernicus.eu/en){target=_"blank"}
:::

---

##  {#color-theory data-menu-title="# Basic Color Theory #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Want to design your own palette? Here are some helpful guidelines and considerations...</p>
</div>

---

## {#select-hue data-menu-title="Selecting hues"} 

[Select hues using color wheels / pickers]{.slide-title}

<hr>

<!-- - **Primary colors** are the main colors in a given color system (e.g. light (RGB) = [red]{style="background-color:#FF0000; color=#FFFFFF;" .white-text}, [green]{style="background-color:#00FF00"} [blue]{style="background-color:#0000FF" .white-text}). *Primary colors cannot be produced by mixing other colors in that system together.* -->

<!-- - **Secondary colors** are made by *mixing two primary colors* in a given color system -->

<!-- - **Tertiary colors** are made by *mixing a primary and secondary color* in a given color system -->

<!-- Hues (pure colors) are found around the **outer edge of color wheels**, or by adjusting the HEX code (sliding scale), then ensuring that selector is set to the **far right edge of a color picker box**: -->

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
There are lots of different variations of color wheels, but look for hues along the **outer edge**:
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/color-wheels.png")
```

<br>
<br>

::: {.center-text .body-text-s .gray-text}
Common color models: RYB (used by painters), RGB (used in electonic displays), CMYK (used in modern printing). Image source: [medium.com](https://broworks.medium.com/color-guide-terms-definitions-and-useful-websites-6fa4f13bcb85){target="_blank"}
:::
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
When using a color picker, **adjust the HEX code sliding scale** to pick a hue and ensure that the selector is set to the **top right edge** of the box:
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/google-color-picker.png")
```
::: {.center-text .body-text-s .gray-text}
There are lots of great color pickers out there, though [Google color picker](https://g.co/kgs/9SQkdgv){target="_blank"} is a quick one to navigate to. [HTML color codes](https://htmlcolorcodes.com/){target="_blank"} is my personal favorite.
:::
:::

::::

<br>

::: {.notes}
- RGB: basis for all colors on the screen (with these primary colors, we can make all other colors digitally)
- RYB: known as painting color system (used by artists in painting)
- CMYK: used on modern printing
:::

---

## {#colors-harmonies1 data-menu-title="Color harmonies"} 

[Use color wheels identify color harmonies]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
knitr::include_graphics("images/week5/color-harmonies.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [htmlcolorcodes.com](https://htmlcolorcodes.com/color-picker/){target="_blank"}
:::

. . . 

<br>

:::: {.columns}

::: {.column width="50%"}
<br>

::: {.center-text}
[blue-green]{style="background-color:#088F8F" .white-text} & [red-orange]{style="background-color:#FF4433" .white-text} are complementary and therefore offer the strongest possible contrast
:::

::: {.center-text .body-text-s}
Find descriptions of [blue-green](https://htmlcolorcodes.com/colors/blue-green/){target="_blank"} & [red-orange](https://htmlcolorcodes.com/colors/red-orange/){target="_blank"} on [htmlcolorcodes.com](https://htmlcolorcodes.com/){target="_blank"}
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
library(palmerpenguins)
library(tidyverse)

ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar()
```
:::

::::

---

## {#hue-meaning data-menu-title="Hue meaning"} 

[Hues have associated meaning]{.slide-title}

<hr>

::: {.center-text}
We associate meaning with different hues (e.g. [cold / sad = blue]{style="background-color:#0015fa" .white-text}, [hot / angry = red]{style="background-color:#fa0202" .white-text}), and *importantly,* these [**associations can differ among cultures**]{.teal-text}.
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/colors-cultures.png")
```

::: {.center-text .body-text-s .gray-text}
Source: [Information is Beautiful](https://informationisbeautiful.net/visualizations/colours-in-cultures/){target="_blank"}
:::

---

## {#multicultural-colors data-menu-title="Multicultural colors"} 

[Some associations span multiple cultures]{.slide-title}

<hr>

<br>
<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/colors-cultures-highlights.png")
```

::: {.center-text .body-text-s .gray-text}
Source: [Information is Beautiful](https://informationisbeautiful.net/visualizations/colours-in-cultures/){target="_blank"}
:::

:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/hawkins-warming-stripes.png")
```

::: {.center-text .body-text-s .gray-text}
Source: Ed Hawkins [(showyourstripes.info)](https://showyourstripes.info/){target="_blank"}
:::

:::

::::

---

## {#emotional-response-bake-off data-menu-title="Color & emotions (bake off)"} 

[Colors elicit emotional responses]{.slide-title}

<hr>

>*"lightness, brightness, and saturation can communicate the level of seriousness, intensity, and emotional weight in a visual work"* -[Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/){target="_blank"}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/thompson-bake-off.png")
```

::: {.center-text .gray-text .body-text-s}
[The Great British Bake Off | Race to the Top](https://github.com/cararthompson/tidytuesdays?tab=readme-ov-file#2022-09---gbbo){target="_blank"}, by [Cara Thompson](https://www.cararthompson.com/){target="_blank"} ([source code](https://github.com/cararthompson/tidytuesdays/blob/main/scripts/202210_gbbo.R){target="_blank"})
:::
:::

::: {.column width="50%"}
<br>
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/scherer-legos.png")
```

::: {.center-text .gray-text .body-text-s}
[The LEGO Color Explosion](https://github.com/z3tt/TidyTuesday?tab=readme-ov-file#202236--lego-database-by-rebrickable){target="_blank"}, by [Cédric Scherer](https://www.cedricscherer.com/){target="_blank"} ([source code](https://github.com/z3tt/TidyTuesday/blob/main/R/2022_36_LEGO_bricks.qmd){target="_blank"})
:::
:::

::::
---

## {#emotional-response-covid-cases data-menu-title="Color & emotions (covid cases)"} 

[Colors elicit emotional responses]{.slide-title}

<hr>

>*"lightness, brightness, and saturation can communicate the level of seriousness, intensity, and emotional weight in a visual work"* -[Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/){target="_blank"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/jh-covid.png")
```

::: {.center-text .body-text-s .gray-text}
(Right) [COVID-19 tracker](https://coronavirus.jhu.edu/map.html){target="_blank"} by the Johns Hopkins University (screenshot from 2020-07-27, courtesy of [Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/){target="_blank"}). Red tends to elicit panic / fear. (Left) A map of confirmed COVID-19 cases by Datawrapper (screenshot from 2020-07-27, courtesy of [Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/){target="_blank"}). Blues and greens help to avoid such a strong fearful emotional response.
:::

---

## {#emotional-response-covid-deaths data-menu-title="Color & emotions (covid deaths)"} 

[Colors elicit emotional responses]{.slide-title}

<hr>

<br>
<br>

::: {.body-text-m}
> "We show the **current or confirmed cases in another color than red**. The coronavirus is **not a death sentence**. Most infected people will survive. If you’re infected, you want to find yourself on a map as a blue (or yellow, or beige, or purple…) dot, not as a “attention, danger, run!”-screaming red dot. **Related, we show deaths in black, not red – it feels more respectful**."
:::

::: {.right-align-text .body-text-s}
-Lisa Charlotte Muth in [17 (or so) responsible live visualizations about the coronavirus, for you to use](https://blog.datawrapper.de/coronaviruscharts/){target="_blank"}, 

published March 3, 2020
:::

---

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/one-million-deaths.png")
```

<br>

::: {.footer}
Learn more about this award-winning visualization in an interview with Carrie Mifsud: [Capturing One Million Deaths on a Page: A Chat with NYT’s Carrie Mifsud](https://nightingaledvs.com/capturing-one-million-deaths-on-a-page-carrie-mifsud/){target="_blank"}
:::

---

## {#avoid-pure-hue data-menu-title="Avoid pure hues"} 

[Using pure hues can be overwhelming]{.slide-title}

<hr>

Though it may be temping to use bright / bold colors to grab attention, it can lead to eye strain and make it more challenging for your readers to focus on your chart.

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/pure-hue1.png")
```

::: {.center-text .gray-text .body-text-s}
Image source: [5 pitfalls to avoid when working with color in data visualization](https://flourish.studio/blog/color-in-data-visualization/){target="_blank"}
:::

---

## {#more-subdued data-menu-title="Use more subdued hues"} 

[Use more subdued colors instead]{.slide-title}

<hr>

Though it may be temping to use bright / bold colors to grab attention, it can lead to eye strain and make it more challenging for your readers to focus on your chart.

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/pure-hue2.png")
```

::: {.center-text .gray-text .body-text-s}
Image source: [5 pitfalls to avoid when working with color in data visualization](https://flourish.studio/blog/color-in-data-visualization/){target="_blank"}
:::

---

## {#adjust-sat1 data-menu-title="Adjust saturation 1"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation / chroma** (i.e. the level of intensity of a color)]{.body-text-m}

[2. **adjust luminance**: tint (+ white), tone (+ gray), or shade (+ black)]{.gray-text .body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (132° on the color wheel) at 100% saturation
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-100sat.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (132° on the color wheel) at 20% saturation (HSL)
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-20sat.png")
```
:::

::::

::: {.footer}
Saturation adjusted using the HSL (Hue, Saturation, Lightness) color model. Read about [HSL vs HSV color models](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.){target="_blank"} if you want a deeper dive.
:::

---

## {#adjust-sat2 data-menu-title="Adjust saturation 2"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation / chroma** (i.e. the level of intensity of a color)]{.body-text-m}

[2. **adjust luminance**: tint (+ white), tone (+ gray), or shade (+ black)]{.gray-text .body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
The default chroma for ggplots is set to 100%
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar()
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Use `scale_*_hue()` to adjust chroma (saturation)
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar() +
  scale_fill_hue(c = 70)
```

:::

::::

::: {.footer}
`scale_*_hue()` uses colors based on the [HCL color model](https://en.wikipedia.org/wiki/HCL_color_space){target="_blank"}.
:::

---

## {#adjust-lightness1 data-menu-title="Adjust lightness 1"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation / chroma** (i.e. the level of intensity of a color)]{.gray-text .body-text-m}

[2. **adjust luminance**: tint (+ white), tone (+ gray), or shade (+ black)]{.body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (132° on the color wheel) with luminance adjusted to 90% (more white) 
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-tint.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (132° on the color wheel) with luminance adjusted to 10% (more black)
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-shade.png")
```
:::

::::

::: {.footer}
Lightness adjusted using the HSL (Hue, Saturation, Lightness) color model. Read about [HSL vs HSV color models](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.){target="_blank"} if you want a deeper dive.
:::

---

## {#adjust-lightness2 data-menu-title="Adjust lightness 2"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation / chroma** (i.e. the level of intensity of a color)]{.gray-text .body-text-m}

[2. **adjust luminance**: tint (+ white), tone (+ gray), or shade (+ black)]{.body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
The default luminance for ggplots is set to 65%
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
  geom_point()
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Use `scale_*_hue()` to adjust luminance
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
  geom_point() +
  scale_color_hue(l = 45)
```

:::

::::

::: {.footer}
`scale_*_hue()` uses colors based on the [HCL color space](https://en.wikipedia.org/wiki/HCL_color_space){target="_blank"}. The default luminance value of 65(%) is good for filled areas but may be a bit light for points and lines.
:::

---

## {#adjust-opacity data-menu-title="Adjust opacity"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation / chroma** (i.e. the level of intensity of a color)]{.gray-text .body-text-m}

[2. **adjust luminance**: tint (+ white), tone (+ gray), or shade (+ black)]{.gray-text .body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.body-text-m}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
library(tidyverse)

data <- tribble(
  ~group, ~value,
  "A", 10,
  "B", 14, 
  "C", 12,
  "D", 15
)
```

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (132° on the color wheel) with default opacity (100%)
:::

```{r}
ggplot(data, aes(x = group, y = value)) +
  geom_col(fill = "#00FF33", color = "gray7") + 
  theme_classic() +
  theme(axis.title = element_blank()) 
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (132° on the color wheel) with opacity reduced to 50%
:::

```{r}
ggplot(data, aes(x = group, y = value)) +
  geom_col(fill = "#00FF33", color = "gray7", alpha = 0.5) + 
  theme_classic() +
  theme(axis.title = element_blank())
```
:::

::::

---

## {#build-palettes data-menu-title="Building your own palette"} 

[Building your own color palette]{.slide-title}

<hr>

Be sure to consider what we've already discussed:

- [ensure that you're picking **colorblind-friendly** color combos]{.body-text-s}
- [use color wheels to identify **color harmonies**]{.body-text-s}
- [think carefully about what **emotions / messages** your color choices will convey]{.body-text-s}
- [**avoid** lots of **pure** / fully-saturated **hues**]{.body-text-s}

. . . 

:::: {.columns}

::: {.column width="50%"}
<br>
And also consider some other important sources of inspiration: 

- [your company or organization's **brand / logo**]{.body-text-s}
- [**steal colors** from your favorite / relevant images using tools like [Color Thief](https://lokeshdhakar.com/projects/color-thief/){target="_blank"}]{.body-text-s}
- [use a randomized **palette generator**, like [coolers.co](https://coolors.co/?home){target="_blank"} {{< fa arrow-right title="an arrow pointing to the right" >}}]{.body-text-s}
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
knitr::include_graphics("images/week5/coolers.png")
```
:::

::::

---

## {#save-palette data-menu-title="Save palette outside plot"} 

[TIP: Save your palette outside of your ggplot]{.slide-title2}

<hr>

I recommend saving your palette to a named vector *outside* of your ggplot -- this prevents lengthy palettes from creating cluttered ggplot code *and* allows you to reuse your palette across multiple plots:

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
# create palette ----
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")

# apply to plot ----
cat_color_plot +
  scale_color_manual(values = my_palette) # alternatively, `scale_color_manual(values = c("#32DE8A", "#E36414", "#0F4C5C"))`
```

::: {.footer}
Refer back to the [common `{ggplot2}` scaling functions](lecture5.2-colors-slides.qmd#common-scaling-fxns){target="_blank"}, to determine which is appropriate for your data / plot.
:::

---

## {#set-color-names1 data-menu-title="Set color names 1"} 

[TIP: Set color names (1/2)]{.slide-title}

<hr>

[We should always be consistent with our colors. **E.g. if Gentoo penguins are blue in one plot, they should be blue in all plots.** Notice that our colors don't "stick" with the species they represent, but rather they're applied in the order that they appear in our palette:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")
```

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Adelie, Chinstrap & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Just Adelie & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "1-2"
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)
```
:::

::::

---

## {#set-color-names2 data-menu-title="Set color names 2"} 

[TIP: Set color names (2/2)]{.slide-title}

<hr>

[Setting the names of our vector elements (colors) ensures that they stick with those factor levels across all of our visualizations:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
my_palette_named <- c("Adelie" = "#32DE8A","Chinstrap" = "#E36414", "Gentoo" = "#0F4C5C")
```

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Adelie, Chinstrap & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Just Adelie & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "1-2"
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)
```
:::

::::

---

## {#modify-df data-menu-title="Modify df"} 

[Tip: modify df to apply colors to observations]{.slide-title2}

<hr>

[The [`scale_*_identity()` functions](https://ggplot2.tidyverse.org/reference/scale_identity.html){target="_blank"} allows you to map aesthetic values from your data frame to individual points. They will not produce a legend unless specified using `guide = "legend"`.]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
penguins |> 
  mutate(
    my_color = case_when(
      bill_length_mm < 40 ~ "#D7263D",
      between(x = bill_length_mm, left = 40, right = 50) ~ "#E4BB97",
      bill_length_mm > 50 ~ "#386150"
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_identity()
```

:::

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: true
#| out-width: "80%"
#| fig-align: "center"
penguins |> 
  mutate(
    my_color = case_when(
      body_mass_g > 6000 ~ "#D7263D",
      TRUE ~ "gray50"
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_identity(guide = "legend", 
                       name = "Body mass (g)", 
                       labels = c(">6000", "<= 6000"))
```

:::

::::

::: {.notes}
This isn't the only way to do this! Try creating a `highlight` variable in your data frame. See <https://andrewirwin.github.io/data-visualization/colour.html#highlighting> and
:::

<!-- --- -->

<!-- ## {#create-palette data-menu-title="Create your own palette"}  -->

<!-- [Create your own palettes!]{.slide-title} -->

<!-- <hr> -->

<!-- Create your own palettes and use them to scale colors in the plots below:  -->

<!-- <br> -->

<!-- :::: {.columns} -->

<!-- ::: {.column width="50%"} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| fig-align: "center" -->
<!-- #| out-width: "90%" -->
<!-- library(palmerpenguins) -->
<!-- library(tidyverse) -->

<!-- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) + -->
<!--   geom_point(size = 4, alpha = 0.8)  -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: {.column width="50%"} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| fig-align: "center" -->
<!-- #| out-width: "590%" -->
<!-- library(palmerpenguins) -->
<!-- library(tidyverse) -->

<!-- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) + -->
<!--   geom_point(size = 4, alpha = 0.8)  -->
<!-- ``` -->
<!-- ::: -->

<!-- :::: -->

<!-- ```{r} -->
<!-- countdown::countdown( -->
<!--   minutes = 5, -->
<!--   # left = 0, right = 0, -->
<!--   # Fanfare when it's over -->
<!--   play_sound = TRUE, -->
<!--   color_border              = "#FFFFFF", -->
<!--   color_text                = "#7aa81e", -->
<!--   color_running_background  = "#7aa81e", -->
<!--   color_running_text        = "#FFFFFF", -->
<!--   color_finished_background = "#ffa07a", -->
<!--   color_finished_text       = "#FFFFFF", -->
<!--   font_size = "2em", -->
<!--   ) -->
<!-- ``` -->

---

##  {#general-rules data-menu-title="# General rules #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">There are also some additional rules / guidelines that you should pretty much always abide by when selecting colors</p>
</div>

---

## {#saturation data-menu-title="Saturation"} 

[High saturation = greater / more important values]{.slide-title2}

<hr>

<br>

::: {.body-text-m .center-text}
It's okay to use saturated / brighter colors in moderation. 

*We tend to associate **more saturated** colors with **greater values**.*
:::

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/2020-election.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [New York Times](https://www.nytimes.com/interactive/2021/upshot/2020-election-map.html){target="_blank"}
:::
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/ggdensity-saturation.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [`{ggdensity}` pkgdown site](https://jamesotto852.github.io/ggdensity/index.html){target="_blank"}. 
:::
:::

::::

---

## {#no-more-than-7 data-menu-title="No more than 7"} 

[No more than 7 colors]{.slide-title}

<hr>

::: {.center-text .body-text-m}
If you need more than seven colors, consider alternative chart types.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/7colors.png")
```

<br>

::: {.footer}
Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth
:::

---

## {#consistency data-menu-title="Be consistent"} 

[Use colors consistently]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Ensure consistent use of colors across multiple visualizations that display the same groups.
:::

<br>


```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/consistent-colors.png")
```

<br>

::: {.footer}
Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth
:::

---

## {#legend data-menu-title="Include legend"} 

[Explain what your colors encode]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Always include a color key, in the form of a traditional legend or otherwise.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/legend.png")
```

<br>

::: {.footer}
Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth
:::

---

## {#highlight data-menu-title="Highlight"} 

[Highlight important values]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Use gray for less important groups / values, annotations, contextual information, etc.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/use-gray.png")
```

<br>

::: {.footer}
Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth
:::

---

## {#intuitive-colors data-menu-title="Intuitive colors"} 

[Be predictable in your color choices]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Use intuitive colors (e.g. green for forest, blue for water) but avoid stereotypes (e.g. pink for women, blue for men).
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/intuitive-colors.png")
```


<br>

::: {.center-text}
Try a cold color for men (e.g. blue or purple) and a warmer color for women (e.g. yellow, orange or a warm green; see  [this great blog post](https://blog.datawrapper.de/gendercolor/){target="_blank"} for more information). 
:::

<br>

::: {.footer}
Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth
:::

---

## {#gradient-low-high data-menu-title="Bright = low, dark = high"} 

[Bright = low, dark = high]{.slide-title}

<hr>

::: {.center-text .body-text-m}
In most cases, readers will associate bright colors with lower values and darker colors with higher values. Build gradients accordingly.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/low-high-choropleth.png")
```

<br>

::: {.footer}
Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth
:::

---

## {#gradient-high-low data-menu-title="Bright = high, dark = low"} 

[Except in some cases. . .]{.slide-title}

<hr>

>"humans perceive bright colors on elevation maps to represent a high altitude, with darker colors representing naturally low-lying and shady areas like valley" (Cédric Scherer, [Colors and Emotions in Data Visualization](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/#:~:text=Dark%20and%20saturated%20colors%20are,perceived%20differently%20in%20different%20cultures.){target="_blank"}) 

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/shasta.png")
```

::: {.center-text .body-text-s .gray-test}
Filled contour plot of Mt. Shasta. Image source: [EarthLab](https://www.earthdatascience.org/tutorials/visualize-digital-elevation-model-contours-matplotlib/){target="_blank"}
:::
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/pohnpei.png")
```

::: {.center-text .body-text-s .gray-test}
USGS Digital Elevation Model of Pohnpei (Micronesia). Image source: [PacIOOS](https://www.pacioos.hawaii.edu/voyager-news/digital-elevation-models/){target="_blank"}
:::
:::

::::

---

## {#gradients-continuous data-menu-title="Gradients for continuous data"} 

[Gradient palettes for continuous data only]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Most readers will associate dark colors with "high / important" and bright or light colors with "low / less". Using a gradient palette with categorical data may imply a ranking of categories where there shouldn't be.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/no-gradient-for-discrete.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth*
:::

---

## {#lightness-gradient data-menu-title="Lightness + hue"} 

[Use lightness, not just hue, to build gradients]{.slide-title2}

<hr>

::: {.center-text .body-text-m}
Gradients should also work in black and white.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/lightness-gradient.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth*
:::

---

## {#two-hues data-menu-title="Two hues"} 

[Two hues are sometimes better than one]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Readers are generally better able to distinguish colors on a gradient better if they are encoded through both lightness and two (sometimes three) carefully-selected hues.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/1-or-2-hues.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/){target="_blank"}, by Lisa Charlotte Muth*
:::

---

##  {#break data-menu-title="# Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ This is the end of Lesson 2 (of 3) ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

