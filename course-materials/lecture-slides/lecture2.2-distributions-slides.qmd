---
format: 
  revealjs:
    slide-number: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 2.2]{.custom-title}

[*Visualizing distributions*]{.custom-subtitle}

<hr class="hr-teal">

[Week 2 | January 13^th^, 2024]{.custom-subtitle3}

---

## {#what-is-dist data-menu-title="Data distribution"} 

[Visualizing data *distribution*?]{.slide-title}

<hr>

<br>
<br>
<br>

. . .

::: {.body-text-l .center-text}
Visualizing the **spread** of a numeric variable(s) 
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
library(palmerpenguins)
library(tidyverse)
ggplot(penguins, aes(x = flipper_length_mm)) +
  geom_histogram() +
  labs(x = "Numeric variable",
       y = "Count") +
  theme(axis.title = element_text(size = 17)) 
```

---

## {#viz-dist data-menu-title="Visualizing distributions"} 

["Core" distribution chart types]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
library(palmerpenguins)
library(tidyverse)
library(ggridges)
library(ggbeeswarm)
```

:::: columns

::: {.column width="33%"}
::: {.center-text}
**Histograms**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, fill = species)) +
  geom_histogram(alpha = 0.5, position = "identity")
```
:::

::: {.column width="33%"}
::: {.center-text}
**Density plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, fill = species)) +
  geom_density(alpha = 0.5)
```
:::

::: {.column width="33%"}
::: {.center-text}
**Ridgeline plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  ggridges::geom_density_ridges(alpha = 0.5)
```
:::

::::

:::: columns

::: {.column width="50%"}
::: {.center-text}
**Box plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_boxplot(alpha = 0.5)
```
:::

::: {.column width="50%"}
::: {.center-text}
**Violin plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_violin(alpha = 0.5)
```
:::

::::

::: footnote
::: {.center-text}
[Examples show the distribution of penguin body masses (g) for Adelie, Chinstrap & Gentoo penguins.]{.body-text-s .gray-text} 
:::
:::

---

## {#mko-temps-intro data-menu-title="About the data"} 

[The data: bottom temperatures at Mohawk Reef]{.slide-title2}

<hr>

The [Santa Barbara Coastal Long Term Ecolgical Research (SBC LTER)](https://sbclter.msi.ucsb.edu/){target="_blank"} site was established in 2000 to understand the ecology of coastal kelp forest ecosystems. A number of coastal rocky reef sites are outfitted with instrumentation that collect long-term monitoring data. 

:::: columns

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
#| fig-alt: "A photo of kelp fronds rising towards the ocean's surface."
knitr::include_graphics("images/week2/sbc-logo2.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "The Santa Barbara Coastal Long Term Ecological Research site's logo. A creek running down from green mountains to coastal waters meets with ocean waves. Bull kelp floats beneath the surface of the ocean."
knitr::include_graphics("images/week2/sbc-kelp.png")
```
:::

::::

We'll be exploring **bottom temperatures recorded at Mohawk Reef**, a near-shore rocky reef and one of the Santa Barbara Coastal (SBC) LTER research sites.

---

## {#mko-temps-wrangling data-menu-title="Wrangle data"} 

[Data wrangling]{.slide-title}

<hr>

Data are imported directly from the [EDI Data Portal](https://portal.edirepository.org/nis/home.jsp). Explore the [metadata package](https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-sbc&identifier=2007) online to learn more about these data.

```{r}
#| eval: true
#| echo: true
#..........................load packages.........................
library(tidyverse)
library(chron)
library(naniar)

#..........................import data...........................
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")

#..........................wrangle data..........................
mko_clean <- mko |>

  # keep only necessary columns ----
  select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |>

  # create datetime column (not totally necessary for our plots, but it can be helpful to know how to do this!) ----
  unite(date, year, month, day, sep = "-", remove = FALSE) |>
  mutate(time = chron::times(decimal_time)) |>
  unite(date_time, date, time, sep = " ") |>

  # coerce data types (see https://www.neonscience.org/resources/learning-hub/tutorials/dc-convert-date-time-posix-r for overview of POSIXct vs POSIXlt) ----
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"), 
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>

  # add month name by indexing the built-in `month.name` vector ----
  mutate(month_name = as.factor(month.name[month])) |>

  # replace 9999s with NAs ----
  naniar::replace_with_na(replace = list(Temp_bot = 9999, 
                                         Temp_top = 9999, 
                                         Temp_mid = 9999)) |>

  # select/reorder desired columns ----
  select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)

#......................explore missing data......................

# counts and percentage of missing data by year ----
see_NAs <- mko_clean |> 
  group_by(year) |> 
  naniar::miss_var_summary() |>
  filter(variable == "Temp_bot")

# visualize missing Temp_bot ----
bottom <- mko_clean |> select(Temp_bot)
missing_temps <- naniar::vis_miss(bottom)
```

```{r}
# # created / saved for lecture 4.3 ----
# ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
#   ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
#   geom_vline(xintercept = mean(mko_clean$Temp_bot, na.rm = TRUE), linetype = "dashed") +
#   geom_vline(xintercept = 11, linetype = "dashed", color = "darkgray") +
#   geom_vline(xintercept = 16, linetype = "dashed", color = "darkgray") +
#   geom_vline(xintercept = 21, linetype = "dashed", color = "darkgray") +
#   scale_y_discrete(limits = rev(month.name)) +
#   scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A")) +
#   scale_x_continuous(breaks = seq(9, 26, by = 2)) +
#   labs(x = "Bottom Temperature (°C)",
#        title = "Bottom Temperatures at Mohawk Reef, Santa Barbara, CA",
#        subtitle = "Temperatures (°C) aggregated by month from 2005 - 2022") +
#   ggridges::theme_ridges(font_size = 13, grid = TRUE) +
#   theme(
#     plot.title.position = "plot",
#     plot.title = element_text(size = 30),
#     plot.subtitle = element_text(size = 25, margin = margin(t = 0, r = 0, b = 20, l = 0)),
#     axis.title.x = element_text(size = 23, margin = margin(t = 15, r = 0, b = 0, l = 0)),
#     axis.title.y = element_blank(),
#     axis.text = element_text(size = 20),
#     legend.position = "none",
#     panel.grid.major.x = element_blank()
#   )

# ggsave(filename = "mko_temps.png", plot = last_plot(), path = here::here("slides", "images", "week4"))
```

---

## {#hist-overview data-menu-title="Histogram overview"} 

[Histograms - `ggplot2::geom_histogram()`]{.slide-title2}

<hr>

[**What are they?**]{.teal-text} 

- Histograms are used to represent the **distribution of a *numeric* variable(s)**, which is **cut into several bins**. The number of observations per bin is represented by the height of the bar.

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable with lots of values
- meaningful differences between values

[**Important considerations:**]{.teal-text} 

- bin width (30 **bins** by default)
- too few / too many bins
:::

::: {.column width="50%"}
<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```
:::

::::

---

## {#hist-group-num data-menu-title="Histogram group number"} 

[Histograms - avoid plotting too many groups]{.slide-title2}

<hr>

Twelve groups (`month_name`) is too many groups -- especially when the range of temperature values for each of our groups largely overlap:
```{r}
#| eval: true
#| echo: true
#| out-width: "100%"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5)
```

---

## {#hist-updates data-menu-title="Histogram updates"} 

[Histograms - adjustments]{.slide-title}

<hr>

::: panel-tabset

## Small multiples

If you want to plot all groups, consider splitting them into small multiples. If so, does color add any valuable information? Remove if not:
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "5"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot)) +
  geom_histogram() +
  facet_wrap(~month_name)
```

## Fewer groups

Let's instead compare just three months: April (generally the coldest month), October (generally a hot month), June (somewhere in between):
```{r}
#| eval: true
#| echo: true
#| out-width: "40%"
#| code-line-numbers: "3"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) + # piping data into ggplot, so don't need to define `data` arg
  geom_histogram(position = "identity", alpha = 0.5)
```

## Adjust colors

Use `fill` to fill bars with a specified color(s) and `color` to outline bars with a specified color(s):
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "4-6"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) + 
  geom_histogram(position = "identity", alpha = 0.5,  color = "black") +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## Modify bin widths

[Modify `binwidth` (**30 `bins`** by default) -- does a bin width of 1 (degree Celsius) actually make sense? Consider scale of interest. Also be mindful when using `bins` -- too few bins will result in loss of distribution shape.]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "5"
#| fig-align: "center"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

:::

---

## {#density-overview data-menu-title="Density plot overview"} 

[Density plots - `ggplot2::geom_density()`]{.slide-title2}

<hr>

[**What are they?**]{.teal-text} 

- A smoothed version of a histogram. Density plots are representations of the **distribution of a *numeric* variable(s)**, which uses a [kernel density estimate](https://chemicalstatistician.wordpress.com/2013/06/09/exploratory-data-analysis-kernel-density-estimation-in-r-on-ozone-pollution-data-in-new-york-and-ozonopolis/) (KDE) to show the [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) of the variable. **The area under each curve is equal to 1.** *Use a density plot when you are most concerned with the shape of the distribution.*

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable with lots of values

[**Important considerations:**]{.teal-text} 

- useful when you want to visualize the shape of your data (not affected by bin number)
- does not indicate sample size
- can be misleading with small data sets
- band width, which affects level of smoothing
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "right"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```
:::

::::

::: {.footer}
Check out [this cool interactive tool](https://mathisonian.github.io/kde/), by [Matthew Conlen](https://mathisonian.com/), for a succinct and clear explanation of KDE.
:::

::: {.notes}
The PDF is used to specify the probability of the random variable falling within a particular range of values, as opposed to taking on any one value <https://en.wikipedia.org/wiki/Probability_density_function>
:::

---

## {#density-group-num data-menu-title="Density group number"} 

[Density plots - avoid plotting too many groups]{.slide-title2}

<hr>

Similar to the histogram, twelve groups (`month_name`) is too many groups! Consider small multiples (using `facet_wrap()`) if you want to keep all groups.
```{r}
#| eval: true
#| echo: true
#| out-width: "90%"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = factor(x = month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5)
```

---

## {#density-updates data-menu-title="Density plot updates"} 

[Density plots - adjustments]{.slide-title}

<hr>

::: panel-tabset

## Small multiples

If you want to plot all groups, consider splitting them into small multiples. If so, does color add any valuable information? Remove if not:
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "5"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot)) +
  geom_density(fill = "gray30") +
  facet_wrap(~month_name)
```

## Fewer groups

Let's instead compare three months: April (generally the coldest month), October (generally a hot month), June (somewhere in between):
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "1-2,5"
#| fig-align: "center"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5) + 
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## Modify band widths

Modify bandwidth by declaring a multiplier of the default bandwidth adjustment. Reducing the `adjust` argument reduces the amount of smoothing (default `adjust = 1`):
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "4"
#| fig-align: "center"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5, adjust = 1/2) + 
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

:::

---

## {#hist-vs-dens1 data-menu-title="Histogram vs. density"} 

[An important distinction]{.slide-title}

<hr>

**Histograms** show us the **counts** (frequency) of values in each range (bin), represented by the height of the bars. 

. . . 

**Density plots** show the **proportion** of values in each range (area under the curve equal 1; peaks indicate where more values are concentrated, but it does *not* tell us anything about the *the number* of observations). 

. . . 

<br>

We'll use some dummy data to demonstrate how this differs visually:

```{r}
#| eval: true
#| echo: true
dummy_data <- data.frame(value = c(rnorm(n = 100, mean = 5),
                                   rnorm(n = 200, mean = 10)),
                         group = rep(c("A", "B"),
                                     times = c(100, 200)))
```

Here, we have two groups (`A`, `B`) of values which are normally distributed, but with different means. Group `A` also has a smaller sample size (100) than group `B` (200).

---

## {#hist-vs-dens2 data-menu-title="Histogram vs. density"} 

[An important distinction]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

[It's easy to see that group `B` has a larger sample size than group `A` when looking at our histogram. Additionally, we can get a good sense of our data distribution. *But* what happens when you reduce the number of `bins` (e.g. set `bins = 4`)?]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(dummy_data, aes(x = value, fill = group)) +
  geom_histogram(position = "identity", alpha = 0.7) +
  geom_rug(aes(color = group), alpha = 0.75)
```
:::

::: {.column width="50%"}

[We lose information about sample size in our density plot (note that both curves are ~the same height, despite group `B` having 2x as many observations). However, they're great for visualizing the shape of our distributions since they are unaffected by the number of bins.]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(dummy_data, aes(x = value, fill = group)) +
  geom_density(alpha = 0.7) +
  geom_rug(aes(color = group), alpha = 0.75)
```
:::

::::

::: {.footer}
Rug plots added as an alternative way to visualize the data distribution and also as an indicator of sample size.
:::

::: {.notes}
In the histogram, group B has higher bars; difference in height disappears in density plot
:::

---

## {#density-hist-combo data-menu-title="Density / Histogram combo"} 

[Combining geoms - histogram & density plot]{.slide-title2}

<hr>

Overlaying a histogram and density plot requires scaling down the histogram to match the density curve scale. Adding `y = after_stat(density)` within the `aes()` function rescales the histogram counts so that bar areas integrate to 1:
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = after_stat(density))) + # scale down hist to match density curve
  geom_histogram(fill = "gray", color = "black", alpha = 0.75) +
  geom_density(size = 1) 
```

::: {.footer}
Check out this [great blog post](https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1/) on the `after_stat()` function, by [June Choe](https://yjunechoe.github.io/index.html)
:::

::: notes
See <https://stackoverflow.com/questions/46734555/ggplot2-histogram-why-do-y-density-and-stat-density-differ>
:::

---

## {#scaled-density data-menu-title="Scaled density"} 

[Scaled density plots for comparing groups to a whole]{.slide-title3}

<hr>

[In a normal density plot, the area under the curve(s) is equal to 1. **In a scaled density plot, the area under the curve reflects the number of observations for each group.**]{.body-text-s}

[We can use scaled density plots to compare individual group distributions to the total distribution. We'll do so using the `palmerpenguins::penguins` data set.]{.body-text-s}

```{r}
#| eval: true
#| echo: false
library(palmerpenguins)
```

```{r}
#| eval: true
#| echo: true
#| out-width: "100%"
#| output-location: column
# use `after_stat(count)` to plot density of observations ----
ggplot(penguins, aes(x = body_mass_g, y = after_stat(count))) +
 
  # plot full distribution curve with label "all penguins"; remove 'species' col so that this doesn't get faceted later on ----
  geom_density(data = select(penguins, -species), 
               aes(fill = "all penguins"), color = "transparent") +
  
  # plot second curve with label "species" ----
  geom_density(aes(fill = "species"), color = "transparent") +
  
  # facet wrap by species ----
  facet_wrap(~species, nrow = 1) +
  
  # update colors, x-axis label, legend position ----
  scale_fill_manual(values = c("grey","#0C8346"), name = NULL) +
  labs(x = "Body Mass (g)") +
  theme(legend.position = "top")
```

```{r}
#| eval: false
#| echo: false

# # try with dummy data ----
# ggplot(dummy_data, aes(x = value)) +
#   geom_density()
# 
# ggplot(dummy_data, aes(x = value, y = after_stat(count))) +
#   geom_density(data = select(dummy_data, -group), 
#                aes(fill = "all groups"), color = "transparent") +
#   geom_density(aes(fill = "group"), color = "transparent") +
#   facet_wrap(~group) +
#   scale_fill_manual(values = c("grey","#7C1B54"), name = NULL) +
#   labs(x = "Value") +
#   theme(legend.position = "top")
# 
# 
# # use `after_stat(count)` to plot density of observations (a helpful blog post: <https://datawookie.dev/blog/2022/10/scaling-density-plots/> ----
# # shape of curves remain the same as in a normal density plot, but area under curve represents the # samples of each group & height of curve represents the density of penguins in the sample (in penguins per g)
# ggplot(penguins, aes(x = body_mass_g, y = after_stat(count))) +
#  
# # plot full distribution ----
#   geom_density(data = select(penguins, -species), 
#                 aes(fill = "all penguins"), color = "transparent") +
#   
#   # plot individual spp distributions ----
#   geom_density(aes(fill = "species"), color = "transparent") +
#   
#   # facet wrap by spp ----
#   facet_wrap(~species, nrow = 1) +
#   
#   # update colors, x-axis label, legend position ----
#   scale_fill_manual(values = c("grey","#0C8346"), name = NULL) +
#   labs(x = "Body Mass (g)") +
#   theme(legend.position = "top")
```

::: {.footer}
Example adapted from [Meghan Hall](https://meghan.rbind.io/)'s CMU 36-315 [Lecture 7](https://cmu-36315.netlify.app/slides/36-315_summer2021_lec7#75). For more on scaled density plots, check out [this post](https://datawookie.dev/blog/2022/10/scaling-density-plots/), by [Andrew Collier](https://github.com/datawookie).
:::

---

## {#ridgeline-overview data-menu-title="Ridgeline plot overview"} 

[Ridgeline plots - `{ggridges}`]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- Ridgeline plots show the **distribution of a *numeric* variable** for **multiple groups**.

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable with lots of values

[**Important considerations:**]{.teal-text} 

- work best when you have > 6 groups
- works well when there is a clear pattern in the result (e.g. if there is an obvious ranking in groups) and / or when visualizing changes in distributions over time or space
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
  scale_y_discrete(limits = rev(month.name)) +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```
:::

::::

---

## {#ridgeline-groups data-menu-title="Ridgeline plot group number"} 

[Ridgeline plots - good for multiple groups]{.slide-title}

<hr>

The [`{ggridges}` package](https://wilkelab.org/ggridges/) has a number of different geoms for creating ridgeline plots that work well for data sets with larger group numbers (e.g. months). Two great geoms to explore (to start):

:::: columns

::: {.column width="50%"}
[`geom_density_ridges()` to create a basic ridgeline plot:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = month_name)) +
  ggridges::geom_density_ridges()
```
:::

::: {.column width="50%"}
[`geom_density_ridges_gradient()` to fill with a color gradient:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient() +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```
:::

::::

---

## {#ridgeline-adjustments data-menu-title="Ridgeline plot adjustments"} 

[Ridgeline plots - adjustments]{.slide-title}

<hr>

::: panel-tabset

## Group order 

:::: columns

::: {.column width="50%"}
[Order by month (ideal, since months have an inherent order):]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "3"
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient() +
  scale_y_discrete(limits = rev(month.name)) +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```
:::

::: {.column width="50%"}
[Order by mean or median (makes more sense when you have unordered groups):]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "1-2"
#| fig-align: "center"
mko_clean |> 
  mutate(month_name = fct_reorder(month_name, Temp_bot, .fun = mean)) |> 
  ggplot(mko_clean, mapping = aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient() +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```
:::

::::

## Overlap & tails

`rel_min_height` adjusts trailing tails and `scale` controls the extent to which the different densities overlap)
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2"
#| out-width: "50%"
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
  scale_y_discrete(limits = rev(month.name)) +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```

## Quantiles

Include a median line by using the `stat_density_ridges()` geom and setting the number of `quantiles` to `2`:
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "3"
#| out-width: "50%"
#| fig-align: "center"
ggplot(mko_clean, aes(x = Temp_bot, y = month_name)) +
  ggridges::stat_density_ridges(rel_min_height = 0.01, scale = 3,
                                quantile_lines = TRUE, quantiles = 2) +
  scale_y_discrete(limits = rev(month.name))
```

## Jitter raw data

Visualize the raw data underlying the density ridges (since our temperature data is too large (>473,000 rows), so we'll use the `palmerpenguins::penguins` data set to demo):

```{r}
#| eval: true
#| echo: false
library(palmerpenguins)
```

:::: columns

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Jittered points
:::

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2-3"
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species)) +
  ggridges::geom_density_ridges(jittered_points = TRUE, 
                                alpha = 0.5, point_size = 0.5)
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Raincloud plot:
:::

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2-4"
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species)) +
  ggridges::geom_density_ridges(jittered_points = TRUE, alpha = 0.5, 
                                point_size = 0.5, scale = 0.6,
                                position = "raincloud")
```
:::

::::

:::

---

## {#boxplot-overview data-menu-title="Box plot overview"} 

[Box plots - `ggplot2::geom_boxplot()`]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- [Box plots **summarize the distribution of a numeric variable for one or several groups**.]{.body-text-s}

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable, often with multiple groups

[**Important considerations:**]{.teal-text} 

- box plots *summarize* data, meaning we can't see the underlying shape of the distribution or sample size
- add jittered points on top, or if large sample size, consider a violin plot
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week2/boxplot.png")
```

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```
:::

::::

---

## {#boxplot-groups data-menu-title="Box plot group number"} 

[Box plots - good for multiple groups]{.slide-title}

<hr>

Box plots are great for a few to multiple groups (too many boxes just results in a lot of information to synthesize, as a viewer). If your x-axis text is long, consider flipping your axes to make them less crunched:
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| fig-align: "center"
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```

---

## {#boxplot-adjustments data-menu-title="Box plot adjustments"} 

[Box plots - adjustments]{.slide-title}

<hr>

::: panel-tabset

## Outliers

[You can modify outlier aesthetics inside `geom_boxplot()`:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2"
#| out-width: "55%"
#| fig-align: "center"
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot(outlier.color = "purple", outlier.shape = "circle open", outlier.size = 5) +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```

## Highlight a group(s)

[Highlight a group of interest -- one easy way to do so is by using the [`{gghighlight}` package](https://yutannihilation.github.io/gghighlight/index.html). Here, we specify a specific month (`"October"`) to highlight:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5,7"
#| out-width: "40%"
#| fig-align: "center"
mko_clean |> 
  ggplot(aes(x = month_name, y = Temp_bot, fill = month_name)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) +
  gghighlight::gghighlight(month_name == "October") +
  coord_flip() +
  theme(legend.position = "none")
```

## Jitter raw data

Since box plots hide sample size, consider overlaying raw data points using `geom_jitter()` (since our temperature data is too large (>473,000 rows), we’ll use the `palmerpenguins::penguins` data set to demo):

[NOTE: Be sure to remove outliers, since plotting raw data will result in those data points being a second time:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2-3"
#| out-width: "40%"
#| fig-align: "center"
ggplot(na.omit(penguins), aes(x = species, y = body_mass_g)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.5, width = 0.2) +
  coord_flip()
```

## Dodged groups

[You may have data where you want to include an additional grouping variable -- for example, let's say we want to plot penguin body masses by species *and* year. We'll need to at least `dodge` our overlaid points so that they sit on top of the correct box. Preferably, we both `jitter` *and* `dodge` our points:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| out-width: "40%"
#| fig-align: "center"
penguins |> 
  mutate(year = as.factor(year)) |> 
  ggplot(aes(x = species, y = body_mass_g, color = year)) +
  geom_boxplot(outlier.shape = NA) +
  geom_point(alpha = 0.5, position = position_jitterdodge(jitter.width = 0.2)) +
  coord_flip()
```


## Overlay beeswarm

[Similar to overlaying the raw jittered data points, we can combine our box plot with a **beeswarm plot** using `{ggbeeswarm}`. Beeswarm plots visualize the density of data at each point, as well as arrange points that would normally overlap so that they fall next to one another instead. Consider using a standalone beeswarm plot here as well! We'll again use the `palmerpenguins::penguins` data set to demo:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2-3"
#| out-width: "40%"
#| fig-align: "center"
ggplot(na.omit(penguins), aes(x = species, y = body_mass_g)) +
  geom_boxplot(outlier.shape = NA) +
  ggbeeswarm::geom_beeswarm(size = 1) +
  coord_flip()
```

:::

---

## {#violin-plot-overview data-menu-title="Violin plot overview"} 

[Violin plots - `ggplot2::geom_violin()`]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- [Violin plots visualize the **distribution of a numeric variable for one or several groups**, where the shape of the violin represents the density estimate of the variable (i.e. the more data points in a specific range, the larger the violin is for that range). They provide more information about the underlying distribution than a box plot.]{.body-text-s}

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable, often with multiple groups

[**Important considerations:**]{.teal-text}   

- ordering groups by median value can make it easier to understand  
- show sample size when comparing groups with very different distributions (e.g. half violin plot) 
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_violin() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```
:::

::::

---

## {#violin-plot-groups data-menu-title="Violin plot group number"} 

[Violin plots - good for multiple groups with lots of data]{.slide-title3}

<hr>

Violin plots are great for a few to multiple groups, and are often a better choice than box plots when you have a very large data set (and overlaying jittered points looks busy or downright unreasonable). If your x-axis text is long, consider flipping your axes to make them less crunched:

```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| fig-align: "center"
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_violin() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```

---

## {#box-violin-combo data-menu-title="Violin & box plot combo"} 

[Combining geoms - adjustments]{.slide-title}

<hr>

::: {.panel-tabset}

## Overlay boxplot

Overlaying a box plot inside a violin plot can be helpful in providing your audience with summary stats in a compact form:
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "3-4"
#| fig-align: "center"
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_violin() +
  geom_boxplot(width = 0.1, color = "gray", alpha = 0.5, 
               outlier.color = "red") +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```

## Half-violin half-dot plot

[The [`{see}` package](https://easystats.github.io/see/) provides `geom_violindot()`, which is useful for simultaneously visualizing distribution and sample size. Because it can quickly get overcrowded with large sample sizes (like `Temp_bot`), we'll use `palmerpenguins::penguins` to demo here:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| fig-align: "center"
ggplot(penguins, aes(x = species, y = bill_length_mm, fill = species)) +
  see::geom_violindot(size_dots = 5, alpha = 0.5) +
  theme(legend.position = "none")
```

:::

<!-- --- -->

<!-- ## {#going-further data-menu-title="Going further"}  -->

<!-- [Check out the `{ggdist}` package!]{.slide-title} -->

<!-- <hr> -->

<!-- The [`{ggdist}` package](https://mjskay.github.io/ggdist/) provides some additional geoms and stats for visualizing distributions and uncertainty. Check it out! -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: false -->
<!-- #| fig-align: "center" -->
<!-- #| out-width: "100%" -->
<!-- knitr::include_graphics("images/week2/ggdist.png") -->
<!-- ``` -->

---

##  {#end-break data-menu-title="# End / Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ This is the end of Lesson 2 (of 3) ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

