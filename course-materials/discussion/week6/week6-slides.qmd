---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../../../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#047C91"} 

[EDS 240: Discussion 6]{.custom-title}

[*Saving plots*]{.custom-subtitle}

<hr class="hr-dark-blue">

[Week 6 | February 11^th^, 2025]{.custom-subtitle3}

---

## {#left-off-qmd data-menu-title="Where we left off"}

[Where we left off . . .]{.slide-title}

<hr>

We iterated on our salary plot by updating colors, theme elements, and most notably, our fonts. It rendered nicely in our Quarto doc, with the help of a couple code chunk options to set the size (`out-width: "100%"`) and aspect ratio (`fig-asp: 1`):

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/set-chunk-options.png")
```

---

## {#left-off-png data-menu-title="Where we left off"}

[Where we left off . . .]{.slide-title}

<hr>

However, when we tried saving our plot as a PNG file using `ggsave()`, we got something that looked quite different:

:::: {.columns}

::: {.column width="50%"}
<br>
```{r}
#| eval: false 
#| echo: true
ggsave(
  filename = here::here("week6", "images", "final-plot.png"),
  plot = final_plot, 
  device = "png",
  width = 8, 
  height = 7,
  unit = "in"
)
```
:::

::: {.column width="50%"}
```{r}
#| eval: true 
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/0-needs-improvment-8x7.png")
```
:::

::::

<!-- ::: {.center-text} -->
<!-- To understand why this happens and how to fix this, we first need to understand a bit about image size and resolution. -->
<!-- ::: -->

---

## {#scaling-challenges data-menu-title="Scaling challenges"}

[Text scaling can be challenging]{.slide-title}

<hr>

<br>

[There are a number of reasons why, but two big ones:]{.body-text-m} 

<br>

. . .

::: {.incremental .body-text-m}
1. **resolution differences** between devices (e.g. the on-screen device vs. file device)
2. **absolute vs. relative sizing** of elements
  <!-- - `{ggplot2}` theme elements (e.g. text sizes) -->
  <!-- - `{ggtext}` `element_textbox()` lacks native support for relative sizing (so fixed heights/widths) -->
:::

<br>

. . . 

::: {.center-text .body-text-m}
**NOTE:** Your computer's screen resolution may be different than mine. If you're plot doesn't appear exactly as mine does (either when plotted on-screen, or saved as a file), this might be why! You may need to tweak some sizes so that your plot looks as it should.
:::

---

##  {#resolution-differences data-menu-title="# Resolution Differences #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Issue #1: resolution differences between devices</p>
</div>

---

## {#definitions data-menu-title="Definitions"}

[Some definitions first]{.slide-title}

<hr>

Digital image size is described in **pixel (px) dimensions** (e.g. 2400 x 2100 px). A pixel is a basic (and smallest) unit of programmable color on a computer display. To calculate pixel dimensions, we need to know:

- the **width** of the image (e.g. **8 inches** -- we've defined this is `ggsave()`)
- the **height** of the image (e.g. **7 inches** -- we've also defined this is `ggsave()`)
- the **resolution** of the image (in pixels per inch, e.g. **300 PPI**)

::: {.center-text}
**pixel dimensions** = $(8"W \times 300\:PPI) \times (7"H \times 300\:PPI) = 2400 \times 2100\:px$
:::

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/pixels.png")
```

::: {.footer}
Image source: [What are 'Image Size' and 'Resolution'?](https://twinbru.zendesk.com/hc/en-nz/articles/4403275762708-What-are-Image-Size-and-Resolution){target="_blank"}
:::

---

## {#dpi data-menu-title="DPI"}

[For us, PPI == DPI]{.slide-title}

<hr>

Printed image resolution is represented as dots per inch (DPI), which refers to the literal printed dots of ink per inch. While PPI and DPI are technically different, they are often used interchangeably and the conversion is generally taken as 1 PPI : 1 DPI. **We will use PPI and DPI interchangeably.**

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/dpi.png")
```

::: {.footer}
Image source: [What is DPI?](https://www.printplace.com/blog/what-is-dpi/){target="_blank"}
:::

---

## {#different-dpi data-menu-title="Different DPI"}

[Make sure `{showtext}` and `ggsave()` DPIs match]{.slide-title2}

<hr>

By default, `{showtext}` uses a resolution of 96 DPI when rendering our plot on screen, while `ggsave()` uses a default resolution of 300 DPI to write our plot to file. This mismatch is one major cause of inconsistent font renderings across different devices. Ensure that these match:

. . . 

1. **Set the `{showtext}` DPI** (best to do this at the top of your script):

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "3"
#................enable {showtext} for rendering.................
showtext_auto()
showtext_opts(dpi = 300)
```

. . . 

2. (Optional) **Set the DPI in `ggsave()`** (300 is the default, so this step is optional):

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "8"
ggsave(
  filename = here::here("week6", "images", "salary-plot-8x7.png"),
  plot = updated_plot,
  device = "png",
  width = 8,
  height = 7,
  unit = "in",
  dpi = 300
)
```

::: {.footer}
An image is generally considered "high-resolution" if it has 300+ PPI. The [conversion of PPI to DPI is usually 1:1](https://www.adobe.com/uk/creativecloud/photography/discover/dots-per-inch-dpi-resolution.html#:~:text=The%20conversion%20of%20PPI%20to%20DPI%20is%20usually%201%3A1.){target="_blank"}, we'll set a DPI of 300 for both `{showtext}` and `ggsave()`.
:::

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/1-DPI300.png")
```

::: {.center-text .body-text-m}
That largely took care of our font sizing issue! But our `{ggtext}` elements look super wonky...
:::

---

##  {#absolute-relative-sizes data-menu-title="# Absolute vs. relative sizes #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Issue #2: absolute vs relative sizes of elements</p>
</div>

---

## {#ggtext-absolute-units data-menu-title="{ggtext} absolute uits"}

[`{ggtext}` elements rely on absolute units]{.slide-title}

<hr>

`{ggtext}` deals in absolute units (e.g. in, cm), which means elements (e.g. `element_textbox()`) don't scale dynamically with plot size. Let's temporarily `fill` our `element_textbox()`es with color to help visualize this:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "14,19"
updated_plot <- plot +
  labs(title = "Males earn more than females across most occupations",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 18),
    plot.subtitle = ggtext::element_textbox(family = "sen",
                                            size = 11.5,
                                            color = earnings_pal["light_text"],
                                            fill = "lightblue", # for debugging 
                                            margin = margin(t = 2, r = 0, b = 6, l = 0)),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           fill = "lightblue", # for debugging
                                           halign = 1, 
                                           lineheight = 1.5,
                                           margin = margin(t = 15, r = 0, b = 0, l = 0)),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 10,
                                hjust = 0),
    panel.spacing.y = unit(0.5, "cm"),
    axis.text = element_text(family = "sen",
                             size = 9,
                             color = earnings_pal["light_text"]),
    axis.title = element_blank()
  )

updated_plot
```

<!-- --- -->

<!-- ## {#debug-ggtext data-menu-title="Debug {ggtext}"} -->

<!-- [Debug with `fill` color]{.slide-title} -->

<!-- <hr> -->

<!-- Recall that `ggtext::element_textbox()` enables Markdown text **in a box** with word wrap. Let's temporarily fill this box with color, then save using `ggsave()` to see its exact size: -->

<!-- When we write our plot to file in different sizes, our `element_textbox()`es remain the same size -->
<!-- element_textbox() allows you to set padding, margin, and alignment within the text box, often in absolute units. These settings are helpful for positioning but donâ€™t dynamically resize with plot dimensions. -->
<!-- Consequently, when the plot size changes, the internal padding and margins do not adjust proportionally, which can make the text box appear "off" relative to the new plot size. -->
<!-- This limitation results in element_textbox() keeping a fixed size that does not adapt to the relative scaling used for other plot elements. -->

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/2-fill.png")
```

::: {.center-text .body-text-m}
Our text wraps onto itself because these `element_textbox()`es don't scale to the size of our plot, when written to a PNG file.
:::

---

## {#textbox-width data-menu-title="Increase textbox width"}

[Let's try increasing our textbox `width`]{.slide-title}

<hr>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "15,23"
updated_plot <- plot +
  labs(title = "Males earn more than females across most occupations",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 18),
    plot.subtitle = ggtext::element_textbox(family = "sen",
                                            size = 11.5,
                                            color = earnings_pal["light_text"],
                                            fill = "lightblue", # for debugging 
                                            width = unit(25, "cm"),
                                            margin = margin(t = 2, r = 0, b = 6, l = 0)),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           fill = "lightblue", # for debugging
                                           halign = 1, 
                                           lineheight = 1.5,
                                           width = unit(25, "cm"),
                                           margin = margin(t = 15, r = 0, b = 0, l = 0)),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 10,
                                hjust = 0),
    panel.spacing.y = unit(0.5, "cm"),
    axis.text = element_text(family = "sen",
                             size = 9,
                             color = earnings_pal["light_text"]),
    axis.title = element_blank()
  )

updated_plot
```

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/3-fill-wide.png")
```

::: {.center-text .body-text-m}
We successfully increased the width of our two textboxes, but they appear quite narrow and our text still isn't expanded correctly.
:::

---

## {#padding data-menu-title="Increase textbox padding"}

[Next, let's increase textbox `padding`]{.slide-title}

<hr>

While `margin` sets the space *around* a textbox, `padding` sets the space around the text *inside* a textbox. Let's increase the padding around the top and bottom of our subtitle and caption:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "17,26"
updated_plot <- plot +
  labs(title = "Males earn more than females across most occupations",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 18),
    plot.subtitle = ggtext::element_textbox(family = "sen",
                                            size = 11.5,
                                            color = earnings_pal["light_text"],
                                            fill = "lightblue", # for debugging 
                                            width = unit(25, "cm"),
                                            margin = margin(t = 2, r = 0, b = 6, l = 0),
                                            padding = margin(t = 5, r = 0, b = 5, l = 0)),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           fill = "lightblue", # for debugging
                                           halign = 1, 
                                           lineheight = 1.5,
                                           width = unit(25, "cm"),
                                           margin = margin(t = 15, r = 0, b = 0, l = 0),
                                           padding = margin(t = 10, r = 0, b = 10, l = 0)),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 10,
                                hjust = 0),
    panel.spacing.y = unit(0.5, "cm"),
    axis.text = element_text(family = "sen",
                             size = 9,
                             color = earnings_pal["light_text"]),
    axis.title = element_blank()
  )

updated_plot
```

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/4-padding.png")
```

::: {.center-text .body-text-m}
Yay! Looking good. We can now comment out (or remove) `fill = "lightblue"` from both our `ggtext::element_textbox()`es.
:::

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/5-remove-fill.png")
```

::: {.center-text .body-text-m}
Our final saved PNG (8 x 7", 300 DPI)!
:::

---

## {#14x12 data-menu-title="14x12"}

[Now let's try saving a 14x12" plot]{.slide-title}

<hr>

```{r}
#| eval: false
#| echo: true
ggsave(
  filename = here::here("week6", "images", "salary-plot-14x12.png"),
  plot = updated_plot,
  device = "png",
  width = 14,
  height = 12,
  unit = "in",
  dpi = 300
)
```

<br>
<br>
<br>
<br>
<br>
<br>

::: {.center-text .body-text-m}
What happens?
:::

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/0-made-larger-14x12.png")
```

::: {.center-text .body-text-m}
Our text shrunk again {{< fa face-frown title="a frowning face" >}}
:::

---

## {#absolute-text-sizes data-menu-title="Absolute text sizes"}

[We've set absolute text sizes]{.slide-title}

<hr>

We've built our plot using absolute text sizes (where unit = "pt" = 0.33mm), which means our text sizes remain constant regardless of plot resizing (this is the case with any element defined in absolute units).

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "10,12,29,33"
updated_plot <- plot +
  labs(title = "Males earn more than females across most occupations",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 18),
    plot.subtitle = ggtext::element_textbox(family = "sen",
                                            size = 11.5,
                                            color = earnings_pal["light_text"],
                                            # fill = "lightblue", # for debugging 
                                            width = unit(25, "cm"),
                                            margin = margin(t = 2, r = 0, b = 6, l = 0),
                                            padding = margin(t = 5, r = 0, b = 5, l = 0)),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           # fill = "lightblue", # for debugging
                                           halign = 1, 
                                           lineheight = 1.5,
                                           width = unit(25, "cm"),
                                           margin = margin(t = 15, r = 0, b = 0, l = 0),
                                           padding = margin(t = 10, r = 0, b = 10, l = 0)),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 10,
                                hjust = 0),
    panel.spacing.y = unit(0.5, "cm"),
    axis.text = element_text(family = "sen",
                             size = 9,
                             color = earnings_pal["light_text"]),
    axis.title = element_blank()
  )

updated_plot
```

---

## {#relative-text-sizes data-menu-title="Relative text sizes"}

[Instead, we can set relative text sizes]{.slide-title}

<hr>

By setting `size = rel(value)`, our text size will scale relative to the `base_size`, which by default is 11. We can also update the default `base_size` inside `theme_minimal()` (or whichever complete theme you're using). 

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5,10,12,29,33"
updated_plot <- plot +
  labs(title = "Males earn more than females across most occupations",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal(base_size = 18) +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = rel(1.7)),
    plot.subtitle = ggtext::element_textbox(family = "sen",
                                            size = rel(1.1),
                                            color = earnings_pal["light_text"],
                                            # fill = "lightblue", # for debugging 
                                            width = unit(25, "cm"),
                                            margin = margin(t = 2, r = 0, b = 6, l = 0),
                                            padding = margin(t = 5, r = 0, b = 5, l = 0)),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           # fill = "lightblue", # for debugging
                                           halign = 1, 
                                           lineheight = 1.5,
                                           width = unit(25, "cm"),
                                           margin = margin(t = 15, r = 0, b = 0, l = 0),
                                           padding = margin(t = 10, r = 0, b = 10, l = 0)),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = rel(1.1),
                                hjust = 0),
    panel.spacing.y = unit(0.5, "cm"),
    axis.text = element_text(family = "sen",
                             size = rel(0.8),
                             color = earnings_pal["light_text"]),
    axis.title = element_blank()
  )

updated_plot
```

::: {.center-text .body-text-m}

:::

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/1-relative-14x12.png")
```

::: {.center-text .body-text-m}
Our final saved PNG (14 x 12", 300 DPI)!
:::

---

## {#5x5 data-menu-title="5x5"}

[One final exercise -- save as 5x5" PNG]{.slide-title}

<hr>

```{r}
#| eval: false
#| echo: true
ggsave(
  filename = here::here("week6", "images", "salary-plot-5x5.png"),
  plot = updated_plot,
  device = "png",
  width = 5,
  height = 5,
  unit = "in",
  dpi = 300
)
```

<br>
<br>
<br>
<br>
<br>
<br>

::: {.center-text .body-text-m}
What happens?
:::

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/0-5x5.png")
```

::: {.center-text .body-text-m}
Noooo not again {{< fa face-sad-cry title="a crying face" >}}
:::

---

## {#adjust-basesize data-menu-title="Adjust basesize"}

[Just adjust `basesize`!]{.slide-title}

<hr>

This can take a little trial and error, but adjusting your text `basesize` (in this case, you'll want to make it smaller) should do the trick -- all relative text sizes will scale accordingly.

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
updated_plot <- plot +
  labs(title = "Males earn more than females across most occupations",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal(base_size = 7) +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = rel(1.7)),
    plot.subtitle = ggtext::element_textbox(family = "sen",
                                            size = rel(1.1),
                                            color = earnings_pal["light_text"],
                                            # fill = "lightblue", # for debugging 
                                            width = unit(25, "cm"),
                                            margin = margin(t = 2, r = 0, b = 6, l = 0),
                                            padding = margin(t = 5, r = 0, b = 5, l = 0)),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           # fill = "lightblue", # for debugging
                                           halign = 1, 
                                           lineheight = 1.5,
                                           width = unit(25, "cm"),
                                           margin = margin(t = 15, r = 0, b = 0, l = 0),
                                           padding = margin(t = 10, r = 0, b = 10, l = 0)),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = rel(1.1),
                                hjust = 0),
    panel.spacing.y = unit(0.5, "cm"),
    axis.text = element_text(family = "sen",
                             size = rel(0.8),
                             color = earnings_pal["light_text"]),
    axis.title = element_blank()
  )

updated_plot
```

---

```{r}
#| eval: true 
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/1-5x5-basesize7.png")
```

::: {.center-text .body-text-m}
{{< fa face-laugh-beam title="a very happy face" >}} Note that we might consider adjusting our margins (e.g. between title and subtitle, between plot and caption), panel spacing, and point size which are defined in absolute units.
:::

::: {.footer}
Margins use `unit = "pt"` = 0.35mm by default
:::

---

## {#summary data-menu-title="Summary"}

[To summarize:]{.slide-title}

<hr>

. . . 

1. **Make sure the resolution used by `{showtext}` for text rendering matches the resolution used by `ggsave()` for saving your plot**
    - `showtext_opts(dpi = 300)` 
    - `ggsave(dpi = 300)`
    - 300 DPI is generally recommended

<br>

. . . 

2. **Use relative text sizes wherever possible**
    - set a `basesize` in your complete theme
    - use `rel()` to set relative text sizes

<br>

. . . 

3. **Make absolute size adjustments as necessary** 
    - e.g. to `{ggtext}` elements, margins, panel spacing, point sizes, etc.

<!-- --- -->

<!-- ## {#additional-resources data-menu-title="Additional resources"} -->

<!-- [Additional resources:]{.slide-title} -->

<!-- <hr> -->

<!-- - **[showtext: Using System Fonts in R Graphics](https://rjournal.github.io/articles/RJ-2015-008/)**, by Yixuan Qiu (an older article, but provides helpful context) -->
<!-- - **[Understanding text size and resolution in ggplot2](https://www.christophenicault.com/post/understand_size_dimension_ggplot2/){target="_blank"}**, by Christophe Nicault -->
<!-- - **[Taking Control of Plot Scaling](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/)**, by Thomas Lin Pedersen -->

