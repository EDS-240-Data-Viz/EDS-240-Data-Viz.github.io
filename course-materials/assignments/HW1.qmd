---
title: "Assignment #1 (HW #1)"
subtitle: "Assigned Mon 01/06/2025 | Due Sat 01/18/2025"
editor_options: 
  chunk_output_type: console
---

::: {.callout-important}
## You must earn a "Satisfactory" mark for each individual Part (I and II) to earn a "Satisfactory" mark for Assignment #1.

**NOTE:** Assignments are to be submitted via GitHub Classrooms, unless otherwise noted. Each student receives one "free pass" for not submitting assignments via specified channels, after which you will receive a "Not Yet" mark.

**Read each part of the assignment carefully**, and use the check boxes to ensure you've addressed all elements of the assignment!
:::


# [Part I: Annotating `{ggplot2}` code]{.pink-text}

## Learning Outcomes 

- read code written by others 
- assess, critique, and provide constructive feedback on data visualizations

## Description 

Much of your time as a data scientist will be spent looking at code written by others -- maybe you're trying to learn from and adapt someone else's code for your own work, or perhaps you've been asked to conduct a code review for a colleague. Being able to look at and make sense of code that you did not write yourself is an invaluable skill and an important one to practice throughout your learning journey. Here, you'll be asked to interpret and annotate `{ggplot2}` code written by someone else. This will likely require running code (both as a whole *and* line-by-line), as well as Googling and / or reading documentation.

*I recognize that there is (likely) **a lot** of new code presented here that we haven't covered yet in this course. This is intentionally an exercise is resourcefulness! By the end of this exercise, you should feel a bit more confident in your ability to interpret (and maybe even reuse!) code written by others.*

### 1a. Annotate code

Annotate the following code, adapted from [David Oehm](https://gradientdescending.com/#google_vignette){target="_blank"}'s visualization titled, ***UFO Sightings*** ([original code](https://github.com/doehm/tidytues/blob/main/scripts/2023/week-25-ufo/ufo.R){target="_blank"}). You can find metadata and additional information about the data set on the [rfordatascience/tidytuesday (2023-06-20) `readme.md`](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-06-20/readme.md#data-dictionary){target="_blank"}.

::: {.callout-tip}
## But why a data viz about UFOs...
For your final class project (HW #4), you'll have the option to build your own infographic-style visualization. Many students from Winter 2024 noted this UFO sightings example as particularly helpful in learning how to stitch together multiple data visualizations into one cohesive infographic.
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
knitr::include_graphics("images/oehm-ufo.png")
```

::: {.center-text .body-text-s .gray-text}
*To enlarge image (in Chrome), **right-click on image** > **Open Image in New Tab***
:::

::: {.callout-tip collapse="true" icon="false"}
## Click here to expand the code AND for tips on getting started

**Note:** A select few lines of code have already been annotated for you.

```{r}
#| eval: false
#| echo: true

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                  1. setup                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse) # for data wrangling & plotting ----
library(showtext) # ANNOTATE (brief explanation of pkg) ----
library(patchwork) # ANNOTATE (brief explanation of pkg) ----
library(janitor) # ANNOTATE (brief explanation of pkg) ----
library(glue) # ANNOTATE (brief explanation of pkg) ----
library(ggtext) # ANNOTATE (brief explanation of pkg) ----
library(geofacet) # ANNOTATE (brief explanation of pkg) ----
library(cropcircles) # ANNOTATE (brief explanation of pkg) ----
library(ggpath) # ANNOTATE (brief explanation of pkg) ----
library(magick) # ANNOTATE (brief explanation of pkg) ----
library(readr) # ANNOTATE (brief explanation of pkg) ----
library(scales) # ANNOTATE (brief explanation of pkg) ----

#................load TidyTuesday data from GitHub...............
tuesdata <- tidytuesdayR::tt_load(2023, week = 25)

#........extract individual data sets from tuesdata (list).......
ufo_sightings <- tuesdata$ufo_sightings
places <- tuesdata$places

#......................create color palettes.....................
alien <- c('#47fcea', '#28ee85', '#17bd52', '#679d76', '#3e6f50', '#27593d')
bg <- '#101319' 
txt <- alien[2]
accent <- txt

#......................import Google fonts.......................
# ANNOTATE (explain differences between arguments `name` & `family`) ----
font_add_google(name = "Orbitron", family = "orb")
font_add_google(name = "Barlow", family = "bar")

#....................import FontAwesome fonts....................
font_add(family = "fa-brands", regular = here::here("assets", "fonts", "Font Awesome 6 Brands-Regular-400.otf"))
font_add(family = "fa-solid", regular = here::here("assets", "fonts", "Font Awesome 6 Free-Solid-900.otf"))

#........use {showtext} to render text for future devices........
showtext_auto(enable = TRUE)

# TODO 
# create_image(prompt = "An alien head, facing me, with dark shadows across it's face.")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              2. data wrangling                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# create a df of total population by US state # ANNOTATE (brief explanation of what this entire code chunk does) ----
df_pop <- places |>
  filter(country_code == "US") |>
  group_by(state) |>
  summarise(pop = sum(population)) |>
  ungroup()

# ANNOTATE (brief explanation of what this entire code chunk does) ----
df_us <- ufo_sightings |>
  filter(country_code == "US") |>
  count(state) |>
  left_join(df_pop, by = "state") |>
  mutate(
    r = n/pop*10000,
    x = rescale(r, to = c(0.2, 1)),
    #x = min_max(r, 0.2, 1),
    xmin = (1-x)/2,
    xmax = x + (1-x)/2,
    alpha = r/max(r)
    )

# ANNOTATE (brief explanation of what this entire code chunk does) ----
df_shape <- ufo_sightings |>
  filter(!shape %in% c("unknown", "other")) |>
  count(shape) |>
  arrange(desc(n)) |>
  slice_head(n = 10) |>
  mutate(
    shape = fct_reorder(shape, n), # , min
    alpha = rescale(n, to = c(0.3, 1))
    #alpha = min_max(n, 0.3, 1)
    )

# ANNOTATE (brief explanation of what this entire code chunk does) ----
df_day_hour <- ufo_sightings |>
  mutate(
    day = wday(reported_date_time),
    hour = hour(reported_date_time),
    wday = wday(reported_date_time, label = TRUE)
  ) |>
  count(day, wday, hour) |>
  mutate(
    alpha = n/max(n),
    hour_lab = case_when(
      hour == 0 ~ "12am",
      hour <= 12 ~ paste0(hour, "am"),
      hour == 12 ~ "12pm",
      TRUE ~ paste0(hour-12, "pm"))
    )

# ANNOTATE (brief explanation of what this entire code chunk does) ----
# image made with openai::create_image() API call to DALL-E
df_alien <- tibble(
  x = 0,
  y = -5,
  image = image_read("scripts/2023/week-25-ufo/alien.png") |>
    image_fill(color = "none", fuzz = 10) |>
    circle_crop()
)

# print a few random summaries
sample_summary <- function(n) {
  x <- dat$ufo_sightings |>
    mutate(id = 1:n()) |>
    filter(str_length(summary) > 120) |>
    sample_n(n)
  text <- x |>
    pull(summary) |>
    str_to_sentence()
  list(
    text = paste0('"...', text, '..."'),
    id = x$id
  )
}

quotes <- paste0('"...', str_to_sentence(ufo_data$ufo_sightings$summary[c(47816, 6795, 93833)]), '..."')

# ðŸ”¡ text --------------------------------------------------------------------

mastodon <- glue("<span style='font-family:fa-brands; color:{accent}'>&#xf4f6;</span>")
twitter <- glue("<span style='font-family:fa-brands; color:{accent}'>&#xf099;</span>")
github <- glue("<span style='font-family:fa-brands; color:{accent}'>&#xf09b;</span>")
floppy <- glue("<span style='font-family:fa-solid; color:{accent}'>&#xf0c7;</span>")
space <- glue("<span style='color:{bg};font-size:1px'>'</span>")
space2 <- glue("<span style='color:{bg}'>--</span>") # can't believe I'm doing this
caption <- glue("{mastodon}{space2}@danoehm@{space}fosstodon.org{space2}{twitter}{space2}@danoehm{space2}{github}{space2}doehm/tidytues{space2}{floppy}{space2}UFO sightings")

# ðŸ“Š plot --------------------------------------------------------------------

g_us <- df_us |>
  ggplot() +
  geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1, alpha = alpha), fill = accent) +
  geom_text(aes(0.5, 0.7, label = state), lineheight = 0.25, family = "orb", size = 10, colour = bg, fontface = "bold") +
  geom_text(aes(0.5, 0.3, label = round(r, 1)), lineheight = 0.25, family = "orb", size = 8, colour = bg, fontface = "bold") +
  facet_geo(~state) +
  scale_alpha_identity() +
  coord_fixed() +
  labs(subtitle = "Sightings per 10k population") +
  theme_void() +
  theme(
    strip.text = element_blank(),
    plot.subtitle = element_text(family = "bar", size = 40, hjust = 1, colour = txt, margin = margin(b = 10)),
    legend.position = "none"
  )

g_day <- df_day_hour |>
  ggplot() +
  geom_tile(aes(hour, day, alpha = alpha), fill = accent, height = 0.9, width = 0.9) +
  geom_text(aes(hour, 9, label = hour_lab), colour = accent, family = "orb", size = 10) +
  geom_text(aes(0, day, label = str_sub(wday, 1, 1)), colour = bg, family = "orb", size = 8, fontface = "bold") +
  geom_from_path(aes(0, -5, path = image), df_alien, width = 0.25) +
  scale_alpha_identity() +
  coord_polar() +
  ylim(-5, 9) +
  xlim(NA, 23.55) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = bg, colour = bg)
  )

g_shape <- df_shape |>
  ggplot() +
  geom_col(aes(shape, n, alpha = alpha), fill = accent) +
  geom_text(aes(10, 200, label = "10 most common reported shapes"), family = "bar", colour = txt, size = 16, nudge_x = 1, hjust = 0) +
  geom_text(aes(shape, 200, label = str_to_title(shape)), family = "orb", colour = bg, size = 14, hjust = 0, fontface = "bold", nudge_x = 0.2) +
  geom_text(aes(shape, n-200, label = scales::comma(n)), family = "orb", colour = bg, size = 10, hjust = 1, fontface = "bold", nudge_x = -0.2) +
  coord_flip(clip = "off") +
  theme_void() +
  theme(
    legend.position = "none"
  )

g_base <- ggplot() +
  labs(
    title = "UFO Sightings",
    subtitle = "Summary of over 88k reported sightings across the US",
    caption = caption
    ) +
  theme_void() +
  theme(
    text = element_text(family = "orb", size = 48, lineheight = 0.3, colour = txt),
    plot.background = element_rect(fill = bg, colour = bg),
    plot.title = element_text(size = 128, face = "bold", hjust = 0.5, margin = margin(b = 10)),
    plot.subtitle = element_text(family = "bar", hjust = 0.5, margin = margin(b = 20)),
    plot.caption = element_markdown(family = "bar", colour = colorspace::darken(txt, 0.5), hjust = 0.5, margin = margin(t = 20)),
    plot.margin = margin(b = 20, t = 50, r = 50, l = 50),
    axis.text.x = element_text()
  )

# quotes
# doing the quotes as individual charts to add.
# A bit clunky but the path of least resistance
quote1 <- ggplot() +
  annotate("text", x = 0, y = 1, label = str_wrap(quotes[1], 40),
           family = "bar", colour = txt, size = 16, hjust = 0, fontface = "italic", lineheight = 0.4) +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_void() +
  coord_cartesian(clip = "off")

quote2 <- ggplot() +
  annotate("text", x = 0, y = 1, label = str_wrap(quotes[2], 25),
           family = "bar", colour = txt, size = 16, hjust = 0, fontface = "italic", lineheight = 0.4) +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_void() +
  coord_cartesian(clip = "off")

quote3 <- ggplot() +
  annotate("text", x = 0, y = 1, label = str_wrap(quotes[3], 25),
           family = "bar", colour = txt, size = 16, hjust = 0, fontface = "italic", lineheight = 0.4) +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_void() +
  coord_cartesian(clip = "off")

# final chart
g_final <- g_base +
  inset_element(g_shape, left = 0, right = 1, top = 1, bottom = 0.66) +
  inset_element(g_us, left = 0.42, right = 1, top = 0.74, bottom = 0.33) +
  inset_element(g_day, left = 0, right = 0.66, top = 0.4, bottom = 0) +
  inset_element(quote1, left = 0.5, right = 1, top = 0.8, bottom = 0.72) +
  inset_element(quote2, left = 0, right = 1, top = 0.52, bottom = 0.4) +
  inset_element(quote3, left = 0.7, right = 1, top = 0.2, bottom = 0) +
  plot_annotation(
    theme = theme(
      plot.background = element_rect(fill = bg, colour = bg)
    )
  )

ggsave(plot = g_final, filename = "scripts/2023/week-25-ufo/ufo.png", height = 16, width = 10)
```

<!-- Install the following packages (if you don't already have them) using `install.packages("package_name")` or `install.packages(pkgs = c("package_name1", "package_name2", ...))`: -->

<!-- - [`{tidytuesdayR}`](https://cran.r-project.org/web/packages/tidytuesdayR/index.html) -->
<!-- - [`{tidyverse}`](https://cran.r-project.org/web/packages/tidyverse/index.html) -->
<!-- - [`{patchwork}`](https://cran.r-project.org/web/packages/patchwork/index.html) -->
<!-- - [`{showtext}`](https://cran.r-project.org/web/packages/showtext/index.html) -->
<!-- - [`{sysfonts}`](https://cran.r-project.org/web/packages/sysfonts/index.html) -->
<!-- - [`{countrycode}`](https://cran.r-project.org/web/packages/countrycode/index.html) -->
<!-- - [`{glue}`](https://cran.r-project.org/web/packages/glue/index.html) -->
<!-- - [`{scales}`](https://cran.r-project.org/web/packages/scales/index.html) -->
<!-- - [`{ragg}`](https://cran.r-project.org/web/packages/ragg/index.html) -->

<!-- **Tips:** -->

<!-- - See lines 114 and 120 (among others) for examples of code annotations -- aim to include this level of detail.  -->
<!-- - Writing clean annotations makes it easier for you and others to read them -- I love using the [`{ARTofR}` package](https://github.com/Hzhang-ouce/ARTofR) to create titles, dividers, and block comments in my scripts and Qmd / Rmd files. Read more about how to create different dividers using the `{ARTofR}` package on [this resource page](http://localhost:7166/clean-code-guide.html#annotating-code) of the course website. -->
<!-- - Pull up documentation for a function directly in RStudio's **Help** pane by running `?function_name` in the console. Vignettes and `pkgdown` sites are incredible resources as well (e.g. here is a [vignette](https://cloud.r-project.org/web/packages/patchwork/vignettes/patchwork.html) and the [pkgdown](https://patchwork.data-imaginist.com/) site for the `{patchwork}` package) -->
<!-- - If you don't immediately understand the purpose of a line / chunk of code, skip over it (temporarily) and continue working your way through the following code -- it oftentimes becomes more evident given additional context. -->
<!-- - Plots may look *super* squished in the RStudio Viewer pane -- use the **Zoom** button to pop them open in a separate window. -->
<!-- - **Keep in mind:** While this is fairly complex ggplot code, remember that it's constructed in layers -- meaning you can run code line-by-line to see exactly how the plot is changing with each new layer. You may come across functions and arguments that you're already familiar with (yay!), and of course, others that are totally new.   -->

:::

### 1b. Answer questions

Once you're done annotating, respond to the following three questions about this data visualization: 

- [ ] **1.** Describe two elements of this piece that you find visually-pleasing / easy to understand / intuitive. Why? [**(4-10 sentences)**]{.peach-text}
- [ ] **2.** Describe two elements of this piece that you feel could be better presented in a different way. Why? [**(4-10 sentences)**]{.peach-text}
- [ ] **3.** Describe two new things that you learned by interpreting / annotating this code. These could be  packages, functions, or even code organizational approaches that you hadn't previously known about or considered. [**(4-10 sentences)**]{.peach-text}

## Rubric (specifications)

You must complete the following, as detailed below, to receive a "Satisfactory" mark for Assignment #1, Part I:

**Complete the following steps in your GitHub Classroom repo (`eds240-hw1-username/Part1.qmd`):**

- [ ] include your preferred name in the `author` field of the `Part1.qmd` YAML 
- [ ] update each comment line in the code that reads, `# ANNOTATE`, with a *brief* description, written in your own words (see lines 114 & 120 for example annotations; there are other lines that have been already annotated for you as well -- you do not need to re-write these annotations -- you are allowed up to five incorrect or missing annotations
- [ ] leave the code chunk options set to `eval: false` and `echo: true` 
- [ ] answer all three Part 1b questions adhering to the length requirements specified at the end of each question prompt
- [ ] we (your instructors) should be able to successfully render `Part1.qmd` locally without errors
- [ ] push your completed `Part1.qmd` to GitHub via GitHub Classrooms by 11:59pm PT on Sat 01/18/2025

<br>

::: {.center-text .large-fa-icon .teal-text}
{{< fa code title="The symbol for code, </>" >}} End Part I {{< fa code title="The symbol for code, </>" >}}
:::

<br>

# [Part II: Find a data set(s) that interests you]{.pink-text}{#hw1-p2}

## Learning Outcomes 

**Note:** This part of HW #1 is the first step in working towards your final course assignment (we'll be breaking it down a bit, week-by-week). Your final assignment is meant to combine nearly all of the course learning outcomes(!):

- identify which types of visualizations are most appropriate for your data and your audience
- prepare (e.g. clean, explore, wrangle) data so that itâ€™s appropriately formatted for building data visualizations
- build effective, responsible, accessible, and aesthetically-pleasing visualizations using the R programming language, and specifically `{ggplot2}` + ggplot2 extension packages
- write code from scratch and read and adapt code written by others
- apply a DEI (Diversity, Equity & Inclusion) lens to the process of designing data visualizations 

This week, we'll mostly be focused on some prep work. Read the description, below, for details.

## Description 

[**Please begin by reading [HW #4](HW4.qmd) in full**]{.teal-text} so that you have a clear understanding of the options, goals, and requirements for your final class assignment. 

<!-- *A small part of each homework assignment will be dedicated to working on a series of data visualizations which will be due as part of Assignment #4 at the end of the quarter.* Assignment #4 will ask you to build three related, but different data visualizations -- all which will use the same data set(s), but present those data differently for three different audiences / purposes: -->

<!-- 1. **a visualization for a general audience (i.e. without domain expertise)** -- this data visualization may be designed to prompt conversation, clearly display findings (without the use of jargon), display findings in an atypical but creative way,  and / or may blend both art and science -->
<!-- 2. **a visualization to be included in a paper, technical documentation, or report** -- this visualization should tell a story, but can include much more detail, more data, more domain-specific language, etc. -->
<!-- 3. **a visualization that you could include in a presentation** -- you might imagine an audience with familiarity with your domain, but they only have a brief amount of time to process the information being presented; key takeaways should be clearly highlighted, and you may have multiple versions, each with an added layer (as if you're animating pieces of your visualization onto a slide)  -->

Now that you have a better understanding of where we're headed, let's make a bit of progress towards that end goal. [**This week, youâ€™ll focus on finding data that interest you and begin brainstorming some questions that you might explore / answer using those data.**]{.teal-text} Your data set(s) may be related to a past project, or even your current Capstone or GP. It may also be a completely new data set(s), unrelated to anything you're currently working on. Explore the [Data sources](https://samanthacsik.github.io/EDS-240-data-viz/resources.html#data-sources) section of the course website's resources page if you need some inspiration on where to start (you are *not* limited to just these data sources): 

[**Once you've found your data set(s), answer the following questions:**]{.teal-text}

- [ ] **1.** Which of the [two options](http://localhost:7613/assignments/HW4.html#hw4-options) are you most interested in pursuing? It's okay if you change your mind later on. [**(1 sentence)**]{.peach-text}
- [ ] **2.** Describe your data set(s). Be sure to address the following [**(<=4 sentences)**]{.peach-text}
    - [ ] **2a.** Where did you find these data?
    - [ ] **2b.** What variables do these data contain? Is there sufficient metadata for understanding what those variables are?
- [ ] **3.** What steps are involved in downloading or accessing the data (e.g. "I can download using a button via this online portal," "There's an R package for scraping the data," "I need to use an API to scrape the data," etc.)? [**(1-2 sentences)**]{.peach-text}
- [ ] **4.** What question(s) do you want to answer using these data (it's okay if these questions evolve over time, this is just a starting point)? [**(<=4 sentences)**]{.peach-text}
- [ ] **5.** Will you need to combine multiple data sets to successfully answer your question(s)? If so, have you found all the necessary data? Do you have a way to combine it (e.g. matching key values across all data sets)? [**(<=4 sentences)**]{.peach-text}
- [ ] **Optional:** Import your data into R! (this will be a part of the next homework assignment) **IMPORTANT:** If your data files are large (>2GB) DO NOT push your data to GitHub -- instead, add your data file(s) or entire data folder to your `.gitignore` (you'll practice this in Discussion section this week).

## Rubric (specifications)

You must complete the following, as detailed below, to receive a "Satisfactory" mark for Assignment #1, Part II:

**Complete the following step under your own personal GitHub profile, *not* in GitHub Classrooms:**

- [ ] create a GitHub repository named `lastName-eds240-HW4`, which is where you'll be doing any / all work related to Assignment #4. Be sure to make your repository public, initialize your repository with a README, and add a `.gitignore` file.
- [ ] create a [GitHub issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues) (find the **Issues** tab in the top menu bar of your `lastName-eds240-HW4` repo, then click **New issue**) and name it, `HW1 - finding data / initial brainstorming`. Addresss the following in your issue:
  - [ ] link to (or otherwise prove the existence of) at least one data set that you plan to use for Assignment #4
  - [ ] answer all parts of the five concluding questions, adhering to the length requirements specified at the end of each question prompt
  - [ ] your GitHub issue should be neatly organized / formatted (you can use Markdown syntax here!)
- [ ] importing your data is *optional* -- if you'd like to start playing around with your data, do so in a file named, `HW1-find-data.qmd`
- [ ] add your repository's URL next to your name on [this Google Sheet](https://docs.google.com/spreadsheets/d/1tv32Ng_-QI1-eB5ws59HgCN0EoOpHe4UHX6qHhbQGds/edit?usp=sharing) by 11:59pm on Sat 01/20/2024


<!-- OLD from 2024, but making the above updates ahead of 2025 -->
<!-- **Complete the following steps in your GitHub Classroom repo (`eds240-hw1-username/Part2.qmd`):** -->

<!-- - [ ] link to (or otherwise prove the existence of) at least one data set that you plan to use for Assignment #4 -->
<!-- - [ ] answer all parts of the five concluding questions, adhering to the length requirements specified at the end of each question prompt; you *do not* need to complete the **optional** importing of data -- if you *do* want to practice importing your data, be sure to do so in your `lastName-eds240-HW4` repository -->
<!-- - [ ] we (your instructors) should be able to successfully render `Part2.qmd` locally without errors, *however* **do not push any html files to GitHub** (i.e. `Part2.html` and `Part2_files/`; consider adding these to your `.gitignore` so that you don't accidentally push them) -- **only push `Part2.qmd`** -->
<!-- - [ ] push your completed `Part2.qmd` to GitHub via GitHub Classrooms by 11:59pm PT on Sat 01/20/2024 -->

<br>

::: {.center-text .large-fa-icon .teal-text}
{{< fa table title="A data table with two columns and two rows" >}} End Part II {{< fa table title="A data table with two columns and two rows" >}}
:::
