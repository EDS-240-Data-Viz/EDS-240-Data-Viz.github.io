---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 6.1]{.custom-title}

[*Typography*]{.custom-subtitle}

<hr class="hr-teal">

[Week 6 | February 12^th^, 2024]{.custom-subtitle3}

---

##  {#typeography data-menu-title="# Typography #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Type and font choice influences audience perception and readability</p>
</div>

---

## {#typography-defs data-menu-title="Typeography definitions"} 

[Typeface vs. font]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

**[Typeface](https://fonts.google.com/knowledge/glossary/typeface) (aka font family)**: underlying visual design (e.g. Times New Roman, Helvetica, Roboto)

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/nunito-type.png")
```
:::

::: {.column width="50%"}

**[Font](https://fonts.google.com/knowledge/glossary/font)**: an implementation of a typeface; they can come in different weights and styles (e.g. bold, italic)

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/nunito-fonts.png")
```
:::

::::

. . .

:::: {.columns}

::: {.column width="50%" .center-text}
**You choose a *typeface* (e.g. [Nunito](https://fonts.google.com/specimen/Nunito?query=nunito))**
:::

::: {.column width="50%" .center-text}
**You use a *font* (e.g.** regular, *italic*, **bold)**
:::

::::

---

## {#typography-importance data-menu-title="Typography is important!"} 

[Typeface choices affect emotions and perceptions]{.slide-title2}

<hr>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/week6/psychology-fonts.png")
```

:::

::: {.column width="50%"}

<br>
<br>

> *"Typography is the art and technique of arranging type to make written language legible, readable and appealing when displayed."*

::: {.right-align-text .body-text-s}
-[Wikipedia](https://en.wikipedia.org/wiki/Typography)
:::

<br>


Similar to colors, typefaces / fonts influence the how viewers perceive information (check out this short [TEDx talk](https://www.youtube.com/watch?v=OXc-VZ4Vwbo)).

<br>

[{{< fa arrow-left title="an arrow pointing to the left" >}} Source: [The Daily Egg](https://www.crazyegg.com/blog/psychology-of-fonts-infographic/)]{.body-text-s .gray-text}

:::

::::

::: {.footer}
Want to dive deeper into the world of typography? Start with this quick read, [Why care about typography?](https://fonts.google.com/knowledge/introducing_type/why_care_about_typography) and explore other great articles by [Google Fonts](https://fonts.google.com/knowledge).
:::

---

## {#font-psychology data-menu-title="Psychology of typefaces"} 

[Context matters - choose typeface accordingly]{.slide-title2}

<hr>

Typefaces and fonts communicate beyond more than just the written text -- they can **evoke emotions** and can be used to **better connect your audience with your work**. 

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/find-you.png")
```

::: {.center-text .body-text-s .gray-text}
Source: [Typography for a better user experience](https://www.suvoray.com/notes/typography-for-a-better-user-experience), by [Suvo Ray](https://www.suvoray.com/)
:::

<br>

::: {.footer}
Interested in font pyschology? Check out this [short video](https://www.youtube.com/watch?v=6Jlo9iOZvXY&t=65s) and [this article](https://designmodo.com/font-psychology/#:~:text=Serif%20fonts%20can%20evoke%20feelings,modernity%2C%20simplicity%2C%20and%20clarity.) to learn a bit more.
:::

---

## {#sans-serifs data-menu-title="Use sans-serif fonts"} 

[When in doubt, use sans-serif fonts]{.slide-title}

<hr>

**Serif fonts** have small decorative lines (aka "tails" or "feet") that extend off characters while **sans serif fonts** don't. 

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/sans-vs-serif-fonts.png")
```
:::

::: {.column width="50%" .incremental}
- **Sans-serif** fonts = **cleaner** and easier to read.
  - [[Roboto](https://fonts.google.com/specimen/Roboto), [Lato](https://fonts.google.com/specimen/Lato), [Open Sans](https://fonts.google.com/specimen/Open+Sans) are good, free options]{.body-text-s}
- **Serif** fonts = classy / traditional / professional / serious tone; typically only used for **visualization headlines**
  - [If your organization uses a serif font, consider using it in your visualization's headline]{.body-text-s}
:::

::::

<br>

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#lining data-menu-title="Lining figures"} 

[Use a typeface with lining figures for numerals]{.slide-title2}

<hr>

Different typefaces display numbers differently. Serif fonts tend to have "oldstyle figures", which extend above and below the "line" -- these can be difficult to read in a visualization. 

**Instead, look for options with lining figures, where numbers "line up", i.e. they're all the same height.**

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/lining.png")
```

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#monospaced data-menu-title="Monospaced font for numbers"} 

[Use a monospaced typeface for numerals]{.slide-title}

<hr>

<br>

Typefaces with **tabular figures** print **every character with equal width** -- you may see these referred to as **monospaced** typefaces. These work well in tables, visualizations, or any scenario where figures should line up vertically (see how you can quickly identify how many figures a number has in the table on the right, below).

:::: {.columns}

::: {.column width="50%"}
<br>
<br>
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/tabular-figures.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/tabular-google.svg")
```
:::

::::

::: {.footer}
*Examples from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth* & [Understanding numerals](https://fonts.google.com/knowledge/introducing_type/understanding_numerals#when-to-use-tabular-lining-numerals) article by Google Fonts
:::

---

## {#symbols data-menu-title="Symbols"} 

[Use a typeface with all the symbols you need]{.slide-title2}

<hr>

<br>

Confirm that all symbols (aka **glyphs**) that you need exist *and* that they look good for your chosen typeface.

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/symbols.png")
```

<br>

Consider special characters for different languages, currency symbols, math symbols, reference marks, sub / superscript numbers, etc.

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#bold data-menu-title="Bold font"} 

[Use bold fonts for emphasis only]{.slide-title}

<hr>

[**Most typefaces come with fonts for different weights** (Google Fonts uses numbers for font weights -- extra light (200), light (300), regular (400, default), medium (500), semi bold (600), bold (700), extra bold (800)).]{.body-text-s} 

[**Use bold text for titles or to emphasize a few words in annotations.** Regular or medium weights are often easiest for longer text (descriptions, annotations, notes).]{.body-text-s} 

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/bold.png")
```

<br>

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#thin data-menu-title="Thin font"} 

[Avoid really thin fonts]{.slide-title}

<hr>

Thin (light-weight fonts) fonts are hard to read. **Only use them in a high-contrast color and in large sizes** (often, titles are the only place you'll want to use think fonts.)

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/bold.png")
```

<br>

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#large-font-size data-menu-title="Large enough font size"} 

[Ensure your font size is large enough]{.slide-title}

<hr>

**Make sure your font size is large enough, especially when presenting visualizations in a slide-based presentation** (this oftentimes means increasing it larger than you would have it in print). In ggplot, adjust font sizes using `theme()`.

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/large-enough-text.png")
```

<br>

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#contrast data-menu-title="High contrast font color"} 

[Use high-contrast color for most text]{.slide-title}

<hr>

[Web Content Accessibility Guidelines](https://www.w3.org/TR/WCAG21/#:~:text=Web%20Content%20Accessibility%20Guidelines%20(WCAG)%202.1%20defines%20how%20to%20make,%2C%20learning%2C%20and%20neurological%20disabilities.) (WCAG) recommends **a minimum contrast ratio of 4.5:1** -- use a [color contrast checker](https://userway.org/contrast/?fg=000000&bg=ffffff) to check your ratio (e.g. here is a color combo with a [good contrast ratio](https://userway.org/contrast/?fg=272F75&bg=ffffff) and a combo with a [bad contrast ratio](https://userway.org/contrast/?fg=5CDC8D&bg=ffffff)). 

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/contrast-ratio.png")
```

<br>

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#uppercase data-menu-title="Use uppercase sparingly"} 

[Use UPPERCASE text sparingly]{.slide-title}

<hr>

Uppercase text is more difficult to read compared to sentence case -- **limit use to headlines or labels**. Region labels on maps are commonly uppercase (e.g. see maps in these New York Times pieces, [How to Think About Ukraine, in Maps and Charts](https://www.nytimes.com/interactive/2022/02/25/opinion/russia-ukraine-invasion-maps.html) and [Closing the Back
Door to Europe](https://www.nytimes.com/interactive/2015/09/15/world/europe/migrant-borders-europe.html)).

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/uppercase.png")
```

<br>

::: {.footer}
*Example from [Which fonts to use for your charts and tables](https://blog.datawrapper.de/fonts-for-data-visualization/), by 
Lisa Charlotte Muth*
:::

---

## {#typographic-hierarchy data-menu-title="Typographic hierarchy"} 

[Typographic hierarchy]{.slide-title}

<hr>

**No one wants to read a wall of text.** You can use font size, style, color, spacing, and typeface (or combinations of these) to create a hierarchy that guide your readers.

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/hierarchy.png")
```

<br>

::: {.center-text .gray-text .body-text-s}
Source: [The UX Designer’s Guide to Typography](https://www.interaction-design.org/literature/article/the-ux-designer-s-guide-to-typography)
:::

---

## {#recap-font-choices data-menu-title="Recap: font choices"} 

[Recap: choosing the right typeface(s) & font(s)]{.slide-title2}

<hr>

<br>

::: {.incremental}
- **context matters** -- the type(s) should fit the topic and audience
- when in doubt, **use a sans-serif style** 
- choose a **monospaced** typeface with **lining figures** for numbers
- ensure that your chosen typeface **has all the symbols you need *and* that they look okay**
- use **bold fonts for emphasis** and **avoid thin fonts** 
- make **font sizes large enough** to easily read
- use **high-contrast** font colors
- strategically use types & fonts to **create hierarchy** 
- avoid (extensively) using **ALL CAPS**
:::

. . . 

::: {.teal-text .body-text-m .center-text}
**Avoid using too many typefaces (stick to just 1-3)**
:::

. . . 

::: {.footer}
There are *lots* of excellent resources out there for choosing the right typeface / font check out the [resources page](https://samanthacsik.github.io/EDS-240-data-viz/resources.html#typography) on the course website for some recommendations.
:::

---

## {#nicault-horror data-menu-title="C Nicault (Horror Movies)"} 

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/nicault-horror.png")
```

::: {.center-text .body-text-s .gray-text}
Horror Movies, by [Cristophe Nicault](https://www.christophenicault.com/) ([source code](https://github.com/cnicault/tidytuesday/blob/master/2022/2022-44-horror-movies/horror_movies.qmd))
:::

---

## {#anyene-hbcu data-menu-title="I Anyene (HBCUs)"} 

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/anyene-hbcu.png")
```

::: {.center-text .body-text-s .gray-text}
HBCUs, by [Ijeamaka Anyene](https://ijeamaka-anyene.netlify.app/) ([source code](https://github.com/Ijeamakaanyene/tidytuesday/blob/master/scripts/2021_04_hbcu.Rmd))
:::

---

## {#rennie-rladies data-menu-title="N Rennie (R-Ladies Events)"} 

```{r}
#| eval: true
#| echo: false
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/week6/rennie-rladies.png")
```

::: {.center-text .body-text-s .gray-text}
R-Ladies Chapter Events, by [Nicola Rennie](https://ijeamaka-anyene.netlify.app/) ([source code](https://github.com/nrennie/tidytuesday/tree/main/2023/2023-11-21)) | Font inspiried by [R-Ladies Global](https://rladies.org/)
:::

---

##  {#change-fonts data-menu-title="# Code example #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Let's learn how to use different fonts in our ggplots!</p>
</div>

---

## {#sys-fonts1 data-menu-title="System fonts 1"} 

[The problem with system fonts]{.slide-title}

<hr>

A **[[system font](https://fonts.google.com/knowledge/glossary/system_font_web_safe_font)]{.teal-text} is one that's already assumed to be on the vast majority of users' devices**, with no need for a web font to be downloaded.

. . . 

[There are **only three system fonts  that are guaranteed to work everywhere**: **[sans]{.teal-text}** (the default), **[serif]{.teal-text}**, or **[mono]{.teal-text}**. Use the `family` argument to specify which font family you'd like to use for a particular text element, and use the `face` argument to specify font face (**bold**, *italic*, plain (default)):]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| fig-asp: 0.7
#| output-location: column
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point() + 
  labs(title = "This title is serif font",
       subtitle = "This subtitle is mono font",
       x = "This axis label is sans font (default)",
       y = "This axis is also sans font (default)") +
  theme(
    plot.title = element_text(family = "serif", size = 30),
    plot.subtitle = element_text(family = "mono", size = 25),
    axis.title = element_text(family = "sans", size = 22),
    axis.text.x = element_text(family = "serif", face = "bold", size = 18),
    axis.text.y = element_text(family = "mono", face = "italic", size = 18)
    )
```

---

## {#sys-fonts2 data-menu-title="System fonts 2"} 

[The problem with system fonts]{.slide-title}

<hr>

**A graphics device (GD) is something used to make a plot appear** -- everytime you create a plot in R, it needs to be sent to a specific GD to be rendered. There are two main device types:

<br>

. . . 

1. **screen devices:** the most common place for your plot to be "sent" -- whenever our plot appears in a window on our computer screen, it's being sent to a screen device; different operating systems (e.g. Mac, Windows, Linux) have different screen devices
2. **file devices:** if we want to write (i.e. save) our plot to a file, we can send our plot to a particular file device (e.g. pdf, png, jpeg)

<br>

. . .

**Unfortunately, text drawing is handled differently by each graphics device**, which means that if we want a font to work everywhere, we need to configure all these different devices in different ways.

---

## {#font-pkgs data-menu-title="Font packages"} 

[R packages to the rescue!]{.slide-title}

<hr>

Fortunately, there are a couple super handy packages for working with fonts:

- [`{showtext}`](https://github.com/yixuan/showtext) 
- [`{extrafont}`](https://github.com/wch/extrafont)

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
knitr::include_graphics("images/week6/showtext.png")
```
:::

::: {.column width="50%"}
<br>

[**We'll be using `{showtext}`** for a couple reasons: it supports more file formats *and* more graphics devices, and it also avoids using external software (`{extrafont}` requires that you install some additional software and packages first). `{showtext}` makes is *super* easy to import and use [Google Fonts](https://fonts.google.com/).]{.body-text-s}
:::

::: {.footer}
[Albert Rapp](https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons.html) and [Nicola Rennie](https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/) both have written great blog posts on using `{showtext}`. These materials draw from both their work!
:::

::::

::: {.notes}
- re: opening a new GD, `windows()` after `showtext_auto()` <https://gradientdescending.com/adding-custom-fonts-to-ggplot-in-r/>
:::

---

## {#original-salary-plot data-menu-title="Recall M v F earnings plot"} 

[Recall our dumbbell plot from week 4]{.slide-title}

<hr>

Let's improve this plot by updating the colors, modifying the theme, and using some new fonts!

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week6/earnings-plot.png")
```

---

## {#wrangle-data data-menu-title="Wrangle data"} 

[Wrangle data]{.slide-title}

<hr>

This code should look familiar (copied from [Lecture 4.1](https://samanthacsik.github.io/EDS-240-data-viz/slides/week4.1-rankings-slides.html#/title-slide)):
```{r}
#| eval: true
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs_clean <- jobs |>

  # add cols (needed for dumbbell plot) ----
  mutate(percent_male = 100 - percent_female, # % of females within each industry was already included
       difference_earnings = total_earnings_male - total_earnings_female) |>  # diff in earnings between M & F

  # rearrange columns ----
  relocate(year, major_category, minor_category, occupation,
           total_workers, workers_male, workers_female,
           percent_male, percent_female,
           total_earnings, total_earnings_male, total_earnings_female, difference_earnings,
           wage_percent_of_male) |>

  # drop rows with missing earning data ----
  drop_na(total_earnings_male, total_earnings_female) |>

  # make occupation a factor ----
  mutate(occupation = as.factor(occupation)) |>

# ---- this next step is for creating our dumbbell plots ----

# classify jobs by percentage male or female ----
  mutate(group_label = case_when(
    percent_female >= 75 ~ "Occupations that are 75%+ female",
    percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
    percent_male >= 75 ~ "Occupations that are 75%+ male"
  ))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              create subset df                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#....guarantee the same random samples each time we run code.....
set.seed(0)

#.........get 10 random jobs that are 75%+ female (2016).........
f75 <- jobs_clean |>
  filter(year == 2016, group_label == "Occupations that are 75%+ female") |>
  slice_sample(n = 10)

#..........get 10 random jobs that are 75%+ male (2016)..........
m75 <- jobs_clean |>
  filter(year == 2016, group_label == "Occupations that are 75%+ male") |>
  slice_sample(n = 10)

#........get 10 random jobs that are 45-55%+ female (2016).......
f50 <- jobs_clean |>
  filter(year == 2016, group_label == "Occupations that are 45-55% female") |>
  slice_sample(n = 10)

#.......combine dfs & relevel factors (for plotting order).......
subset_jobs <- rbind(f75, m75, f50) |>
  mutate(group_label = fct_relevel(group_label, 
                                   "Occupations that are 75%+ female",
                                   "Occupations that are 45-55% female", 
                                   "Occupations that are 75%+ male"))

```

---

## {#original-plot-code data-menu-title="Original plot (code)"} 

[Code for our original plot]{.slide-title}

<hr>

This code was copied from [Lecture 4.1](https://samanthacsik.github.io/EDS-240-data-viz/slides/week4.1-rankings-slides.html#/title-slide). Resulting plot is rendered on the next slide!

<br>

```{r}
#| eval: false
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
plot <- ggplot(subset_jobs) +
  geom_segment(aes(x = total_earnings_female, xend = total_earnings_male,
                 y = fct_reorder(occupation, total_earnings), yend = occupation)) +
  geom_point(aes(x = total_earnings_male, y = occupation),
             color = "#CD93D8", size = 3.25) +
  geom_point(aes(x = total_earnings_female, y = occupation),
             color = "#6A1E99", size = 3.25) +
  facet_wrap(~group_label, nrow = 3, scales = "free_y") +
  scale_x_continuous(labels = scales::label_dollar(scale = 0.001, suffix = "k"),
                     breaks = c(25000, 50000, 75000, 100000, 125000))

plot
```

---

## {#original-plot-viz data-menu-title="Original plot (viz)"} 

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.7
#| out-width: "100%"
plot <- ggplot(subset_jobs) +
  geom_segment(aes(x = total_earnings_female, xend = total_earnings_male,
                 y = fct_reorder(occupation, total_earnings), yend = occupation)) +
  geom_point(aes(x = total_earnings_male, y = occupation),
             color = "#CD93D8", size = 3.25) +
  geom_point(aes(x = total_earnings_female, y = occupation),
             color = "#6A1E99", size = 3.25) +
  facet_wrap(~group_label, nrow = 3, scales = "free_y") +
  scale_x_continuous(labels = scales::label_dollar(scale = 0.001, suffix = "k"),
                     breaks = c(25000, 50000, 75000, 100000, 125000))

plot
```

---

## {#create-palette data-menu-title="Create a better palette"} 

[Create a better (named) palette]{.slide-title}

<hr>

[In last week's [lecture on colors](https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.2-colors-slides.html#/title-slide), we learned **to be predictable in our color choices, but to avoid stereotypes** ([Muth 2018](https://blog.datawrapper.de/colors/)). It can be helpful for readers to choose a cool color for men (e.g. blues / purples) and warmer color for women (e.g. yellows, oranges, warm greens).]{.body-text-s}

[We'll do that here, but this time, **let's create a named vector of colors** to call from. In addition to our point colors, we'll also include colors for our plot's text:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
earnings_pal <- c("males" = "#2D7787",
                  "females" = "#FC6B4B",
                  dark_text = "#0C1509",
                  light_text = "#4E514D") 
```

[The primary purpose of the [`{monochromeR}` package](https://github.com/cararthompson/monochromeR) is for creating monochrome colour palettes, however, it also includes a **helpful function for viewing our palette**:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
monochromeR::view_palette(earnings_pal)
```

---

## {#apply-colors data-menu-title="Apply new colors"} 

[Apply new colors by name]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
#| code-line-numbers: "5,7"
plot <- ggplot(subset_jobs) +
geom_segment(aes(x = total_earnings_female, xend = total_earnings_male,
                 y = fct_reorder(occupation, total_earnings), yend = occupation)) +
  geom_point(aes(x = total_earnings_male, y = occupation),
             color = earnings_pal["males"], size = 3.25) +
  geom_point(aes(x = total_earnings_female, y = occupation),
             color = earnings_pal["females"], size = 3.25) +
  facet_wrap(~group_label, nrow = 3, scales = "free_y") +
  scale_x_continuous(labels = scales::label_dollar(scale = 0.001, suffix = "k"),
                     breaks = c(25000, 50000, 75000, 100000, 125000))

plot
```

---

## {#titles-theme-code data-menu-title="Titles & theme (code)"} 

[Add titles / caption & modify theme]{.slide-title}

<hr>

Resulting plot is rendered on the next slide!

```{r}
#| eval: false
#| echo: true
#| fig-align: "center"
#| out-height: "100%"
plot +
  labs(title = "Earnings by Occupation and Sex",
       subtitle = "Median earnings of full-time male vs. female workers by occupation in 2016",
       caption = "Data Source: TidyTuesday (March 5, 2019)") +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(face = "bold",
                              size = 25,
                              color = earnings_pal["dark_text"]),
    plot.subtitle = element_text(size = 17,
                                 color = earnings_pal["light_text"],
                                 margin = margin(t = 0.5, r = 0, b = 1, l = 0, unit = "lines")),
    plot.caption = element_text(face = "italic",
                                color = earnings_pal["light_text"],
                                margin = margin(t = 3, r = 0, b = 0, l = 0, unit = "lines")),
    strip.text.x = element_text(face = "bold",
                                size = 12,
                                hjust = 0),
    panel.spacing.y = unit(x = 1, "lines"),
    axis.text = element_text(color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```

::: {.footer}
**Note:** We can apply our font colors in the same way we applied our point colors, calling named values from our `earnings_pal`
:::

---

## {#titles-theme-viz data-menu-title="Titles & theme (viz)"} 

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.7
#| out-height: "100%"
plot +
  labs(title = "Earnings by Occupation and Sex",
       subtitle = "Median earnings of full-time male vs. female workers by occupation in 2016",
       caption = "Data Source: TidyTuesday (March 5, 2019)") +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(face = "bold",
                              size = 25,
                              color = earnings_pal["dark_text"]),
    plot.subtitle = element_text(size = 17,
                                 color = earnings_pal["light_text"],
                                 margin = margin(t = 0.5, r = 0, b = 1, l = 0, unit = "lines")),
    plot.caption = element_text(face = "italic",
                                color = earnings_pal["light_text"],
                                margin = margin(t = 3, r = 0, b = 0, l = 0, unit = "lines")),
    strip.text.x = element_text(face = "bold",
                                size = 12,
                                hjust = 0),
    panel.spacing.y = unit(x = 1, "lines"),
    axis.text = element_text(color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```

---

## {#pick-google-fonts data-menu-title="Pick Google fonts"} 

[Pick a typeface(s) from Google Fonts]{.slide-title}

<hr>

[Browse typefaces and fonts at <https://fonts.google.com/>. It can be helpful to type your desired text into the **Preview** field (you may need to expand the sidebar by clicking the **Filters** button on the top left of the page) to get a better sense of how your font choice will look. You can also search typefaces by name:]{.body-text-s}

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/google-fonts.gif")
```

---

## {#our-typefaces data-menu-title="Our typeface choices"} 

[We'll use these two typefaces:]{.slide-title}

<hr>

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text}
**[Josefin Sans](https://fonts.google.com/specimen/Josefin+Sans)**
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/josefin-sans.png")
```
:::

::: {.column width="50%"}

::: {.center-text}
**[Sen](https://fonts.google.com/specimen/Sen?query=sen)**
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week6/sen.png")
```
:::

::::

---

## {#import-google-fonts data-menu-title="Import Google Fonts"} 

[Import Google Fonts]{.slide-title}

<hr>

<!-- [We'll use the [`{showtext}` package](https://github.com/yixuan/showtext) to import and apply our Google Fonts. -->

[Import `{showtext}` at the top of your script, then use `font_add_google()` to specify the font family(ies) you want to import. **Importantly**, you'll also need to "turn on" showtext using `showtext_auto()` -- this enables showtext font rendering for any newly opened graphics devices.]{.body-text-s} 

```{r}
#| eval: true
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(showtext)

#..........................import fonts..........................
# `name` is the name of the font as it appears in Google Fonts
# `family` is the user-specified id that you'll use to apply a font in your ggpplot
font_add_google(name = "Josefin Sans", family = "josefin")
font_add_google(name = "Sen", family = "sen")

#................enable {showtext} for rendering.................
showtext_auto()

# ~ additional setup code omitted for brevity ~
```

---

## {#apply-google-fonts-code data-menu-title="Apply Google Fonts (code)"} 

[Apply Google Fonts (code)]{.slide-title}

<hr>

Resulting plot is rendered on the next slide!

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "8,12,16,20,25"
plot +
  labs(title = "Earnings by Occupation and Sex",
       subtitle = "Median earnings of full-time male vs. female workers by occupation in 2016",
       caption = "Data Source: TidyTuesday (March 5, 2019)") +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 25,
                              color = earnings_pal["dark_text"]),
    plot.subtitle = element_text(family = "sen",
                                 size = 17,
                                 color = earnings_pal["light_text"],
                                 margin = margin(t = 0.5, r = 0, b = 1, l = 0, unit = "lines")),
    plot.caption = element_text(family = "sen",
                                face = "italic", # NOTE: this no longer applies since the typeface "Sen" does not exist in an italic font style
                                color = earnings_pal["light_text"],
                                margin = margin(t = 3, r = 0, b = 0, l = 0, unit = "lines")),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 12,
                                hjust = 0),
    panel.spacing.y = unit(x = 1, "lines"),
    axis.text = element_text(family = "sen",
                             color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```

::: {.footer}
**Note:** Our previously italicized caption is no longer, since Sen does not come in an italicized font style
:::

---

## {#apply-google-fonts-viz data-menu-title="Apply Google Fonts (viz)"} 

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.7
#| out-height: "100%"
plot +
  labs(title = "Earnings by Occupation and Sex",
       subtitle = "Median earnings of full-time male vs. female workers by occupation in 2016",
       caption = "Data Source: TidyTuesday (March 5, 2019)") +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 25,
                              color = earnings_pal["dark_text"]),
    plot.subtitle = element_text(family = "sen",
                                 size = 17,
                                 color = earnings_pal["light_text"],
                                 margin = margin(t = 0.5, r = 0, b = 1, l = 0, unit = "lines")),
    plot.caption = element_text(family = "sen",
                                face = "italic",
                                color = earnings_pal["light_text"],
                                margin = margin(t = 3, r = 0, b = 0, l = 0, unit = "lines")),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 12,
                                hjust = 0),
    panel.spacing.y = unit(x = 1, "lines"),
    axis.text = element_text(family = "sen",
                             color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```

---

## {#import-fa-fonts data-menu-title="Import Font Awesome fonts"} 

[Import Font Awesome fonts]{.slide-title}

<hr>

[[Font Awesome](https://fontawesome.com/) is a library of icons, which can be imported and used similar to Google Fonts. You'll need to download the font files first (see week 5 [pre-class prep instructions](https://samanthacsik.github.io/EDS-240-data-viz/course-materials/week6.html#download-font-awesome-fonts)). We can then use `showtext::font_add()` to make them available for use in our ggplots:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "15-21"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(showtext)

#......................import Google Fonts.......................
# `name` is the name of the font as it appears in Google Fonts
# `family` is the user-specified id that you'll use to apply a font in your ggpplot
font_add_google(name = "Josefin Sans", family = "josefin")
font_add_google(name = "Sen", family = "sen")

#....................import Font Awesome fonts...................
font_add(family = "fa-brands",
         regular = here::here("fonts", "Font Awesome 6 Brands-Regular-400.otf"))
font_add(family = "fa-regular",
         regular = here::here("fonts", "Font Awesome 6 Free-Regular-400.otf")) 
font_add(family = "fa-solid",
         regular = here::here("fonts", "Font Awesome 6 Free-Solid-900.otf"))

#................enable {showtext} for rendering.................
showtext_auto()

# ~ additional setup code omitted for brevity ~
```

## {#fa-unicode data-menu-title="FA Unicode"} 

[Reference icons by their Unicode]{.slide-title}

<hr>

Let's say I want to include my GitHub username along with the GitHub icon in the caption of my plot. Search the [**Free** icons on Font Awesome](https://fontawesome.com/search?o=r&m=free) and click on the one you want to use. Find the icon's Unicode in the top right corner of the popup box:

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week6/fa-unicode.png")
```

---

## {#create-caption data-menu-title="FA unicode (caption)"} 

[Reference icons by their unicode]{.slide-title}

<hr>

[To use this unicode in HTML, we need to stick a `&#x` ahead of it. It's easier if we save our unicode (as well as our username text) to variables that we can more easily reference as we craft our new caption. I also recommend constructing your full caption outside of your ggplot -- the [`glue::glue()` function](https://glue.tidyverse.org/) is helpful here:]{.body-text-s}

<br>

```{r}
#| eval: true
#| echo: true
#.........................create caption.........................
github_icon <- "&#xf09b"
github_username <- "samanthacsik"

caption <- glue::glue(
  "Data Source: TidyTuesday (March 5, 2019) |
  <span style='font-family:fa-brands;'>{github_icon};</span>
  {github_username}"
)
```

<br>

[Note that we **(1)** wrap our object names in `{}` to use the values that are saved to them, and **(2)**, we use the HTML `<span>` tag to apply styles to text -- here, we use the `font-family` property and supply it the value, `fa-brands` (which is the id (i.e. `family`) we created when loading the `Font Awesome 6 Brands-Regular-400.otf` file at the top of our script).]{.body-text-s}

---

## {#create-subtitle data-menu-title="FA unicode (subtitle)"} 

[Let's also add an icon to our subtitle]{.slide-title}

<hr>

We can do this the same way that we constructed our caption -- **note** that this money icon is from the [`fa-regular` family](https://fontawesome.com/icons/money-bill-1?f=classic&s=regular) (though you could choose to use the [solid version](https://fontawesome.com/icons/money-bill-1?f=classic&s=solid) as well):

<br>

```{r}
#| eval: true
#| echo: true
#........................create subtitle.........................
money_icon <- "&#xf3d1"

subtitle <- glue::glue("Median earnings 
                       <span style='font-family:fa-regular;'>{money_icon};</span>
                       of full-time male versus female workers by occupation in 2016")
```

---

## {#update-text-code data-menu-title="Add new plot text (code)"} 

[Apply our new subtitle & caption (code)]{.slide-title}

<hr>

Resulting plot is rendered on the next slide!

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "3-4"
plot +
  labs(title = "Earnings by Occupation and Sex",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 25),
    plot.subtitle = ggtext::element_textbox_simple(family = "sen",
                                                   size = 17,
                                                   color = earnings_pal["light_text"],
                                                   margin = margin(t = 0.5, r = 0, b = 1, l = 0, unit = "lines")),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           margin = margin(t = 3, r = 0, b = 0, l = 0, unit = "lines")),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 12,
                                hjust = 0),
    panel.spacing.y = unit(1, "lines"),
    axis.text = element_text(family = "sen",
                             color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```

---

## {#update-text-viz data-menu-title="Add new plot text (viz)"} 

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| fig-asp: 0.7
#| out-height: "100%"
plot +
  labs(title = "Earnings by Occupation and Sex",
       subtitle = subtitle,
       caption = caption) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 25),
    plot.subtitle = ggtext::element_textbox_simple(family = "sen",
                                                   size = 17,
                                                   color = earnings_pal["light_text"],
                                                   margin = margin(t = 0.5, r = 0, b = 1, l = 0, unit = "lines")),
    plot.caption = ggtext::element_textbox(family = "sen",
                                           face = "italic", # NOTE: this no longer applies since the typeface "sen" does not exist in an italic font style
                                           color = earnings_pal["light_text"],
                                           margin = margin(t = 3, r = 0, b = 0, l = 0, unit = "lines")),
    strip.text.x = element_text(family = "josefin",
                                face = "bold",
                                size = 12,
                                hjust = 0),
    panel.spacing.y = unit(1, "lines"),
    axis.text = element_text(family = "sen",
                             color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```

---

## {#up-next data-menu-title="Next modifications"} 

[Up next . . .]{.slide-title}

<hr>

<br>

[Our plot is getting closer, but isn't *quite* done just yet. Up next, we'll:]{.body-text-m}

<br>

1. create an alternative legend by coloring our subtitle text (i.e. **[male]{style="color:#2D7787"}** & **[female]{style="color:#FC6B4B"}** to match the points in our plot
2. learn how to add annotations!

<br>

::: {.center-text .body-text-l}
Stay tuned!
:::

---

##  {#break data-menu-title="# Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ This is the end of Lesson 1 (of 2) ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```
