---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 5.2]{.custom-title}

[*Colors*]{.custom-subtitle}

<hr class="hr-teal">

[Week 5 | February 5^th^, 2024]{.custom-subtitle3}

---

##  {#why-color data-menu-title="# Why use color? #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa palette title="a painter's palette" >}} Why do we use color?</p>
<p class="caption-text">*Spend a couple minutes discussing with your Learning Partners the following:*</p>
<p class="dark-blue-text">**Why and / or when we use color in data visualizations?**</p>
<p class="dark-blue-text">**Find an example(s) of a data viz that uses color to convey information to share in #eds-240-data viz. Note some of your own observations about the color choices (i.e. why these colors? palette arrangement?).**</p>
</div>

```{r}
countdown::countdown(
  minutes = 2,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

::: {.notes}
- evoke emotions
- highlight important data / concepts
- branding
:::

<!-- --- -->

<!-- ~start by showing examples of data viz & colors to get reactions~ -->

<!-- - green ocean vs blue ocean map -->
<!-- - warm city cold city (temperature scales): https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/ -->
<!-- - precipitation -->
<!-- - urban areas -->
<!-- - forests -->
<!-- - bright colors on elevation maps = high areas; dark = low areas -->
<!-- - happy vs. sad -->

---

## {#colors-difficult data-menu-title="It's hard to choose colors!"} 

[Choosing colors is difficult and they should be purposefully chosen]{.slide-title3}

<hr>

<br>

::: {.center-text .body-text-m}
You'll probably iterate on them as you sit with your visualization and of course, as you get feedback from others.
:::

<br>

. . . 

**Some places to start / things to consider:**

- is using color the best and / or only way to visually represent your variable(s)?

. . . 

- are you designing for a particular organization / brand?
- what emotions are you trying (or not trying) to elicit?
- who is your audience?
- are your data commonly represented using a particular color scheme?
- what data types (e.g. numeric vs. categorical, discrete vs. continuous?) are you working with?

---

## {#color-properties data-menu-title="Color properties"} 

[What is color?]{.slide-title}

<hr>

[There are a number of **different color spaces that are used to represent and define color**. [HSV and HSL](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.) are used commonly in color pickers (e.g. [Google color picker](https://www.google.com/search?q=google+color+picker&oq=google+color+picker&gs_lcrp=EgZjaHJvbWUqCggAEAAYsQMYgAQyCggAEAAYsQMYgAQyBggBEEUYQDIHCAIQABiABDIHCAMQABiABDIHCAQQABiABDIGCAUQRRg8MgYIBhBFGDwyBggHEEUYPNIBCDIwMDhqMGo0qAIAsAIA&sourceid=chrome&ie=UTF-8)). [HCL](https://en.wikipedia.org/wiki/HCL_color_space) underlies some default `{ggplot2}` parameters. You don't need to worry much about the underlying theory of color spaces, but know that **changing any of the parameters (e.g. hue, saturation, etc.) can influence how we perceive information in a data visualization.**]{.body-text-s}

<!-- Changing **hue** (the pure color), **saturation** (aka chroma; the intensity / purity of a color) and / or **value** (degree of lightness / darkness) can influence how readers perceive information in a data visualization. -->

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
HSL 
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/hue-sat-val.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [medium.com](https://medium.com/awkbit/choosing-a-color-scheme-for-your-website-awkbit-59ab750151dc)
:::
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
HCL
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/hcl.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: Stauffer et al. (2015) <https://doi.org/10.1175/BAMS-D-13-00155.1>
:::
:::

::::

::: {.notes}
- Hue ranges from 0 to 360 (an angle) and gives the “colour” of the colour (blue, red, orange, etc).
- Chroma is the “purity” of a colour, ranging from 0 (grey) to a maximum that varies with luminance.
- Luminance is the lightness of the colour, ranging from 0 (black) to 1 (white).

Source: <https://ggplot2-book.org/scales-colour>
:::

<!-- --- -->

<!-- ##  {#data-types data-menu-title="# Data types #" background="#047C90"} -->

<!-- <div class="page-center vertical-center"> -->
<!-- <p class="custom-subtitle bottombr">Different data types require different palette types</p> -->
<!-- </div> -->

---

## {#color-scales data-menu-title="Color scales"} 

[Different color scales for different data types]{.slide-title2}

<hr>

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/palette-types.png")
```

<br>

::: {.center-text .gray-text .body-text-s}
Image source: [Which color scale to use when visualizing data](https://blog.datawrapper.de/which-color-scale-to-use-in-data-vis/), by Lisa Charlottte Muth. This is the first article of a 4 part series ([Part 2](https://blog.datawrapper.de/quantitative-vs-qualitative-color-scales/) / [Part 3](https://blog.datawrapper.de/diverging-vs-sequential-color-scales/) / [Part 4](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/)) -- I highly recommend reading!
:::

---

## {#categorical data-menu-title="Categorical scales"} 

[Categorical scales]{.slide-title2}

<hr>

  - [colors assigned to each group must be distinct and ideally have different lightnesses]{.body-text-s}
  - [groups don't have an intrinsic order]{.body-text-s}
  - [limit to no more than 7 colors]{.body-text-s}
  - [mainly formed by selecting differet *hues*]{.body-text-s}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/categorical-scales.png")
```

::: {.footer}
Map source: [Analyzing US Census Data](https://walker-data.com/census-r/index.html), by Kyle Walker
:::

---

## {#sequential data-menu-title="Sequential scales"} 

[Sequential scales]{.slide-title2}

<hr>

  - [colors assigned to data values in a continuum, based on lightness, hue, or both]{.body-text-s}
  - [lower values typically associated with lighter colors & higher values associated with darker colors]{.body-text-s}
  - [can use a single hue (light to dark) *or* two hues (tyipcally a warmer / brighter hue for lower values and cooler / darker hue for higher values)]{.body-text-s}


```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/sequential-scales.png")
```

::: {.footer}
Map source: [Analyzing US Census Data](https://walker-data.com/census-r/index.html), by Kyle Walker
:::

---

## {#diverging data-menu-title="Diverging scales"} 

[Sequential scales]{.slide-title2}

<hr>

  - [combination of two sequential palettes with a shared endpoint at the central value]{.body-text-s}
  - [use a distinctive hue for each of the component palettes]{.body-text-s}
  - [central value is assigned a light color (light gray is best)]{.body-text-s}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/diverging-scales.png")
```

::: {.footer}
Map source: [2020 U.S. Election Mapped: TrumpLand vs Biden Archipelago](https://vividmaps.com/us-election-2020/), by Vivid Maps
:::

---

##  {#accessibility data-menu-title="# Accessibility #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Ensuring inclusive and accessible design through your color choices</p>
</div>

---

## {#colorblindness data-menu-title="Colorblindness"} 

[What is colorblindness?]{.slide-title}

<hr>

Color vision deficiency aka colorblindness is the decreased ability to see color or differences in color. It's estimated that about 1 in 12 men (8%) and 1 in 200 women (0.5%) are affected ([Wikipedia](https://en.wikipedia.org/wiki/Color_blindness)).

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/color-test-plates.png")
```

::: {.center-text .body-text-s .gray-text}
Color plate tests are used to help identify different forms of color blindness. Try using the [Let's get color blind](https://chromewebstore.google.com/detail/lets-get-color-blind/bkdgdianpkfahpkmphgehigalpighjck) Chrome extension to emulate different forms of colorblindness while looking at the above plates. Image source: [American Optometric Association](https://www.aoa.org/healthy-eyes/eye-and-vision-conditions/color-vision-deficiency?sso=y)
:::

---

## {#rainbow-colormaps data-menu-title="Rainbow colormaps"} 

[The problem with rainbow color maps]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/moreland-rainbow.png")
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
knitr::include_graphics("images/week5/noaa-weathermap.png")
```
:::

::: {.column width="50%"}
- [colors don't follow any natural perceived ordering (no innate sense of higher or lower)]{.body-text-s}

- [perceptual changes in rainbow colors are not uniform (e.g. colors appear to change faster in yellow region than green region)]{.body-text-s}

- [insensitive to color vision deficiencies]{.body-text-s}
:::

::::

<br>

::: {.footer}
Top image source: [Why we use bad color maps and what you cando about it](https://www.kennethmoreland.com/color-advice/BadColorMaps.pdf) | Bottom left image source: Ware C, Stone M, Albers Szafir D (2023) Rainbow colormaps are not all bad. IEEE Computer Graphics and Applications 43:88-93 [10.1109/MCG.2023.3246111](https://www.computer.org/csdl/magazine/cg/2023/03/10128890/1NdJMHqISnS) | For another example of poor use of rainbow color maps, see this [world map with binned colors](https://en.wikipedia.org/wiki/Poverty#/media/File:Countries_by_Human_Development_Index_(2020).png)
:::

---

## {#rainbow-colormaps-alt data-menu-title="Alt rainbow colormaps"} 

[Rainbow colormaps aren't all bad]{.slide-title}

<hr>

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Problematic, perceptually nonuniform and unordered rainbow colormaps
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/bad-rainbow.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Improved, perceptual uniform and diverging rainbow colormaps
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/better-rainbow.png")
```
:::

::::

::: {.center-text .body-text-s .gray-text}
Image source: Ware C, Stone M, Albers Szafir D (2023) Rainbow colormaps are not all bad. IEEE Computer Graphics and Applications 43:88-93 [10.1109/MCG.2023.3246111](https://www.computer.org/csdl/magazine/cg/2023/03/10128890/1NdJMHqISnS)
:::

::: {.footer}
Also check out [Stoelzle & Stein (2021)](https://doi.org/10.5194/hess-25-4549-2021) (Figure 1 is particularly helpful!) and [Crameri et al. (2020)](https://doi.org/10.1038/s41467-020-19160-7) for some really great supplemental reading 
:::

---

## {#viridis data-menu-title="Viridis"} 

[Alternative: Viridis]{.slide-title}

<hr>

[The `viridis` color scales](https://ggplot2.tidyverse.org/reference/scale_viridis.html) are perceptually-uniform (even when printed in gray scale) and colorblindness-friendly:

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Continuous viridis scales
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/viridis-continuous.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Binned viridis scales
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/viridis-binned.png")
```
:::

::::

There are a number of different ways to apply `viridis` color scales, but I often opt for [`scale_*_viridis_*()` functions](https://ggplot2.tidyverse.org/reference/scale_viridis.html), which come pre-loaded with `{ggplot}`.

---

## {#use-viridis data-menu-title="Use viridis"} 

[Using viridis color scales]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Continuous viridis scales
:::

```{r}
#| eval: true
#| echo: true
#| #| fig-align: "center"
#| out-width: "100%"
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_viridis_c(option = "magma")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Discrete viridis scales
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_viridis_d(option = "viridis") 
```
:::

::::

[Use `option` to specify palette and explore some of the other arguments in the [documentation](https://ggplot2.tidyverse.org/reference/scale_viridis.html).]{.body-text-s}

---

## {#color-brewer data-menu-title="ColorBrewer"} 

[Alternative: RColorBrewer]{.slide-title}

<hr>

[The [ColorBrewer color scales](https://ggplot2.tidyverse.org/reference/scale_brewer.html) provides color schemes for maps and other graphics. There is also a [web-based interface](http://colorbrewer2.org) for generating palettes.]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.all()
```

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/brewer-all.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)
```

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/brewer-colorblind.png")
```
:::

::::

---

## {#color-brewer-pal data-menu-title="Show RColorBrewer palette"} 

[Alternative: RColorBrewer]{.slide-title}

<hr>

<br>

`{RColorBrewer}` comes with a couple useful functions for quickly viewing and assembling your palette's HEX codes: 

<br>

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .gray-text .body-text-s}
Preview a palette with your number of desired colors:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.pal(n = 4, name = 'Dark2')
```

:::

::: {.column width="50%"}
::: {.center-text .gray-text .body-text-s}
Print the HEX codes of your palette:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::brewer.pal(n = 4, name = 'Dark2')
```

:::

::::

---

## {#use-RColorBrewer data-menu-title="Use RColorBrewer"} 

[Using RColorBrewer color palettes]{.slide-title}

<hr>

Use the right function (all pre-loaded with `{ggplot2}`) for the type of data / palette:

<br>

:::: {.columns}

::: {.column width="33%"}

::: {.center-text .body-text-s .gray-text}
Use `scale_color_brewer()` to apply **qualitative palettes** 
:::

```{r}
#| eval: true
#| echo: true
#| #| fig-align: "center"
#| out-width: "100%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_brewer(palette = "Dark2") 
```
:::

::: {.column width="33%"}

::: {.center-text .body-text-s .gray-text}
Use `scale_color_distiller()` for **sequential** versions of **continuous color scales**
:::

```{r}
#| eval: true
#| echo: true
#| #| fig-align: "center"
#| out-width: "100%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_distiller(palette = "BuPu")
```
:::

::: {.column width="33%"}

::: {.center-text .body-text-s .gray-text}
Use `scale_color_fermenter()` for **binned** versions of **continuous color scales**
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_fermenter(palette = "YlGnBu")
```
:::

::::

---

## {#outline-points data-menu-title="Tip: outline points"} 

[Tip: outline points to make light colors more visible]{.slide-title2}

<hr>

Rather than `color` points by `body_mass_g`, we can `fill` points by `body_mass_g`. Then, we need to change the [`shape` of our points to `21`](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#sec:shape-spec), which is the code for an outlined, fill-able point: 

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
#| code-line-numbers: "4,5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, fill = body_mass_g)) +
  geom_point(shape = 21, size = 4, alpha = 0.8) +
  scale_fill_distiller(palette = "BuPu")
```

::: {.footer}
Trick comes courtesy of [Albert Rapp](https://albert-rapp.de/) and his [How to Use Better Colors in ggplot (3 Easy Ways)](https://www.youtube.com/watch?v=ZVSbY4z7tMY) video tutorial. Check out his [YouTube channel](https://www.youtube.com/@rappa753) for *tons* of great R content.
:::

---

## {#redundant-mapping data-menu-title="Redundant mapping"} 

[Use redundant mapping whenever possible]{.slide-title}

<hr>

Recall that colors are [low on the hierarchy of elementary perceptual tasks](https://samanthacsik.github.io/EDS-240-data-viz/slides/week3.1-choosing-graphic-forms-slides.html#/hierarchy). **When possible, avoid conveying important information purely through color** -- consider how you might additionally use shapes, symbols, typography, or annotations.

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/apigo2022.png")
```

::: {.center-text .body-text-s .gray-text}
Figure 2 from Apigo A and Oono R (2022) Plant abundance, but not plant evolutionary history, shapes patterns of host specificity in foliar fungal endophytes. Ecosphere. 13(1):e03879. [https://doi.org/10.1002/ecs2.3879](https://doi.org/10.1002/ecs2.3879)
:::

---

##  {#premade-palettes data-menu-title="# Additional palette packages#" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">There are *so many* great pre-made color palettes to explore, many of which take into consideration color vision deficiencies (but always double check!)</p>
</div>

---

## {#paletteer data-menu-title="Paletteer"} 

[Use paletteer to access TONS of palettes]{.slide-title}

<hr>

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/paletteer.png")
```
:::

::: {.column width="50%"}

<br>

It would be impossible to list out on one slide all the palette packages available for use, but the [`{paletteer}` package](https://emilhvitfeldt.github.io/paletteer/) gets close to doing just that.

<br>

It provides **a common interface for accessing a near-comprehensive list of palettes ([over 2,000!!]{.teal-text}) across various packages**.
:::

::::

::: {.center-text .body-text-m}
Explore the extensive list of [supported palette packages](https://emilhvitfeldt.github.io/paletteer/#included-packages)!
:::

---

## {#paletteer-fxns data-menu-title="Paletteer functions"} 

[Use `{paletteer}` to generate HEX codes *or* apply palettes directly]{.slide-title3}

<hr>

::: {.incremental}
- **Generate a list of HEX codes** using one of [three `paletteer_*()` functions](https://emilhvitfeldt.github.io/paletteer/#examples) 
- **Apply a palette directly to your ggplot** using one of [three `scale_*_paletteer_*()`  functions](https://emilhvitfeldt.github.io/paletteer/#ggplot2-scales)
:::

. . . 

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Find most palettes on the **[R Color Palettes](https://emilhvitfeldt.github.io/r-color-palettes/) website**
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/r-color-palettes.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Click on any palette for more information & example plots 
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/wesanderson.png")
```
:::

::::

---

## {#try-paletteer data-menu-title="Try paletteer"} 

[Give `{paletteer}` a try (or use any package directly)!]{.slide-title3}

<hr>

[Update the colors of the plots below, either by using the `{paletteer}` package *or* by following the documentation for any specific package. It's helpful to start by looking over the [list of supported packages](https://emilhvitfeldt.github.io/paletteer/#included-packages).]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "90%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) 
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "590%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 
```
:::

::::

```{r}
countdown::countdown(
  minutes = 3,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

---

## {#try-paletteer-ex data-menu-title="Try paletteer (examples)"} 

[Examples]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .gray-text .body-text-s}
**superbloom3** palette from [`{calecopal}`](https://github.com/an-bui/calecopal), applied using the `paletteer::scale_color_paletteer_d()`
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "90%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  paletteer::scale_color_paletteer_d("calecopal::superbloom3")
```
:::

::: {.column width="50%"}
::: {.center-text .gray-text .body-text-s}
**WindCave** palette from [`{NatParksPalette}`](https://github.com/kevinsblake/NatParksPalettes), created using `{NatParksPalette}` & applied using `scale_color_gradientn()`
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "590%"
library(palmerpenguins)
library(tidyverse)

my_parks_palette <- NatParksPalettes::natparks.pals(name = "WindCave", n = 20, type = "continuous")

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_gradientn(colors = rev(my_parks_palette))
```
:::

::::

---

##  {#climate-colors data-menu-title="# Climate colors #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Climate and environmental science visualizations can (should) draw from community standards, when possible</p>
</div>

---

## {#suggested-colors data-menu-title="Kaye et al. 2012"} 

[Some widely-used climate science palettes]{.slide-title}

<hr>

<br>

```{r}
#| eval: true
#| echo: false
#| out-width: "40%"
#| fig-align: "center"
knitr::include_graphics("images/week5/kaye-etal-2012-colors.png")
```

<br>

::: {.center-text .body-text-s}
**Figure 4.** Appropriate diverging and sequential colour schemes for the following climate data (a), absolute temperature (b), absolute precipitation (c), temperature anomaly (d), precipitation or runoff anomaly (e and f) other climate variables with no symbolic association . Schemes in this figure are 7 class ones designed by Cynthia Brewer, ([Brewer et al. 2003](https://tizmogollon.weebly.com/uploads/1/5/4/7/15475746/brewer_etal_2003_colorbrewer_in_print.pdf))
:::

<br>

::: {.footer}
**Citation:** Kaye NR, Hartley A, Hemming D (2012) Mapping the climate: guidance on appropriate techniques to map climate variables and their uncertainty. Geoscientific Model Development. 5:245-256. www.geosci-model-dev.net/5/245/2012/ ([PDF download](https://www.researchgate.net/publication/307824079_Mapping_the_climate_guidance_on_appropriate_techniques_to_map_climate_variables_and_their_uncertainty))
:::

---

##  {#color-theory data-menu-title="# Basic Color Theory #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Want to design your own palette? Knowing just a smidge of color theory can help guide you.</p>
</div>

---

## {#select-hue data-menu-title="Selecting hues"} 

[Select hues using color wheels / pickers]{.slide-title}

<hr>

<!-- - **Primary colors** are the main colors in a given color system (e.g. light (RGB) = [red]{style="background-color:#FF0000; color=#FFFFFF;" .white-text}, [green]{style="background-color:#00FF00"} [blue]{style="background-color:#0000FF" .white-text}). *Primary colors cannot be produced by mixing other colors in that system together.* -->

<!-- - **Secondary colors** are made by *mixing two primary colors* in a given color system -->

<!-- - **Tertiary colors** are made by *mixing a primary and secondary color* in a given color system -->

<!-- Hues (pure colors) are found around the **outer edge of color wheels**, or by adjusting the HEX code (sliding scale), then ensuring that selector is set to the **far right edge of a color picker box**: -->

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
There are lots of different variations of color wheels, but look for hues along the **outer edge**:
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/color-wheels.png")
```

<br>
<br>

::: {.center-text .body-text-s .gray-text}
Common color models: RYB (used by painters), RGB (used in electonic displays), CMYK (used in modern printing). Image source: [medium.com](https://broworks.medium.com/color-guide-terms-definitions-and-useful-websites-6fa4f13bcb85)
:::
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
When using a color picker, **adjust the HEX code sliding scale** to pick a hue and ensure that the selector is set to the **far right edge** of the box:
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/google-color-picker.png")
```
::: {.center-text .body-text-s .gray-text}
There are lots of great color pickers out there, though [Google color picker](https://www.google.com/search?q=google+color+picker&sca_esv=598283965&ei=uVyjZdXpLtL3kPIPhdaOaA&ved=0ahUKEwiVqoat_9uDAxXSO0QIHQWrAw0Q4dUDCBA&uact=5&oq=google+color+picker&gs_lp=Egxnd3Mtd2l6LXNlcnAiE2dvb2dsZSBjb2xvciBwaWNrZXIyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyChAAGEcY1gQYsAMyDRAAGIAEGIoFGEMYsAMyDRAuGIAEGIoFGEMYsANI6QRQAFgAcAF4AZABAJgBAKABAKoBALgBA8gBAOIDBBgAIEGIBgGQBgo&sclient=gws-wiz-serp) is a quick one to navigate to. [HTML color codes](https://htmlcolorcodes.com/) is my personal favorite.
:::
:::

::::

<br>

<!-- ::: {.footer} -->
<!-- Common color models: RYB (used by painters), RGB (used in electonic displays), CMYK (used in modern printing). Image source: [medium.com](https://broworks.medium.com/color-guide-terms-definitions-and-useful-websites-6fa4f13bcb85) -->
<!-- ::: -->
<!-- ::: -->

<!-- ::: {.column width="50%" .center-text .body-text-m .teal-text} -->
<!-- We **associate meaning** with different hues (e.g. cold / sadness = blue, hot / anger = red). -->

<!-- These associations can **[differ among cultures](https://informationisbeautiful.net/visualizations/colours-in-cultures/)**. -->
<!-- ::: -->
<!-- :::: -->

<!-- ::: {.footer} -->
<!-- Fun side note: the primary colors of *print* are [cyan]{style="background-color:#00FFFF"}, [magenta]{style="background-color:#FF00FF" .white-text}, [yellow]{style="background-color:#FFFF00"} -- next time you reload your printer's ink, check out the colors printed on the calibration test page -->
<!-- ::: -->

::: {.notes}
- RGB: basis for all colors on the screen (with these primary colors, we can make all other colors digitally)
- RYB: known as painting color system (used by artists in painting)
- CMYK: used on modern printing
:::

---

## {#colors-harmonies1 data-menu-title="Color harmonies"} 

[Use color wheels identify color harmonies]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
knitr::include_graphics("images/week5/color-harmonies.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [htmlcolorcodes.com](https://htmlcolorcodes.com/color-picker/)
:::

. . . 

<br>

:::: {.columns}

::: {.column width="50%"}
<br>

::: {.center-text}
[blue-green]{style="background-color:#088F8F" .white-text} & [red-orange]{style="background-color:#FF4433" .white-text} are complementary and therefore offer the strongest possible contrast
:::

::: {.center-text .body-text-s}
Find descriptions of [blue-green](https://htmlcolorcodes.com/colors/blue-green/) & [red-orange](https://htmlcolorcodes.com/colors/red-orange/) on [htmlcolorcodes.com](https://htmlcolorcodes.com/)
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
library(palmerpenguins)
library(tidyverse)

ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar()
```
:::

::::

---

## {#hue-meaning data-menu-title="Hue meaning"} 

[Hues have associated meaning]{.slide-title}

<hr>

::: {.center-text}
We associate meaning with different hues (e.g. cold / sad = blue, hot / angry = red), and *importantly,* these [**associations can differ among cultures**]{.teal-text}.
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/colors-cultures.png")
```

::: {.center-text .body-text-s .gray-text}
Source: [Information is Beautiful](https://informationisbeautiful.net/visualizations/colours-in-cultures/)
:::

---

## {#multicultural-colors data-menu-title="Multicultural colors"} 

[Some associations span multiple cultures]{.slide-title}

<hr>

<br>
<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/colors-cultures-highlights.png")
```

::: {.center-text .body-text-s .gray-text}
Source: [Information is Beautiful](https://informationisbeautiful.net/visualizations/colours-in-cultures/)
:::

:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/hawkins-warming-stripes.png")
```

::: {.center-text .body-text-s .gray-text}
Source: Ed Hawkins [(showyourstripes.info)](https://showyourstripes.info/)
:::

:::

::::

---

## {#emotional-response-bake-off data-menu-title="Color & emotions (bake off)"} 

[Colors elicit emotional responses]{.slide-title}

<hr>

["lightness, brightness, and saturation can communicate the level of seriousness, intensity, and emotional weight in a visual work" ([Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/))]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/thompson-bake-off.png")
```

::: {.center-text .gray-text .body-text-s}
[The Great British Bake Off | Race to the Top](https://github.com/cararthompson/tidytuesdays?tab=readme-ov-file#2022-09---gbbo), by [Cara Thompson](https://www.cararthompson.com/) ([source code](https://github.com/cararthompson/tidytuesdays/blob/main/scripts/202210_gbbo.R))
:::
:::

::: {.column width="50%"}
<br>
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/scherer-legos.png")
```

::: {.center-text .gray-text .body-text-s}
[The LEGO Color Explosion](https://github.com/z3tt/TidyTuesday?tab=readme-ov-file#202236--lego-database-by-rebrickable), by [Cédric Scherer](https://www.cedricscherer.com/) ([source code](https://github.com/z3tt/TidyTuesday/blob/main/R/2022_36_LEGO_bricks.qmd))
:::
:::

::::
---

## {#emotional-response-covid-cases data-menu-title="Color & emotions (covid cases)"} 

[Colors elicit emotional responses]{.slide-title}

<hr>

["lightness, brightness, and saturation can communicate the level of seriousness, intensity, and emotional weight in a visual work" ([Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/))]{.body-text-s}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/jh-covid.png")
```

::: {.center-text .body-text-s .gray-text}
(Right) [COVID-19 tracker](https://coronavirus.jhu.edu/map.html) by the Johns Hopkins University (screenshot from 2020-07-27, courtesy of [Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/)). Red tends to elicit panic / fear. (Left) A map of confirmed COVID-19 cases by Datawrapper (screenshot from 2020-07-27, courtesy of [Cédric Scherer](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/)). Blues and greens help to avoid such a strong fearful emotional response.
:::

---

## {#emotional-response-covid-deaths data-menu-title="Color & emotions (covid deaths)"} 

[Colors elicit emotional responses]{.slide-title}

<hr>

<br>
<br>

::: {.body-text-m}
> "We show the **current or confirmed cases in another color than red**. The coronavirus is **not a death sentence**. Most infected people will survive. If you’re infected, you want to find yourself on a map as a blue (or yellow, or beige, or purple…) dot, not as a “attention, danger, run!”-screaming red dot. **Related, we show deaths in black, not red – it feels more respectful**."
:::

::: {.right-align-text .body-text-s}
-Lisa Charlotte Muth in [17 (or so) responsible live visualizations about the coronavirus, for you to use](https://blog.datawrapper.de/coronaviruscharts/), 

published March 3, 2020
:::

---

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/one-million-deaths.png")
```

<br>

::: {.footer}
Learn more about this award-winning visualization in an interview with Carrie Mifsud: [Capturing One Million Deaths on a Page: A Chat with NYT’s Carrie Mifsud](https://nightingaledvs.com/capturing-one-million-deaths-on-a-page-carrie-mifsud/)
:::

---

## {#avoid-pure-hue data-menu-title="Avoid pure hues"} 

[Using pure hues can be overwhelming]{.slide-title}

<hr>

Though it may be temping to use bright / bold colors to grab attention, it can lead to eye strain and make it more challenging for your readers to focus on your chart.

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/pure-hue1.png")
```

::: {.center-text .gray-text .body-text-s}
Image source: [5 pitfalls to avoid when working with color in data visualization](https://flourish.studio/blog/color-in-data-visualization/)
:::

---

## {#more-subdued data-menu-title="Use more subdued hues"} 

[Use more subdued colors instead]{.slide-title}

<hr>

Though it may be temping to use bright / bold colors to grab attention, it can lead to eye strain and make it more challenging for your readers to focus on your chart.

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/pure-hue2.png")
```

::: {.center-text .gray-text .body-text-s}
Image source: [5 pitfalls to avoid when working with color in data visualization](https://flourish.studio/blog/color-in-data-visualization/)
:::

---

## {#adjust-sat1 data-menu-title="Adjust saturation 1"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation** (i.e. the level of intensity of a color)]{.body-text-m}

[2. **adjust value**: tint (add white), tone (add gray), or shade (add black)]{.gray-text .body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (HEX #00FF33 / 132° on the color wheel) at 100% saturation
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-100sat.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (HEX #00FF33 / 132° on the color wheel) at 40% saturation
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-40sat.png")
```
:::

::::

::: {.footer}
Saturation adjusted using the HSL (Hue, Saturation, Lightness) color model. Read about [HSL vs HSV color models](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.) if you want a deeper dive.
:::

---

## {#adjust-sat2 data-menu-title="Adjust saturation 2"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation** (i.e. the level of intensity of a color)]{.body-text-m}

[2. **adjust value**: tint (add white), tone (add gray), or shade (add black)]{.gray-text .body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
The default chroma for ggplots is set to 100%
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar()
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Use `scale_*_hue()` to adjust chroma (saturation)
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = species, fill = sex)) +
  geom_bar() +
  scale_fill_hue(c = 70)
```

:::

::::

::: {.footer}
`scale_*_hue()` uses colors based on the [HCL color model](https://en.wikipedia.org/wiki/HCL_color_space).
:::

---

## {#adjust-lightness1 data-menu-title="Adjust lightness 1"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation** (i.e. the level of intensity of a color)]{.gray-text .body-text-m}

[2. **adjust value**: tint (add white), tone (add gray), or shade (add black)]{.body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (HEX #00FF33 / 132° on the color wheel) with lightness adjusted to 10% (more white) 
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-tint.png")
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (HEX #00FF33 / 132° on the color wheel) with lightness adjusted to 90% (more black)
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week5/green-shade.png")
```
:::

::::

::: {.footer}
Lightness adjusted using the HSL (Hue, Saturation, Lightness) color model. Read about [HSL vs HSV color models](https://en.wikipedia.org/wiki/HSL_and_HSV#:~:text=HSL%20stands%20for%20hue%2C%20saturation,hue%2C%20saturation%2C%20and%20intensity.) if you want a deeper dive.
:::

---

## {#adjust-lightness2 data-menu-title="Adjust lightness 2"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation** (i.e. the level of intensity of a color)]{.gray-text .body-text-m}

[2. **adjust value**: tint (add white), tone (add gray), or shade (add black)]{.body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.gray-text .body-text-m}

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
The default lightness for ggplots is set to 65%
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
  geom_point()
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Use `scale_*_hue()` to adjust lightness / darkness
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "80%"
ggplot(na.omit(penguins), aes(x = bill_length_mm, y = bill_depth_mm, color = sex)) +
  geom_point() +
  scale_color_hue(l = 45)
```

:::

::::

::: {.footer}
`scale_*_hue()` uses colors based on the [HCL color space](https://en.wikipedia.org/wiki/HCL_color_space). The default lightness value of 65(%) is good for filled areas but may be a bit light for points and lines.
:::

---

## {#adjust-opacity data-menu-title="Adjust opacity"} 

[A few approaches for subduing a pure hue]{.slide-title}

<hr>

[1. **adjust the saturation** (i.e. the level of intensity of a color)]{.gray-text .body-text-m}

[2. **adjust value**: tint (add white), tone (add gray), or shade (add black)]{.gray-text .body-text-m}

[3. **increase transparency** (e.g. using the `alpha` argument)]{.body-text-m}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
library(tidyverse)

data <- tribble(
  ~group, ~value,
  "A", 10,
  "B", 14, 
  "C", 12,
  "D", 15
)
```

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (HEX #00FF33 / 132° on the color wheel) with default opacity (100%)
:::

```{r}
ggplot(data, aes(x = group, y = value)) +
  geom_col(fill = "#00FF33", color = "gray7") + 
  theme_classic() +
  theme(axis.title = element_blank()) 
```
:::

::: {.column width="50%"}

::: {.center-text .body-text-s}
Green (HEX #00FF33 / 132° on the color wheel) with opacity reduced to 50%
:::

```{r}
ggplot(data, aes(x = group, y = value)) +
  geom_col(fill = "#00FF33", color = "gray7", alpha = 0.5) + 
  theme_classic() +
  theme(axis.title = element_blank())
```
:::

::::

---

## {#build-palettes data-menu-title="Building your own palette"} 

[Building your own color palette]{.slide-title}

<hr>

Be sure to consider what we've already discussed:

- [ensure that you're picking colorblind-friendly color combos]{.body-text-s}
- [use color wheels to identify color harmonies]{.body-text-s}
- [think carefully about what emotions / messages your color choices will convey]{.body-text-s}
- [avoid lots of pure / fully-saturated hues]{.body-text-s}

. . . 

:::: {.columns}

::: {.column width="50%"}
<br>
And also consider some other important sources of inspiration: 

- [your company or organization's brand / logo]{.body-text-s}
- [steal colors from your favorite / relevant images using tools like [Color Thief](https://lokeshdhakar.com/projects/color-thief/)]{.body-text-s}
- [use a randomized palette generator, like [coolers.co](https://coolors.co/?home) {{< fa arrow-right title="an arrow pointing to the right" >}}]{.body-text-s}
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
knitr::include_graphics("images/week5/coolers.png")
```
:::

::::

---

## {#apply-palettes data-menu-title="Applying your palette"} 

[Some common functions for scaling colors]{.slide-title2}

<hr>

**For qualitative (categorical) data <img src="images/week5/qualitative.png" alt="A qualitative color scale with 5 distinct colors: dark blue, medium blue, yellow, orange, red." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/> :**

- [`scale_*_manual()`]{.body-text-s}

**For quantitative (numeric) data:**

Unclassed palettes <img src="images/week5/unclassed-seq.png" alt="An unclassed sequential color scale which transitions from light to dark blue moving left to right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/> :

- [`scale_*_gradient()`: creates a two color gradient (low-high)]{.body-text-s}
- [`scale_*_gradient2()`: creates a diverging color gradient (low-mid-high)]{.body-text-s}
- [`scale_*_gradientn()`: creates a n-color gradient]{.body-text-s}

Classed palettes <img src="images/week5/classed-seq.png" alt="A classed sequential color scale with 5 binned colors ranging from light blue on the left to dark blue on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/> :

- [`scale_*steps()`: creates a two color binned gradient (low-high)]{.body-text-s}
- [`scale_*_steps2()`: creates a diverging binned color gradient (low-mid-high)]{.body-text-s}
- [`scale_*_stepsn()`: creates a n-color binned gradient]{.body-text-s}

::: {.center-text .body-text-s}
**Use the `fill` variant of the above functions for areas, bars, etc. and the `color` variant for points, lines, etc.**
:::

---

## {#save-palette data-menu-title="Save palette outside plot"} 

[Tip: Save your palette outside of your ggplot]{.slide-title2}

<hr>

[I recommend saving your palette to a named vector *outside* of your ggplot -- this prevents lengthy palettes from creating cluttered ggplot code *and* allows you to reuse your palette across multiple plots:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")
```

[Here, we scale our colors for a categorical variable (species) using `scale_color_manual()`:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)
```

---

## {#set-color-names1 data-menu-title="Set color names 1"} 

[Tip: Set color names (1/2)]{.slide-title}

<hr>

[We should always be consistent with our colors. **E.g. if Gentoo penguins are blue in one plot, they should be blue in all plots.** Notice that our colors don't "stick" with the species they represent, but rather they're applied in the order that they appear in our palette:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")
```

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Adelie, Chinstrap & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Just Adelie & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "1-2"
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette)
```
:::

::::

---

## {#set-color-names2 data-menu-title="Set color names 2"} 

[Tip: Set color names (2/2)]{.slide-title}

<hr>

[Setting the names of our vector elements (colors) ensures that they stick with those factor levels across all of our visualizations:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
my_palette_named <- c("#32DE8A", "#E36414", "#0F4C5C")
names(my_palette_named) <- c("Adelie", "Chinstrap", "Gentoo")
```

:::: {.columns}

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Adelie, Chinstrap & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)
```
:::

::: {.column width="50%"}
::: {.center-text .body-text-s .gray-text}
Just Adelie & Gentoo penguins
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "1-2"
penguins |> 
  filter(species != "Chinstrap") |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_manual(values = my_palette_named)
```
:::

::::

---

## {#modify-df data-menu-title="Modify df"} 

[Tip: modify df to apply colors to observations]{.slide-title2}

<hr>

[The [`scale_*_identity()` functions](https://ggplot2.tidyverse.org/reference/scale_identity.html) allows you to map aesthetic values from your data frame to individual points. They will not produce a legend unless specified using `guide = "legend"`.]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
penguins |> 
  mutate(
    my_color = case_when(
      bill_length_mm < 40 ~ "#D7263D",
      between(bill_length_mm, 40, 50) ~ "#E4BB97",
      bill_length_mm > 50 ~ "#386150"
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_identity()
```

:::

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
penguins |> 
  mutate(
    my_color = case_when(
      body_mass_g > 6000 ~ "#D7263D",
      TRUE ~ "gray50"
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_identity(guide = "legend", 
                       name = "Body mass (g)", labels = c(">6000", "<= 6000"))
```

:::

::::

::: {.notes}
This isn't the only way to do this! Try creating a `highlight` variable in your data frame. See <https://andrewirwin.github.io/data-visualization/colour.html#highlighting> and
:::

---

## {#create-palette data-menu-title="Create your own palette"} 

[Create your own palettes!]{.slide-title}

<hr>

Create your own palettes and use them to scale colors in the plots below: 

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "90%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point(size = 4, alpha = 0.8) 
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "590%"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 
```
:::

::::

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

---

##  {#general-rules data-menu-title="# General rules #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">There are also some additional rules / guidelines that you should pretty much always abide by when selecting colors</p>
</div>

---

## {#saturation data-menu-title="Saturation"} 

[High saturation = greater / more important values]{.slide-title2}

<hr>

<br>

::: {.body-text-m .center-text}
It's okay to use saturated / brighter colors in moderation. 

*We tend to associate **more saturated** colors with **greater values**.*
:::

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/2020-election.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [New York Times](https://www.nytimes.com/interactive/2021/upshot/2020-election-map.html)
:::
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/ggdensity-saturation.png")
```

::: {.center-text .body-text-s .gray-text}
Image source: [`{ggdensity}` pkgdown site](https://jamesotto852.github.io/ggdensity/index.html). 
:::
:::

::::

---

## {#no-more-than-7 data-menu-title="No more than 7"} 

[No more than 7 colors]{.slide-title}

<hr>

::: {.center-text .body-text-m}
If you need more than seven colors, consider alternative chart types.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/7colors.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#consistency data-menu-title="Be consistent"} 

[Use colors consistently]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Ensure consistent use of colors across multiple visualizations that display the same groups.
:::

<br>


```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/consistent-colors.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#legend data-menu-title="Include legend"} 

[Explain what your colors encode]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Always include a color key, in the form of a traditional legend or otherwise.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/legend.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#highlight data-menu-title="Highlight"} 

[Highlight important values]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Use gray for less important groups / values, annotations, contextual information, etc.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/use-gray.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#intuitive-colors data-menu-title="Intuitive colors"} 

[Be predictable in your color choices]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Use intuitive colors (e.g. green for forest, blue for water) but avoid stereotypes (e.g. pink for women, blue for men)
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/intuitive-colors.png")
```


<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#gradient-low-high data-menu-title="Bright = low, dark = high"} 

[Bright = low, dark = high]{.slide-title}

<hr>

::: {.center-text .body-text-m}
In most cases, readers will associate bright colors with lower values and darker colors with higher values. Build gradients accordingly.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/low-high-choropleth.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#gradient-high-low data-menu-title="Bright = high, dark = low"} 

[Except in some cases. . .]{.slide-title}

<hr>

>"humans perceive bright colors on elevation maps to represent a high altitude, with darker colors representing naturally low-lying and shady areas like valley" (Cédric Scherer, [Colors and Emotions in Data Visualization](https://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/#:~:text=Dark%20and%20saturated%20colors%20are,perceived%20differently%20in%20different%20cultures.)) 

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/shasta.png")
```

::: {.center-text .body-text-s .gray-test}
Filled contour plot of Mt. Shasta. Image source: [EarthLab](https://www.earthdatascience.org/tutorials/visualize-digital-elevation-model-contours-matplotlib/)
:::
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week5/pohnpei.png")
```

::: {.center-text .body-text-s .gray-test}
USGS Digital Elevation Model of Pohnpei (Micronesia). Image source: [PacIOOS](https://www.pacioos.hawaii.edu/voyager-news/digital-elevation-models/)
:::
:::

::::

---

## {#gradients-continuous data-menu-title="Gradients for continuous data"} 

[Gradient palettes for continuous data only]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Most readers will associate dark colors with "high / important" and bright or light colors with "low / less". Using a gradient palette with categorical data may imply a ranking of categories where there shouldn't be.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/no-gradient-for-discrete.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#lightness-gradient data-menu-title="Lightness + hue"} 

[Use lightness, not just hue, to build gradients]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Gradients should also work in black and white.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/lightness-gradient.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

## {#two-hues data-menu-title="Two hues"} 

[Two hues are sometimes better than one]{.slide-title}

<hr>

::: {.center-text .body-text-m}
Readers are generally better able to distinguish colors on a gradient better if they are encoded through both lightness and two (sometimes three) carefully-selected hues.
:::

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/1-or-2-hues.png")
```

<br>

::: {.footer}
*Example from [What to consider when choosing colors for data visualization](https://blog.datawrapper.de/colors/), by Lisa Charlotte Muth*
:::

---

##  {#break data-menu-title="# Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ A coding exercise is up next! ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

---

##  {#making-map data-menu-title="# Map #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">Let's explore county-level precipitation data using a choropleth map. Importantly, we'll decide on a color palette / scale type and make any necessary adjustments.</p>
</div>

---

## {#choropleth data-menu-title="Choropleth"} 

[What's a choropleth?]{.slide-title}

<hr>

::: {.center-text}
Choropleths are maps that display the **spatial distribution of a variable** across divided geographical areas / regions, where variable is **encoded by color**. 
:::

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/geopandas-choropleth.png")
```

::: {.center-text .gray-text .body-text-s}
Choropleth by [Ramiro Gómez](https://ramiro.org/) using [GeoPandas](https://geopandas.org/en/stable/index.html) ([blog post](https://ramiro.org/notebook/geopandas-choropleth/))
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week5/hanna-farnsworth-2013.png")
```

::: {.center-text .gray-text .body-text-s}
Choropleth by [Hanna & Farnsworth (2013)](https://www.researchgate.net/publication/263851588_Visualizing_Virginia'_s_Changing_Electorate_Mapping_Presidential_Elections_from_2000_to_2012)
:::

:::

::::

. . . 

::: {.center-text}
Choosing the right color palette *and* scale type are critically important. Oftentimes, you'll need to adjust the default mapping of colors to accurately tell your story.
:::

---

## {#data data-menu-title="The Data"} 

[The Data]{.slide-title}

<hr>

[[NOAA National Centers for Environmental Information](https://www.ncei.noaa.gov/) (NCEI) is responsible for preserving, monitoring, assessing, and providing public access to the Nation's geophysical data and information.]{.body-text-s}

:::: {.columns}

::: {.column width="50%"}
<br>
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/ncei-logo1.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/ncei-logo2.png")
```
:::

::::

[Find public access to a massive inventory of climate data on their [Climate Monitoring](https://www.ncei.noaa.gov/access/monitoring/products/) page. Today's lesson will use the [Climate at a Glance](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/) collection. Specifically, **we'll be exploring how precipitation across the continental US over the past 5 years compares to the 20th century average.** To do so, we'll work with county-level precipitation data, accessed via the [County Mapping](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202312/60/value) portal.]{.body-text-s}

<!-- **we'll be exploring county-level precipitation data from October 2023, accessed via the [County Mapping](https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value) portal -- UPDATE THIS** -->

<!-- https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value -->

<!-- 5-year precip: https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202312/60/value -->

---

## {#shapefiles-simple-features data-menu-title="shapefiles & simple features"} 

[Working with shapefiles & simple features in R]{.slide-title2}

<hr>

<br>

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/week5/tigris.png")
```

::: {.center-text .gray-text .body-text-s}
We can use the [`{tigris}` package](https://github.com/walkerke/tigris) to download and use Census [TIGER/Line shapefiles](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) in R.
:::
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/week5/sf.gif")
```

::: {.center-text .body-text-s .gray-text}
The [`{sf}` package](https://r-spatial.github.io/sf/) provides tools for working with [simple features](https://r-spatial.github.io/sf/articles/sf1.html) in R. 
:::

:::

::::

---

## {#data-wrangling data-menu-title="Data wrangling"} 

[Data Wrangling]{.slide-title}

<hr>

<!-- Here, we'll wrangle our precipitation data, then join it with our US county data (courtesy of the [`{maps}` package](https://cran.r-project.org/web/packages/maps/index.html)): -->

```{r}
#| eval: false
#| echo: false
#| message: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(tigris)

#.........................get shape data.........................
county_geo <- tigris::counties(class = "sf", cb = TRUE) |> 
  shift_geometry()

#....................import precipitation data...................
precip_data <- read_csv(here::here("slides", "data", "county-jan19-dec23-precip.csv"), skip = 4)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle geometries  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~

county_geo_wrangled <- county_geo |>
  janitor::clean_names() |>
  rename(county = namelsad, state = state_name) |>
  filter(!state %in% c("Alaska", "Hawaii", "District of Columbia",
                       "United States Virgin Islands", "Puerto Rico", "American Samoa",
                       "Commonwealth of the Northern Mariana Islands", "Guam")) |>
  mutate(county = str_replace(string = county, pattern = " city", replacement = " City"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle precipitation data  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precip_wrangled <- precip_data |>
  janitor::clean_names() |>
  rename(county = name) |>
  filter(!county %in% c("Washington, D.C.")) |>
  mutate(county = str_replace(string = county, pattern = "Dona Ana County", replacement = "Doña Ana County")) |>
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>
  select(id, state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~
##  ~ join dfs  ----
##~~~~~~~~~~~~~~~~~~

# join dfs (see https://github.com/tidyverse/ggplot2/issues/3936 & https://map-rfun.library.duke.edu/032_thematic_mapping_geom_sf.html) -------
joined_precip_geom <- full_join(county_geo_wrangled, precip_wrangled) #|>
  #drop_na(perc_change)
```

```{r}
#| eval: false
#| echo: false
#| message: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(tigris)

#.........................get shape data.........................
county_geo <- tigris::counties(class = "sf", cb = TRUE) |> 
  shift_geometry()

#....................import precipitation data...................
precip_data <- read_csv(here::here("week5", "data", "county-jan19-dec23-precip.csv"), skip = 4)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle geometries  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~

county_geo_wrangled <- county_geo |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county & state cols ----
  rename(county = namelsad, state = state_name) |>
  
  # remove states / territories that we don't have precip data for ----
  filter(!state %in% c("Alaska", "Hawaii", "District of Columbia",
                       "United States Virgin Islands", "Puerto Rico", "American Samoa",
                       "Commonwealth of the Northern Mariana Islands", "Guam")) |>
  
  # capitalize "city" (VA) ----
  mutate(county = str_replace(string = county, pattern = " city", replacement = " City"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle precipitation data  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precip_wrangled <- precip_data |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county col ----
  rename(county = name) |>
  
  # filter out DC ----
  filter(!county %in% c("Washington, D.C.")) |>
  
  # update name to match that in county_geo df ----
  mutate(county = str_replace(string = county, pattern = "Dona Ana County", replacement = "Doña Ana County")) |>
  
  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>
  
  # calculate % change ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>
  
  # select, rename, reorder cols ----
  select(id, state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~
##  ~ join dfs  ----
##~~~~~~~~~~~~~~~~~~

# join dfs (be sure to join precip TO sf object) -------
joined_precip_geom <- full_join(county_geo_wrangled, precip_wrangled) #|>
  #drop_na(perc_change)
```

```{r}
#| eval: true
#| echo: false
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(maps)

#.........................get shape data.........................
states <- map_data("state")
counties <- map_data("county")

#....................import precipitation data...................
precip_counties <- read_csv(here::here("slides", "data", "county-jan19-dec23-precip.csv"), skip = 4) |>
  janitor::clean_names()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..............update names of counties df variables.............
us_counties <- counties |>

  # select / rename cols of interest ----
  select(state = region, county = subregion, long, lat, group, order) |>

  # make all county & state names Title Case ----
  mutate(county = str_to_title(county),
         state = str_to_title(state)) |>

  # fix different spellings so that they match county names in precip data ----
  mutate(county = case_when(
    county == "De Kalb" ~ "DeKalb",
    county == "De Soto" ~ "DeSoto", # works for FL & MI
    county == "Du Page" ~ "DuPage",
    county == "La Porte" ~ "LaPorte",
    county == "Obrien" ~ "O'Brien",
    county == "Prince Georges" ~ "Prince George's",
    county == "Queen Annes" ~ "Queen Anne's",
    county == "Ste Genevieve" ~ "Ste. Genevieve",
    county == "La Moure" ~ "LaMoure",
    state == "Texas" & county == "De Witt" ~ "DeWitt",
    # county == "St. Marys" ~ "St. Mary's", # isn't working??
    TRUE ~ county
    )) |>
  mutate(county = str_replace(string = county, pattern = "St ", replacement = "St. ")) |>

  # remove DC & Yellowstone National Park ----
  filter(!state %in% c("District Of Columbia")) |>
  filter(!county %in% c("Yellowstone National"))


#..........clean precip data & make sure var names match.........
precip_counties_wrangled <- precip_counties |>

  # more intuitive col name ----
  rename(county = name) |>

  # make all county & state names lower case ----
  mutate(county = str_to_lower(county),
         state = str_to_lower(state)) |>

  # remove recurring patterns ----
  mutate(county = str_remove(county, pattern = " county")) |> # across all county names
  mutate(county = str_remove(county, pattern = " parish")) |> # LA

  # make state & county names Title Case again ----
  mutate(county = str_to_title(county),
         state = str_to_title(state)) |>

  # fix different spellings so that they match county names in precip data ----
  mutate(county = case_when(
    county == "Dekalb" ~ "DeKalb",
    county == "Desoto" ~ "DeSoto", # works for FL & MI
    state == "Louisiana" & county == "De Soto" ~ "DeSoto",
    county == "Dupage" ~ "DuPage",
    county == "Lasalle" ~ "La Salle",
    county == "Laporte" ~ "LaPorte",
    county == "O'brien" ~ "O'Brien",
    county == "Lamoure" ~ "LaMoure",
    state == "Texas" & county == "Dewitt" ~ "DeWitt",
    county == "St. Mary's" ~ "St. Marys",
    county == "Suffolk City" ~ "Suffolk",
    county == "Hampton City" ~ "Hampton",
    county == "Virginia Beach City" ~ "Virginia Beach",
    county == "Newport News City" ~ "Newport News",
    county == "Norfolk City" ~ "Norfolk",
    TRUE ~ county
  )) |>

  # remove DC & other non-counties
  filter(!county %in% c("Washington, D.c.", "Alexandria City", "Bristol City")) |>

  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>

  # calculate % change ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>

  # select & rename cols ----
  select(state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ used to identify which county names don't match across dfs  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# unique_us_counties <- us_counties |>
#   distinct(state, county)
#
# unique_precip_counties <- precip_counties_wrangled |>
#   distinct(state, county)
#
# missing_from_us_counties <- anti_join(unique_precip_counties, unique_us_counties) |>
#   rename(county_in_us = county)
#
# missing_from_precip_counties <- anti_join(unique_us_counties, unique_precip_counties) |>
#   rename(county_in_precip = county)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ ----------------------------------------------------------  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#............................join dfs............................
joined_precip_us_counties <- full_join(precip_counties_wrangled, us_counties)
```

```{r}
#| eval: false
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(maps)

#.........................get shape data.........................
states <- map_data("state")
counties <- map_data("county")

#....................import precipitation data...................
precip_counties <- read_csv(here::here("week5", "data", "county-jan19-dec23-precip.csv"), skip = 4) |>
  janitor::clean_names()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..............update names of counties df variables.............
us_counties <- counties |>

  # select / rename cols of interest ----
  select(state = region, county = subregion, long, lat, group, order) |>

  # make all county & state names Title Case ----
  mutate(county = str_to_title(county),
         state = str_to_title(state)) |>

  # fix different spellings so that they match county names in precip data ----
  mutate(county = case_when(
    county == "De Kalb" ~ "DeKalb",
    county == "De Soto" ~ "DeSoto",
    county == "Du Page" ~ "DuPage",
    county == "La Porte" ~ "LaPorte",
    county == "Obrien" ~ "O'Brien",
    county == "Prince Georges" ~ "Prince George's",
    county == "Queen Annes" ~ "Queen Anne's",
    county == "Ste Genevieve" ~ "Ste. Genevieve",
    county == "La Moure" ~ "LaMoure",
    state == "Texas" & county == "De Witt" ~ "DeWitt",
    TRUE ~ county
    )) |>
  mutate(county = str_replace(string = county, pattern = "St ", replacement = "St. ")) |>

  # remove DC & Yellowstone National Park ----
  filter(!state %in% c("District Of Columbia")) |>
  filter(!county %in% c("Yellowstone National"))


#..........clean precip data & make sure var names match.........
precip_counties_wrangled <- precip_counties |>

  # more intuitive col name ----
  rename(county = name) |>

  # make all county & state names lower case ----
  mutate(county = str_to_lower(county),
         state = str_to_lower(state)) |>

  # remove recurring patterns ----
  mutate(county = str_remove(county, pattern = " county")) |>
  mutate(county = str_remove(county, pattern = " parish")) |>

  # make state & county names Title Case again ----
  mutate(county = str_to_title(county),
         state = str_to_title(state)) |>

  # fix different spellings so that they match county names in precip data ----
  mutate(county = case_when(
    county == "Dekalb" ~ "DeKalb",
    county == "Desoto" ~ "DeSoto",
    state == "Louisiana" & county == "De Soto" ~ "DeSoto",
    county == "Dupage" ~ "DuPage",
    county == "Lasalle" ~ "La Salle",
    county == "Laporte" ~ "LaPorte",
    county == "O'brien" ~ "O'Brien",
    county == "Lamoure" ~ "LaMoure",
    state == "Texas" & county == "Dewitt" ~ "DeWitt",
    county == "St. Mary's" ~ "St. Marys",
    county == "Suffolk City" ~ "Suffolk",
    county == "Hampton City" ~ "Hampton",
    county == "Virginia Beach City" ~ "Virginia Beach",
    county == "Newport News City" ~ "Newport News",
    county == "Norfolk City" ~ "Norfolk",
    TRUE ~ county
  )) |>

  # remove DC & other non-counties
  filter(!county %in% c("Washington, D.c.", "Alexandria City", "Bristol City")) |>

  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>

  # calculate % change ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>

  # select & rename cols ----
  select(state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ used to identify which county names don't match across dfs  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# unique_us_counties <- us_counties |>
#   distinct(state, county)
#
# unique_precip_counties <- precip_counties_wrangled |>
#   distinct(state, county)
#
# missing_from_us_counties <- anti_join(unique_precip_counties, unique_us_counties) |>
#   rename(county_in_us = county)
#
# missing_from_precip_counties <- anti_join(unique_us_counties, unique_precip_counties) |>
#   rename(county_in_precip = county)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ ----------------------------------------------------------  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#............................join dfs............................
joined_precip_us_counties <- full_join(precip_counties_wrangled, us_counties)
```

---

## {#base-map data-menu-title="Create base map"} 

[Start by creating a base map]{.slide-title}

<hr>

```{r}
#| eval: false
#| echo: false
#| output-location: column
base_map <- ggplot(joined_precip_us_counties) +
  geom_sf(aes(fill = perc_change), linewidth = 0.1) +
  labs(title = "5-year precipitation compared with the 20th century average",
       subtitle = "January 2019 - December 2023",
       caption = "Source: National Centers for Environmental Information") +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    plot.caption = element_text(face = "italic", margin = margin(t = 20, r = 10, b = 0, l = 0))
  )

base_map
```

```{r}
#| eval: true
#| echo: true
#| output-location: column
# 'group' controls whether adjacent points are connected by lines (each county is a "group," therefore points are connected) ----
base_map <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +

  # plot precip values by county; geom_polygon() drawn lines between points and “closes them up” (i.e. draws a line from the last point back to the first point) ----
  geom_polygon(data = joined_precip_us_counties, aes(fill = perc_change)) +

  # darken state lines ----
  geom_polygon(color = "#2F2D2C", fill = NA, linewidth = 0.1) +

  # update labels ----
  labs(title = "5-year precipitation compared with the 20th century average",
       caption = "Source: National Centers for Environmental Information") +

  # set theme to clean up appearance ----
  theme_void() +

  # theme adjustments ----
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    plot.caption = element_text(face = "italic", margin = margin(t = 20, r = 0, b = 0, l = 0))
  )

base_map
```

::: {.center-text}
This looks a bit wonky, so we'll need to specify a projection, next.
:::

::: {.footer}
[Eric C. Anderson's](https://github.com/eriqande) [Making Maps with R](https://eriqande.github.io/rep-res-web/lectures/making-maps-with-R.html) tutorial was a wonderful resource in getting started with the `{maps}` package.
:::

---

## {#map-projection data-menu-title="Map projection"}

[Apply a Mercator projection]{.slide-title}

<hr>

[Lambert conformal conic](https://en.wikipedia.org/wiki/Lambert_conformal_conic_projection) and [Mercator projections](https://en.wikipedia.org/wiki/Mercator_projection) are both commonly used for mapping the United States. Here, we'll apply the latter:

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
base_map_proj <- base_map +
  coord_map(projection = "mercator")

base_map_proj
```

::: {.notes}
Alternatively:

- fix the relationship between lat & long by using `coord_fixed(1.3)`
- apply a Lambert conformal projection, conic projection, using `coord_fixed(projection = "conic", lat0 = 30)`
- NOTE: `coord_map()` has been been superceded by `coord_sf()`: https://ggplot2.tidyverse.org/reference/coord_map.html
:::

---

## {#decide-on-scale-type data-menu-title="Decide on scale type"} 

[Classed or unclassed color scale?]{.slide-title}

<hr>

We've landed on a **diverging color palette**, but should we use a classed (aka binned) or unclassed (aka continuous) palette?

<br>

. . . 

**Use a [classed]{.teal-text} color scale if you want to [communicate statistical brackets]{.teal-text}:** <img src="images/week5/classed.png" alt="A classed color scale with 5 binned colors ranging from dark green on the left to dark red on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>

  - [the focus is on which data units fall into pre-defined classes, rather than overall pattern]{.body-text-s}
  - [best if you want you audience to read values (gets more difficult with more classes; easier with interactive visualizations)]{.body-text-s}
  - [the more classes you have, the more nuanced your map becomes]{.body-text-s}

. . . 

**Use an [unclassed]{.teal-text} color scale if you want to [show general patterns]{.teal-text}:** <img src="images/week5/unclassed.png" alt="An unclassed color scale with colors that smoothly transition from dark green on the left to dark red on the right." style="display: inline-block; margin: 0; position: relative; top: 3px; width:80px;height:20px;"/>

  - [the focus is on general patterns, rather than which statistical brackets regions fall into]{.body-text-s}
  - [best if you don't want to interpret for your reader -- it makes it easier to see outliers, transitions to and comparisons with neighboring regions]{.body-text-s}
  
::: {.footer}
Adapted from [When to use classed and when to use unclassed color scales](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/), by Lisa Charlotte Muth
:::

---

## {#start-unclassed data-menu-title="Start unclassed"} 

[Start with an unclassed scale]{.slide-title}

<hr>
  
<br>
  
>“The unclassed choropleth is the most exact representation of the data model possible,” 

::: {.right-align-text}
-Judith A. Tyner, in [Priciples of Map Design](https://www.amazon.com/Principles-Map-Design-Judith-Tyner/dp/1462517129)
:::
  
<br>

. . . 

> "No matter if you decide for a classed map at the end, you should **start your process by looking at an unclassed map**. This will help you see subtle differences between regions and make a conscious decision if and how you should simplify them."

::: {.right-align-text}
-Lisa Charlotte Muth, in [When to use classed and when to use unclassed color scales](https://blog.datawrapper.de/classed-vs-unclassed-color-scales/)
:::

. . . 

<br>

::: {.center-text .body-text-m}
**We'll heed this advice and start with an unclassed map!**
:::

---

## {#decide-on-palette data-menu-title="Decide on palette"} 

[Pick a color palette!]{.slide-title}

<hr>

Recall [from earlier](https://samanthacsik.github.io/EDS-240-data-viz/slides/week5.1-colors-slides.html#/suggested-colors) that precipitation data is often encoded using a **brown / blue** color scheme (with drier conditions falling on the brown side and wetter conditions falling on the blue side). 

Lucky for us, **RColorBrewer** has this exact palette. **Let's use [all 11 hues]{.teal-text} for our unclassed map**:

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Preview the palette using `display.brewer.pal()` with our desired number of hues:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.pal(n = 11, name = 'BrBG')
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Save the HEX codes to a named object using `brewer.pal()` (we'll call this in our plot later):
:::

```{r}
#| eval: true
#| echo: true
my_brew_palette11 <- RColorBrewer::brewer.pal(n = 11, name = 'BrBG')
my_brew_palette11
```
:::

::::
  
---

## {#apply-palette-unclassed data-menu-title="Apply our palette (unclassed)"} 

[Apply our palette & adjust colorbar]{.slide-title}

<hr>

[Here, we leverage the awesome `{scales}` package to add **%s** to the colorbar labels and set our breaks. We also use `guides()` + `guide_colorbar()` to update label positioning and colorbar size:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
base_map_proj + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```

---

## {#inspect-color-scale1 data-menu-title="Inspect color scale"} 

[Inspect the color scale -- anything off?]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
base_map_proj + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```

---

## {#misleading data-menu-title="Misleading colors"} 

[Our color mapping may be misleading]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
base_map_proj + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```

<br>

::: {.center-text}
**0%** (i.e. no change between 5-year precipitation and 20th century average) **is currently on the bluer side of our color scale**, rather than on the off-white color that's at the center of our palette. 

As a result, **our map may be misleading** -- it would appear as if more counties received higher-than-average precipitation than in actuality.
:::

---

## {#rescale-colorbar data-menu-title="Rescale centerpoint"} 

[Rescale the colorbar so that 0 is at the center]{.slide-title2}

<hr>

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "5-8"
base_map_proj + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(joined_precip_us_counties$perc_change),
                         0,
                         max(joined_precip_us_counties$perc_change)))) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```

---

## {#final-unclassed data-menu-title="Final unclassed map"} 

[Our final unclassed map]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| code-line-numbers: "5-8"
base_map_proj + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(joined_precip_us_counties$perc_change),
                         0,
                         max(joined_precip_us_counties$perc_change)))) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```

::: {.footer}
We'll come back to this map in our typography lesson to update and style our text elements.
:::

---

## {#classed-palette data-menu-title="Classed palette"} 

[Modify our palette for our classed map]{.slide-title}

<hr>

We'll be using the same color palette for our classed map, but this time, **let's keep [10 hues]{.teal-text} (this will drop the middle-most off-white hue)**:

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Preview the palette using `display.brewer.pal()` with our desired number of hues:
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
RColorBrewer::display.brewer.pal(n = 10, name = 'BrBG')
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Save the HEX codes to a named object using `brewer.pal()` (we'll call this in our plot later):
:::

```{r}
#| eval: true
#| echo: true
my_brew_palette10 <- RColorBrewer::brewer.pal(n = 10, name = 'BrBG')
my_brew_palette10
```
:::

::::

[By dropping the off-white hue, we can construct our scale so that **0%** sits at the break point between brown and blue shades -- any county that received more than the historical average will be a shade of blue, and any that received less will be a shade of brown.]{.body-text-s}

---

## {#apply-palette-classed data-menu-title="Apply our palette (classed)"} 

[By default, our resolution is pretty low]{.slide-title}

<hr>

We only get 4 bins by default, which means we lose a lot of detail in our map:

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| out-width: "100%"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```

---

## {#increase-classes data-menu-title="Increase # of classes"} 

[More classes = more nuance]{.slide-title}

<hr>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Breaks set to a width of **10**
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "4"
base_map + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::: {.column width="%"}

::: {.center-text .body-text-s .gray-text}
Breaks set to a width of **5** & rescaled with 0 at center
:::

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
#| code-line-numbers: "4-8"
base_map_proj + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    values = scales::rescale(x = c(
                         min(joined_precip_us_counties$perc_change),
                         0,
                         max(joined_precip_us_counties$perc_change))), 
                    breaks = scales::breaks_width(width = 5)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::::

::: {.footer}
*But* the more classes you have, the longer it will (likely) take a reader to interpret values.
:::

---

## {#unclassed-classed data-menu-title="Unclassed vs. classed"} 

[Unclassed vs. classed maps]{.slide-title}

<hr>

What stories to each of these maps tell? When might you choose one over the other? What additional modifications might you make?

<br>

:::: {.columns}

::: {.column width="50%"}

::: {.center-text .body-text-s .gray-text}
Unclassed map:
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
base_map_proj + 
  scale_fill_gradientn(colors = my_brew_palette11,
                       labels = scales::label_percent(scale = 1),
                       breaks = scales::breaks_width(width = 10),
                       values = scales::rescale(x = c(
                         min(joined_precip_us_counties$perc_change),
                         0,
                         max(joined_precip_us_counties$perc_change)))) +
  guides(fill = guide_colorbar(label.hjust = 0.5,
                               barwidth = 15, barheight = 0.75))
```
:::

::: {.column width="%"}

::: {.center-text .body-text-s .gray-text}
Classed map:
:::

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
base_map_proj + 
  scale_fill_stepsn(colors = my_brew_palette10,
                    labels = scales::label_percent(scale = 1),
                    breaks = scales::breaks_width(width = 10)) +
  guides(fill = guide_colorsteps(barwidth = 25, barheight = 0.75))
```
:::

::::

---

## {#multiple-maps data-menu-title="Multiple maps"} 

[Choropleths are powerful in multiples]{.slide-title}

<hr>

Several maps side-by-side can help you better spot important patterns and tell a more complete story.

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week5/nyt-precip.png")
```

::: {.footer}
[What's Going On in This Graph? | New Normal U.S. Precipitation](https://www.nytimes.com/2021/09/16/learning/whats-going-on-in-this-graph-new-normal-us-precipitation.html) (New York Times)
:::

---

##  {#end-break data-menu-title="# END #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">See you next week!</p>
<p class="caption-text">*~ This is the end of Lesson 2 (of 2) ~*</p>
</div>


<!-- ##  {#end-break data-menu-title="# Break #" background="#047C90"} -->

<!-- <div class="page-center vertical-center"> -->
<!-- <p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p> -->
<!-- <p class="caption-text">*~ This is the end of Lesson 1 (of 3) ~*</p> -->
<!-- </div> -->

<!-- ```{r} -->
<!-- countdown::countdown( -->
<!--   minutes = 5, -->
<!--   # left = 0, right = 0, -->
<!--   # Fanfare when it's over -->
<!--   play_sound = TRUE, -->
<!--   color_border              = "#FFFFFF", -->
<!--   color_text                = "#7aa81e", -->
<!--   color_running_background  = "#7aa81e", -->
<!--   color_running_text        = "#FFFFFF", -->
<!--   color_finished_background = "#ffa07a", -->
<!--   color_finished_text       = "#FFFFFF", -->
<!--   font_size = "2em", -->
<!--   ) -->
<!-- ``` -->

