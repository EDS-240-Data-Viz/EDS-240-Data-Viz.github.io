---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 3.2]{.custom-title}

[*Visualizing Distributions*]{.custom-subtitle}

<hr class="hr-teal">

[Week 3 | January 22^nd^, 2024]{.custom-subtitle3}

---

## {#viz-dist data-menu-title="Visualizing distributions"} 

["Core" distribution charts]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
library(palmerpenguins)
library(tidyverse)
library(ggridges)
```

:::: columns

::: {.column width="33%"}
::: {.center-text}
**Histograms**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, fill = species)) +
  geom_histogram(alpha = 0.5, position = "identity")
```
:::

::: {.column width="33%"}
::: {.center-text}
**Density plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, fill = species)) +
  geom_density(alpha = 0.5)
```
:::

::: {.column width="33%"}
::: {.center-text}
**Ridgeline plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  ggridges::geom_density_ridges(alpha = 0.5)
```
:::

::::

:::: columns

::: {.column width="50%"}
::: {.center-text}
**Box plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_boxplot(alpha = 0.5)
```
:::

::: {.column width="50%"}
::: {.center-text}
**Violin plots**
:::
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "65%"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_violin(alpha = 0.5)
```
:::

::::

::: footnote
::: {.center-text}
[Examples show the distribution of penguin body masses (g) for Adelie, Chinstrap & Gentoo penguins.]{.body-text-s .gray-text} 
:::
:::

---

## {#mko-temps-intro data-menu-title="About the data"} 

[The data: bottom temperatures at Mohawk Reef]{.slide-title2}

<hr>

The [Santa Barbara Coastal Long Term Ecolgical Research (SBC LTER)](https://sbclter.msi.ucsb.edu/) site was established in 2000 to understand the ecology of coastal kelp forest ecosystems. A number of coastal rocky reef sites are outfitted with instrumentation that collect long-term monitoring data. 

:::: columns

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
#| fig-alt: "A photo of kelp fronds rising towards the ocean's surface."
knitr::include_graphics("images/week3/sbc-logo2.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "The Santa Barbara Coastal Long Term Ecological Research site's logo. A creek running down from green mountains to coastal waters meets with ocean waves. Bull kelp floats beneath the surface of the ocean."
knitr::include_graphics("images/week3/sbc-kelp.png")
```
:::

::::

We'll be exploring **bottom temperatures recorded at Mohawk Reef (Santa Barbara, CA)**, a near-shore rocky reef and one of the Santa Barbara Coastal (SBC) LTER research sites.

---

## {#mko-temps-wrangling data-menu-title="Wrangle data"} 

[Data wrangling]{.slide-title}

<hr>

Data are imported directly from the [EDI Data Portal](https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-sbc&identifier=77). Explore the metadata package online to learn more about these data.

```{r}
#| eval: true
#| echo: true
#..........................load packages.........................
library(tidyverse)
library(chron)
library(naniar)

#..........................import data...........................
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")

#..........................wrangle data..........................
mko_clean <- mko |>

  # keep only necessary columns ----
  select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |>

  # create date time column ----
  unite(date, year, month, day, sep = "-", remove = FALSE) |>
  mutate(time = chron::times(as.numeric(decimal_time))) |>
  unite(date_time, date, time, sep = " ") |>

  # coerce data types ----
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"),
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day),
         Temp_top = as.numeric(Temp_top),
         Temp_mid = as.numeric(Temp_mid),
         Temp_bot = as.numeric(Temp_bot)) |>

  # add month abbreviation ----
  mutate(month_name = as.factor(month.name[month])) |>

  # replace 9999s with NAs ----
  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |>

  # select/reorder desired columns ----
  select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)

#......................explore missing data......................

# counts and percentage of missing data by year ----
see_NAs <- mko_clean %>%
  group_by(year) %>%
  naniar::miss_var_summary() |>
  filter(variable == "Temp_bot")

# visualize missing Temp_bot ----
bottom <- mko_clean |> select(Temp_bot)
missing_temps <- naniar::vis_miss(bottom)
```

---

## {#hist-overview data-menu-title="Histogram overview"} 

[Histograms]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- Histograms are used to represent the **distribution of a *numeric* variable(s)**, which is **cut into several bins**. The number of observations per bin is represented by the height of the bar.

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable with lots of values
- meaningful differences between values
- `{ggplot2}` package

[**Important considerations:**]{.teal-text} 

- bin width
- number of groups that you're comparing (<=3)
:::

::: {.column width="50%"}
<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
# ggplot(penguins, aes(x = body_mass_g, fill = species)) +
#   geom_histogram(alpha = 0.5, position = "identity")
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```
:::

::::

---

## {#hist-group-num data-menu-title="Histogram group number"} 

[Histograms - best with <=3 groups]{.slide-title}

<hr>

Twelve groups is too many groups!
```{r}
#| eval: true
#| echo: true
ggplot(mko_clean, aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5)
```

---

## {#hist-updates data-menu-title="Histogram updates"} 

[Histograms - adjustments]{.slide-title}

<hr>

::: panel-tabset

## Three months (groups)

Let's instead compare three months: April (generally the coldest month), October (generally a hot month), June (somewhere in between):
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "1-2,5"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## Update bin widths

Modify `binwidth` -- does a bin width of 1 (degree Celsius) make sense?
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "4"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

:::

---

## {#density-overview data-menu-title="Density plot overview"} 

[Density plots]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- A smoothed version of a histogram. Density plots are representations of the **distribution of a *numeric* variable(s)**, which uses a **[kernel density estimate](https://chemicalstatistician.wordpress.com/2013/06/09/exploratory-data-analysis-kernel-density-estimation-in-r-on-ozone-pollution-data-in-new-york-and-ozonopolis/)** to show the probability density function of the variable.

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable with lots of values
- `{ggridges}` package

[**Important considerations:**]{.teal-text} 

- can be misleading with small data sets
- bandwidth
- number of groups that you're comparing (<=3)
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "right"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```
:::

::::

---

## {#density-group-num data-menu-title="Density group number"} 

[Density plots - best with <=3 groups]{.slide-title}

<hr>

Similar to the historam, twelve groups is too many groups!
```{r}
#| eval: true
#| echo: true
ggplot(mko_clean, aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5)
```

---

## {#density-updates data-menu-title="Density plot updates"} 

[Density plots - adjustments]{.slide-title}

<hr>

::: panel-tabset

## Three months (groups)

Let's instead compare three months: April (generally the coldest month), October (generally a hot month), June (somewhere in between):
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "1-2,5"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(alpha = 0.5) + 
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## Update band widths

Modify bandwidth -- by declaring a multiplier of the default bandwidth adjustment
```{r}
#| eval: true
#| echo: true
#| out-width: "50%"
#| code-line-numbers: "4"
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  geom_density(adjust = 1/2, alpha = 0.5) + 
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

:::

---

## {#ridgeline-overview data-menu-title="Ridgeline plot overview"} 

[Ridgeline plots]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- Ridgeline plots show the **distribution of a numeric variable** for **multiple groups**.

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable with lots of values
- medium to high group numbers
- `{ggridges}` package

[**Important considerations:**]{.teal-text} 

- work best when you have > 6 groups
- works well when there is a clear pattern in the result (e.g. if there is an obvious ranking in groups)
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  ggridges::geom_density_ridges(alpha = 0.5)
```
:::

::::

---

## {#boxplot-overview data-menu-title="Box plot overview"} 

[Box plots]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- [Box plots **summarize the distribution of a numeric variable for one or serveral groups**, providing the median (line that divides the box), the upper (Q3) and lower (Q1) [quartiles](https://en.wikipedia.org/wiki/Quartile) (ends of the box), the highest and lowest values, excluding outliers (the whiskers), and potential outliers (dots extending beyond the end of the whiskers).]{.body-text-s}

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable, often with multiple groups
- `{ggplot2}` package

[**Important considerations:**]{.teal-text} 

- box plots *summarize* data, meaning we can't see the underlying distribution (no way to know sample size)
- add jittered points on top, or if large sample size, consider a violin plot
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_boxplot(alpha = 0.5)
```
:::

::::

---

## {#violin-plot-overview data-menu-title="Violin plot overview"} 

[Violin plots]{.slide-title}

<hr>

[**What are they?**]{.teal-text} 

- [Violin plots visualize the **distribution of a numeric variable for one or several groups**, where the shape of the violin represents the density estimate of the variable (i.e. the more data points in a specific range, the larger the violin is for that range). They provide more information about the underlying distribution than a box plot.]{.body-text-s}

:::: columns 

::: {.column width="50%"}
[**Need:**]{.teal-text} 

- a numeric variable, often with multiple groups
- `{ggplot2}` package

[**Important considerations:**]{.teal-text}   

- order groups by median value can make it easier to understand  
- show sample size when comparing groups with very different distributions (e.g. half violin plot) 
:::

::: {.column width="50%"}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_violin(alpha = 0.5)
```
:::

::::

---

<!-- ## {#dist-numeric data-menu-title="Distribution of numeric vars"}  -->

<!-- [Distribution of a numeric variable(s)]{.slide-title2} -->

<!-- <hr> -->

<!-- ::: panel-tabset -->

<!-- ## Histogram -->

<!-- Histograms are used to represent the distribution of a **numeric** variable(s), which is **cut into several bins**. The number of observations per bin is represented by the height of the bar. -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| out-width: "50%" -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- ggplot(knz_bison, aes(x = animal_weight, fill = animal_sex)) + -->
<!--   geom_histogram(position = "identity", alpha = 0.7) -->
<!-- ``` -->

<!-- ## Density plot -->

<!-- Density plots are representations of the distribution of a **numeric** variable(s), which uses a **[kernel density estimate](https://chemicalstatistician.wordpress.com/2013/06/09/exploratory-data-analysis-kernel-density-estimation-in-r-on-ozone-pollution-data-in-new-york-and-ozonopolis/)** to show the probability density function of the variable. -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| out-width: "50%" -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- ggplot(knz_bison, aes(x = animal_weight, fill = animal_sex)) + -->
<!--   geom_density(alpha = 0.7) -->
<!-- ``` -->

<!-- ::: -->

<!-- --- -->

<!-- ## {#dist-num-considerations data-menu-title="Considerations (hist & dens)"}  -->

<!-- [Considerations]{.slide-title2} -->

<!-- <hr> -->

<!-- ::: panel-tabset -->

<!-- ## Bin width -->

<!-- **Try several bin widths, and make sure all bins are the same size.** By default, `geom_histogram()` uses 30 `bins`. Alternatively, adjust `binwidth`. -->

<!-- :::: columns -->

<!-- ::: {.column width="50%"} -->
<!-- [` binwidth = 50`:]{.body-text-s} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| out-width: "90%" -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- ggplot(knz_bison, aes(x = animal_weight, fill = animal_sex)) + -->
<!--   geom_histogram(position = "identity", alpha = 0.7, binwidth = 50) -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: {.column width="50%"} -->
<!-- [`binwidth = 500`:]{.body-text-s} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| out-width: "90%" -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- ggplot(knz_bison, aes(x = animal_weight, fill = animal_sex)) + -->
<!--   geom_histogram(position = "identity", alpha = 0.7, binwidth = 500) -->
<!-- ``` -->
<!-- ::: -->

<!-- :::: -->

<!-- ## Group number -->

<!-- **Comparing more than ~3 groups in the same histogram leads to cluttered / hard to read plots.** Instead, try a violin/box/ridgeline plot or faceting: -->

<!-- :::: columns -->

<!-- ::: {.column width="50%"} -->
<!-- [Too many groups...]{.body-text-s} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| out-width: "90%" -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- ggplot(pie_crab, aes(x = size, fill = site)) + -->
<!--   geom_histogram(position = "identity", alpha = 0.7) -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: {.column width="50%"} -->
<!-- [Also beware of unnecessary colors!]{.body-text-s} -->
<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: true -->
<!-- #| out-width: "90%" -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- ggplot(pie_crab, aes(x = size)) + -->
<!--   geom_histogram(position = "identity", alpha = 0.7) + -->
<!--   facet_wrap(~site) -->
<!-- ``` -->
<!-- ::: -->

<!-- :::: -->

<!-- ::: -->

<!-- --- -->

<!-- STACKED DENSITY CHARTS -->
<!-- MIRRORED DENSITY / HISTOGRAM -->

<!-- ## {#variants-num-alt data-menu-title="Variants (hist & dens)"}  -->

<!-- [Variants]{.slide-title3} -->

<!-- <hr> -->

<!-- ::: panel-tabset -->

<!-- ## Mirrorred -->

<!-- ```{r} -->
<!-- library(lterdatasampler) -->
<!-- library(tidyverse) -->

<!-- # ggplot(knz_bison, aes(x = animal_weight, fill = animal_sex)) + -->
<!-- #   geom_histogram(position = "identity", alpha = 0.7, binwidth = 500) -->

<!-- female_bison <- knz_bison |> filter(animal_sex == "F") -->
<!-- male_bison <- knz_bison |> filter(animal_sex == "M") -->

<!-- # bison_wrangled <- knz_bison |>  -->
<!-- #   mutate(animal_weight = ifelse(test = grepl("F", animal_sex) == TRUE,  -->
<!-- #                                 yes = animal_weight,  -->
<!-- #                                 no = animal_weight * -1)) -->

<!-- ggplot(aes(x = x)) +  -->
<!--   geom_histogram(male_bison, aes(x = animal_weight, y = ..density.., fill = "#69b3a2")) -->

<!-- ggplot(data, aes(x=x) ) + -->
<!--   geom_histogram( aes(x = var1, y = ..density..), fill="#69b3a2" ) + -->
<!--   geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") + -->
<!--   geom_histogram( aes(x = var2, y = -..density..), fill= "#404080") + -->
<!--   geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") + -->
<!--   theme_ipsum() + -->
<!--   xlab("value of x") -->
<!-- # ggplot() + -->
<!-- #   geom_histogram(male_bison, mapping = aes(x = animal_weight)) +  -->
<!-- #   geom_histogram(female_bison, mapping = aes(x = -(animal_weight), fill = "blue")) -->
<!-- ``` -->


<!-- ## Marginal plots -->

<!-- ::: -->

<!-- --- -->

