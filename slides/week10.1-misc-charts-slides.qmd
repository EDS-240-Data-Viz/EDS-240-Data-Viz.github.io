---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 10.1]{.custom-title}

[*Misc. charts: waffle & bump charts*]{.custom-subtitle}

<hr class="hr-teal">

[Week 10 | March 11^th^, 2024]{.custom-subtitle3}

---

## {#whats-a-waffle data-menu-title="What's a waffle chart?"}

[Waffle charts offer an alternative way to show parts-to-whole relationships]{.slide-title3}

<hr>

```{r}
#| eval: true
#| echo: false
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/week10/pie-waffle.png")
```
 
::: {.center-text .gray-text .body-text-s}
Image source: [How to visualise your data: parts-to-whole charts](https://culturecounts.cc/blog/how-to-visualise-your-data-parts-to-whole-charts), by Tom McKenzie
:::

---

## {#waffle-chart data-menu-title="Waffle chart"} 

[Waffle chart (seasonal Bigfoot sightings in CA)]{.slide-title2}

<hr>

[Anyone may report a [Bigfoot sighting](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-09-13) to the [Bigfoot Field Researchers Organization (BFRO)](https://www.bfro.net/). TidyTuesday featured these compiled BFRO reports on [2022-09-13](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-09-13).]{.body-text-s}

<br>

```{r}
#| eval: true
#| echo: false
#| message: false
#| fig-align: "center"
#| out-width: "100%"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(waffle)
library(showtext)

#..........................import data...........................
bigfoot <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-13/bigfoot.csv')

#..........................import fonts..........................
font_add_google(name = "Ultra", family = "ultra")
font_add_google(name = "Josefin Sans", family = "josefin")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ca_season_counts <- bigfoot |> 
  filter(state == "California") |> 
  group_by(season) |> 
  count(season) |> 
  filter(season != "Unknown") |> 
  arrange(match(season, c("Spring", "Summer", "Fall", "Winter"))) |> 
  ungroup() |> 
  mutate(season = fct_relevel(season, "Spring", "Summer", "Fall", "Winter"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                Waffle chart                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Winter, on the other hand, is a rare time to spot Sasquatch"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10, make_proportional = FALSE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], 
                                margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(family = "josefin",
                               size = 12),
    plot.background = element_rect(fill = plot_palette["beige"], 
                                   color = plot_palette["beige"]),
    plot.margin = margin(t = 2, r = 2, b = 2, l = 2, "cm")
  )
```

---

## {#waffle-chart-code data-menu-title="Waffle chart (code)"} 

[Waffle chart (seasonal Bigfoot sightings in CA)]{.slide-title2}

<hr>

<br>

```{r}
#| eval: false
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(waffle)
library(showtext)

#..........................import data...........................
bigfoot <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-13/bigfoot.csv')

#..........................import fonts..........................
font_add_google(name = "Ultra", family = "ultra")
font_add_google(name = "Josefin Sans", family = "josefin")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ca_season_counts <- bigfoot |> 
  filter(state == "California") |> 
  group_by(season) |> 
  count(season) |> 
  filter(season != "Unknown") |> 
  arrange(match(season, c("Spring", "Summer", "Fall", "Winter"))) |> 
  ungroup() |> 
  mutate(season = fct_relevel(season, "Spring", "Summer", "Fall", "Winter"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                waffle chart                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Winter, on the other hand, is a rare time to spot Sasquatch"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10, make_proportional = FALSE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], 
                                margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(family = "josefin",
                               size = 12),
    plot.background = element_rect(fill = plot_palette["beige"], 
                                   color = plot_palette["beige"]),
    plot.margin = margin(t = 2, r = 2, b = 2, l = 2, "cm")
  )
```

---

## {#prop-waffle data-menu-title="Proportional waffle"} 

[Proportional waffle chart (seasonal Bigfoot sightings in CA)]{.slide-title3}

<hr>

```{r}
#| eval: true
#| echo: false
#| message: false
#| fig-align: "center"
#| out-width: "100%"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          proportional waffle chart                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Only 10% of Sasquatch sightings occur in the winter"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10, make_proportional = TRUE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 1, r = 0, b = 0.3, l = 1, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], 
                                hjust = 0,
                               margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(family = "josefin",
                               size = 12),
    plot.background = element_rect(fill = plot_palette["beige"], 
                                   color = plot_palette["beige"]),
    plot.margin = margin(t = 1.5, r = 9, b = 1.5, l = 8, "cm")
  )
```

---

## {#prop-waffle-code data-menu-title="Proportional waffle (code)"} 

[Proportional waffle chart (seasonal Bigfoot sightings in CA)]{.slide-title3}

<hr>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "16,22,49"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          proportional waffle chart                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Only 10% of Sasquatch sightings occur in the winter"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts, aes(fill = season, values = n)) +
  geom_waffle(color = "white", size = 0.3, 
              n_rows = 10, make_proportional = TRUE) +
  coord_equal() +
  scale_fill_manual(values = season_palette) +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    plot.title = element_text(family = "ultra", 
                              size = 18, 
                              hjust = 0.5,
                              margin = margin(t = 1, r = 0, b = 0.3, l = 1, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(t = 0, r = 0, b = 0.5, l = 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"], 
                                hjust = 0,
                                margin = margin(t = 0.75, r = 0, b = 0, l = 0, "cm")),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(family = "josefin",
                               size = 12),
    plot.background = element_rect(fill = plot_palette["beige"], 
                                   color = plot_palette["beige"]),
    plot.margin = margin(t = 1.5, r = 9, b = 1.5, l = 8, "cm")
  )
```

---

## {#what-a-bump-chart data-menu-title="What's a bump chart?"} 

[Bump charts offer a way to visualize changes in rank over time]{.slide-title3}

<hr>

:::: {.columns}

::: {.column width="50%"}
<br>
<br>
<br>

They do not, however, provide information about the actual or relative magnitudes of difference between rankings. If that's important to show, consider an alternative chart type (or something like the ribbon bump chart to the right!).
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "90%"
knitr::include_graphics("images/week10/rapp-bump-charts.png")
```

::: {.center-text .body-text-s .gray-text}
[European flight ranking](https://github.com/AlbertRapp/PublicTidyTuesday/tree/main/2022_w28_euroflights), by [Albert Rapp](https://albert-rapp.de/)
:::
:::

::::

---

## {#bump-chart data-menu-title="Bump chart"} 

[Bump chart (highest paying occupations)]{.slide-title2}

<hr>
[
The [US Bureau of Labor Statistics](https://www.bls.gov/) provides data on occupations and earnings. TidyTuesday featured these compiled data on [2019-03-05](https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-03-05/readme.md) (these are the same data we used to create our dumbbell plot during lectures [4.1](https://samanthacsik.github.io/EDS-240-data-viz/slides/week4.1-rankings-slides.html#/dumbbell-plot-output) and [6.1](https://samanthacsik.github.io/EDS-240-data-viz/slides/week6.1-typography-slides.html#/updated-text)).]{.body-text-s}

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-asp: 0.7
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(ggbump)
library(ggtext)
library(showtext)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

#..........................import fonts..........................
font_add_google(name = "Passion One", family = "passion")
font_add_google(name = "Oxygen", family = "oxygen")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................rank occupations by salary...................
salary_rank_by_year <- jobs |> 
  select(year, occupation, total_earnings) |> 
  group_by(year) |> 
  mutate(
    rank = row_number(desc(total_earnings))
  ) |> 
  ungroup() |> 
  arrange(rank, year)

#..........get top 8 occupations for final year (2016)...........
top2016 <- salary_rank_by_year |>  
  filter(year == 2016, rank <= 8) |>  
  pull(occupation) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                 bump chart                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.................create palette & assign colors.................
occupations_palette <- viridisLite::magma(12)
occupation_colors <- c(
  "Physicians and surgeons" = occupations_palette[3],
  "Nurse anesthetists" = occupations_palette[4],
  "Dentists" = occupations_palette[5],
  "Architectural and engineering managers" = occupations_palette[6],
  "Lawyers" = occupations_palette[7], 
  "Podiatrists" = occupations_palette[8],
  "Chief executives" = occupations_palette[9],
  "Petroleum engineers" = occupations_palette[10]
)

plot_palette <- c(dark_purple = "#2A114E", 
                  dark_gray = "#6D6B71",
                  light_pink = "#FFF8F4")

#.......................create plot labels.......................
title <- "Top eight highest paying occupations in 2016"
subtitle <- "Medical professionals held onto the same top three spots across years, while <span style='color:#FEA873FF;'>**petroleum engineers**</span> steadily climbed the ranks from 10^th^ in 2013 to 4^th^ in 2016"
caption <- "Data Source: Bureau of Labor Statistics"

#........................create bump chart.......................
salary_rank_by_year |> 
  filter(occupation %in% top2016) |> 
  ggplot(aes(x = year, y = rank, color = occupation)) + 
  geom_point(shape = "|", size = 6) + 
  geom_bump(linewidth = 1) +
  geom_text(
    data = salary_rank_by_year |>  filter(year == 2013, occupation %in% top2016),
    aes(label = occupation),
    hjust = 1,
    nudge_x = -0.1,
    family = "oxygen",
    fontface = "bold"
  ) +
  geom_text(
    data = salary_rank_by_year |> filter(year == 2016, occupation %in% top2016),
    aes(label = rank),
    hjust = 0,
    nudge_x = 0.1,
    size = 5,
    family = "oxygen",
    fontface = "bold"
  ) +
  annotate(
    geom = "text",
    x = c(2013, 2016),
    y = c(-0.2, -0.2),
    label = c("2013", "2016"),
    hjust = c(0, 1),
    vjust = 1,
    size = 5,
    family = "oxygen",
    fontface = "bold",
    color = plot_palette["dark_gray"],
  ) +
  scale_y_reverse() +
  scale_color_manual(values = occupation_colors) +
  coord_cartesian(xlim = c(2010, 2016), ylim = c(11, 0.25), 
                  clip = "off") +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    legend.position = "blank",
    plot.title = element_text(family = "passion",
                              size = 25,
                              color = plot_palette["dark_purple"],
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_textbox_simple(family = "oxygen",
                                           size = 15,
                                           color = plot_palette["dark_gray"],
                                           margin = margin(t = 0, r = 0, b = 1, l = 0, "cm")),
    plot.caption = element_text(family = "oxygen",
                                color = plot_palette["dark_gray"],
                                margin = margin(t = 0.3, r = 0, b = 0, l = 0, "cm")),
    plot.background = element_rect(fill = plot_palette["light_pink"],
                                   color = plot_palette["light_pink"]),
    plot.margin = margin(t = 1, r = 1, b = 1, l = 1, "cm")
  )

```

---

## {#bump-chart-code data-menu-title="Bump chart (code)"} 

[Bump chart (highest paying occupations)]{.slide-title2}

<hr>

<br>

```{r}
#| eval: false
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(ggbump)
library(ggtext)
library(showtext)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

#..........................import fonts..........................
font_add_google(name = "Passion One", family = "passion")
font_add_google(name = "Oxygen", family = "oxygen")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................rank occupations by salary...................
salary_rank_by_year <- jobs |> 
  select(year, occupation, total_earnings) |> 
  group_by(year) |> 
  mutate(
    rank = row_number(desc(total_earnings))
  ) |> 
  ungroup() |> 
  arrange(rank, year)

#..........get top 8 occupations for final year (2016)...........
top2016 <- salary_rank_by_year |>  
  filter(year == 2016, rank <= 8) |>  
  pull(occupation) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                 bump chart                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.................create palette & assign colors.................
occupations_palette <- viridisLite::magma(12)
occupation_colors <- c(
  "Physicians and surgeons" = occupations_palette[3],
  "Nurse anesthetists" = occupations_palette[4],
  "Dentists" = occupations_palette[5],
  "Architectural and engineering managers" = occupations_palette[6],
  "Lawyers" = occupations_palette[7], 
  "Podiatrists" = occupations_palette[8],
  "Chief executives" = occupations_palette[9],
  "Petroleum engineers" = occupations_palette[10]
)

plot_palette <- c(dark_purple = "#2A114E", 
                  dark_gray = "#6D6B71",
                  light_pink = "#FFF8F4")

#.......................create plot labels.......................
title <- "Top eight highest paying occupations in 2016"
subtitle <- "Medical professionals held onto the same top three spots across years, while <span style='color:#FEA873FF;'>**petroleum engineers**</span> steadily climbed the ranks from 10^th^ in 2013 to 4^th^ in 2016"
caption <- "Data Source: Bureau of Labor Statistics"

#........................create bump chart.......................
salary_rank_by_year |>  
  filter(occupation %in% top2016) |>  
  ggplot(aes(x = year, y = rank, color = occupation)) + 
  geom_point(shape = "|", size = 6) + 
  geom_bump(linewidth = 1) +
  geom_text(
    data = salary_rank_by_year |> filter(year == 2013, occupation %in% top2016),
    aes(label = occupation),
    hjust = 1,
    nudge_x = -0.1,
    family = "oxygen",
    fontface = "bold"
  ) +
  geom_text(
    data = salary_rank_by_year |> filter(year == 2016, occupation %in% top2016),
    aes(label = rank),
    hjust = 0,
    nudge_x = 0.1,
    size = 5,
    family = "oxygen",
    fontface = "bold"
  ) +
  annotate(
    geom = "text",
    x = c(2013, 2016),
    y = c(-0.2, -0.2),
    label = c("2013", "2016"),
    hjust = c(0, 1),
    vjust = 1,
    size = 5,
    family = "oxygen",
    fontface = "bold",
    color = plot_palette["dark_gray"],
  ) +
  scale_y_reverse() +
  scale_color_manual(values = occupation_colors) +
  coord_cartesian(xlim = c(2010, 2016), ylim = c(11, 0.25), 
                  clip = "off") +
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  theme_void() +
  theme(
    legend.position = "blank",
    plot.title = element_text(family = "passion",
                              size = 25,
                              color = plot_palette["dark_purple"],
                              margin = margin(t = 0, r = 0, b = 0.3, l = 0, "cm")),
    plot.subtitle = element_textbox_simple(family = "oxygen",
                                           size = 15,
                                           color = plot_palette["dark_gray"],
                                           margin = margin(t = 0, r = 0, b = 1, l = 0, "cm")),
    plot.caption = element_text(family = "oxygen",
                                color = plot_palette["dark_gray"],
                                margin = margin(t = 0.3, r = 0, b = 0, l = 0, "cm")),
    plot.background = element_rect(fill = plot_palette["light_pink"],
                                   color = plot_palette["light_pink"]),
    plot.margin = margin(t = 1, r = 1, b = 1, l = 1, "cm")
  )

```

---

##  {#end-break data-menu-title="# Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ This is the end of Lesson 1 (of 3) ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

<!-- OTHER THINGS TO CONSIDER FOR THIS LESSON -->
<!-- {ggpattern} https://www.youtube.com/watch?v=fWP7KnIhmpQ -->
<!-- https://jkunst.com/blog/posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/ -->
<!-- gganimate -->
<!-- adding images to plots -->
<!-- see Dan Oehm's plot + code: https://github.com/doehm/tidyTuesday/tree/master/2022/week09-energy , https://twitter.com/danoehm/status/1498985113635663873 -->
<!-- combining plots (cowplot & patchwork) -->
<!-- https://rviews.rstudio.com/2019/09/19/intro-to-ggforce/ -->
<!-- patchwork -->
<!-- see issue: https://github.com/samanthacsik/EDS-240-data-viz/issues/16 -->
<!-- {treemapify} -->
<!-- {ggraph} -->
<!-- {ggstream} -->
<!-- {gggibbous} -->


