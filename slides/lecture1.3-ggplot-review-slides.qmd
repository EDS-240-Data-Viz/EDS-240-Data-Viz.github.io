---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 1.3]{.custom-title}

[*{ggplot2} review*]{.custom-subtitle}

<hr class="hr-teal">

[Week 1 | January 8th, 2024]{.custom-subtitle3}

---

## {#ggplot2-advantages data-menu-title="{ggplot2} advantages"} 

[Advantages of `{ggplot2}`]{.slide-title}

<hr>

<br>

:::: columns

::: {.column width="50%"}

<br>

::: incremental
- consistent underlying "grammar of graphics" ([Wilkinson 2005](https://link.springer.com/book/10.1007/0-387-28695-0))
- super flexible, layered plot specification (see [Wickham 2008](http://vita.had.co.nz/papers/layered-grammar.pdf))
- theme system for polishing plot appearance
- lots of additional functionality thanks to extensions
- active and helpful community 
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
knitr::include_graphics("images/lecture1/ggplot2.png")
```
:::

::::

<br>
<br>

::: {.body-text-s .gray-text .center-text}
adapted from [Cédric Scherer's](https://www.cedricscherer.com/) rstudio::conf(2022) workshop, [Graphic Design with ggplot2](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/) 
:::

--

## {#grammar-of-graphics data-menu-title="Grammar of Graphics"} 

[`{ggplot2}` is based on the Grammar of Graphics]{.slide-title2}

<hr>

>“A grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g. the “scatterplot”) and gain insight into the deep structure that underlies statistical graphics.” 

::: {.right-align-text .body-text-s}
-from Hadley Wickham’s [A layered grammar of graphics](https://doi.org/10.1198/jcgs.2009.07098) in *Journal of Computational and Graphical Statistics*, vol. 19, no. 1 pp. 3-28, 2010.
:::

<br>

. . .

>"In the grammar of a language, words have different parts of speech, which perform different roles in the sentence. Analagously, the grammar of graphics separates a graphic into different layers"

::: {.right-align-text .body-text-s}
-from Liz Sander’s post [Telling stories with data using the grammar of graphics](https://codewords.recurse.com/issues/six/telling-stories-with-data-using-the-grammar-of-graphics)
:::

---

## {#layers data-menu-title="ggplot2 layers"} 

[`{ggplot2}` graphic layers]{.slide-title}

<hr>

<br>

[**First these:**]{.teal-text .body-text-m}

**1. data** -- in [tidy](https://doi.org/10.18637/jss.v059.i10) format **+** define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)  
**2. geometric objects (aka geoms)** -- define the type of plot(s)  

<br>

. . .

[**Then these:**]{.teal-text .body-text-m}

**3. statistical transformations** -- algorithm used to calculate new values for a graph  
**4. position adjustments** -- control the fine details of position when geoms might otherwise overlap  
**5. coordinate system** -- change with `x` and `y` axes mean (e.g. Cartesian (default), polar, flipped)    
**6. facet** -- create subplots that each display one subset of the data   
<!-- **7. theme** -- customize the non-data elements of your plot   -->

::: footer
**Note:** You many not apply or customize all of the above layers for every plot you build
:::

---

## {#layers data-menu-title="ggplot2 layers"} 

[Enhance communication using additional layers]{.slide-title}

<hr>

<br>

**1. labels** -- add titles, axis / legend labels  
**2. annotations** -- add textual labels (e.g. to highlight specific data points, trend lines, etc.)   
**3. scales** -- update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)  
**4. themes** -- customize the non-data elements of your plot  
**5. layout** -- combine multiple plots into the same graphic  

::: footer
**Note:** You many not apply or customize all of the above layers for every plot you build
:::

---

## {#tidy-data data-menu-title="What is tidy data?"} 

[What is tidy data?]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Stylized text providing an overview of Tidy Data. The top reads 'Tidy data is a standard way of mapping the meaning of a dataset to its structure. - Hadley Wickham.' On the left reads 'In tidy data: each variable forms a column; each observation forms a row; each cell is a single measurement.' There is an example table on the lower right with columns ‘id’, ‘name’ and ‘color’ with observations for different cats, illustrating tidy data structure."
knitr::include_graphics("images/lecture1/horst-tidy-data-definition.png")
```

:::{.gray-text .center-text}
*Artwork by [Allison Horst](https://allisonhorst.com/)*
:::

---

## {#untidy-data data-menu-title="Untidy data"} 

[Untidy data can take *many* different formats]{.slide-title2}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "There are two sets of anthropomorphized data tables. The top group of three tables are all rectangular and smiling, with a shared speech bubble reading 'our columns are variables and our rows are observations!'. Text to the left of that group reads 'The standard structure of tidy data means that 'tidy datasets are all alike…' The lower group of four tables are all different shapes, look ragged and concerned, and have different speech bubbles reading (from left to right) “my column are values and my rows are variables”, 'I have variables in columns AND in rows', 'I have multiple variables in a single column', and 'I don’t even KNOW what my deal is.' Next to the frazzled data tables is text '...but every messy dataset is messy in its own way. -Hadley Wickham.'"
knitr::include_graphics("images/lecture1/horst-untidy-data.png")
```

:::{.gray-text .center-text}
*Artwork by [Allison Horst](https://allisonhorst.com/)*
:::

---

## {#untidy-temps data-menu-title="Untidy temps"} 

[An example: untidy temperatures]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
library(tidyverse)
```

Take this [tibble](https://tibble.tidyverse.org/) (a lazy/surly `data.frame`) of temperature recordings at three stations on three dates:

```{r}
#| eval: true
#| echo: true
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)

print(temp_data_wide)
```

<br>

::: {.center-text}
This tibble is in **wide** or **untidy** format.
:::

---

##  {#make-temps-tidy data-menu-title="# Make tidy temps #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa table title="a data table with two columns and two rows" >}} Make tidy temperatures!</p>
<p class="caption-text">*With your learning partners, discuss the following:*</p>
<p class="dark-blue-text">**1.) What makes `temp_data_wide` untidy?**</p>
<p class="dark-blue-text">**2.) Sketch out on paper or talk through what `temp_data_wide` would look like in long aka tidy format. Why?**</p>
</div>

```{r}
countdown::countdown(
  minutes = 3,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

---

## {#why-untidy-temps data-menu-title="Why untidy temps?"} 

[An example: untidy temperatures]{.slide-title}

<hr>

<br>

::: {.center-text .body-text-m}
**Multiple observations (temperature recordings) per row**
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
knitr::include_graphics("images/lecture1/untidy-multi-obs-per-row.png")
```

<br>

::: {.center-text .gray-text}
Want more examples of untidy data? Check out these [teaching materials](https://learning.nceas.ucsb.edu/2023-09-ucsb-faculty/session_07.html#tidy-data) from the NCEAS Learning Hub showcasing real-world examples of *very* untidy data.
:::

---

## {#tidy-temps data-menu-title="Tidy temps"} 

[An example: tidy temperatures]{.slide-title2}

<hr>

We can use `tidyr::pivot_longer()` to "lengthen" our data aka convert it from wide / untidy to **long / tidy:**

```{r}
#| eval: true
#| echo: true
temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id",
               values_to = "temp_c")

print(temp_data_long)
```

---

## {#tidy-data-benefits data-menu-title="Tidy data benefits"} 

[Benefits of tidy data]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "On the left is a happy cute fuzzy monster holding a rectangular data frame with a tool that fits the data frame shape. On the workbench behind the monster are other data frames of similar rectangular shape, and neatly arranged tools that also look like they would fit those data frames. The workbench looks uncluttered and tidy. The text above the tidy workbench reads 'When working with tidy data, we can use the same tools in similar ways for different datasets…' On the right is a cute monster looking very frustrated, using duct tape and other tools to haphazardly tie data tables together, each in a different way. The monster is in front of a messy, cluttered workbench. The text above the frustrated monster reads '...but working with untidy data often means reinventing the wheel with one-time approaches that are hard to iterate or reuse.'"
knitr::include_graphics("images/lecture1/horst-workbench.png")
```

:::{.gray-text .center-text}
*Artwork by [Allison Horst](https://allisonhorst.com/)*
:::

---

## {#wrangling-fxns data-menu-title="Helpful wrangling functions"} 

[Data viz almost *always* begins with data wrangling]{.slide-title3}

<hr>

The `{tidyverse}` is an "opinionated" set of packages -- meaning they share similar philosophies, grammar, and data structures -- that are **incredibly** useful for data wrangling, cleaning, and manipulation (and of course, visualization).

:::: columns

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/lecture1/core-tidyverse.png")
```

::: {.center-text .gray-text}
Check out the [tidyverse website](the packages that you’re likely to use in everyday data analyses) to learn more about each of these packages
:::

:::

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "55.5%"
knitr::include_graphics("images/lecture1/r4ds-cover.png")
```

::: {.center-text .gray-text}
The best resource for learning all things [R for Data Science](https://r4ds.hadley.nz/)!
:::

:::

::::

---

```{r}
library(palmerpenguins)
library(tidyverse)


```


---

## {#build-plot-together data-menu-title="Build plot together"} 

[tbd]{.slide-title}

<hr>

::: footer
[**1. data**]{.teal-text} | 2. geometric object | 3. statistical transformation | 4. position adjustment | 5. coordinate system | 6. facet | 7. theme
:::

---

## {#explore-data data-menu-title="Explore data"} 

[Always explore your data first!]{.slide-title}

<hr>

```{r}
library(palmerpenguins)
library(tidyverse)
```

`str()`, `glimpse()`

---

Initialize a plot object that you'll add layers to. Creates empty graph that's primed to display `penguins` data, but empty since we haven't told ggplot how we want to map our data onto the graph yet.
```{r}
ggplot(data = penguins) 
```

`mapping` defines how variables in your dataset are mapped to visual properties (aesthetics) of your plot. Here, we specify which variables map to x and y axes
```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm, y = body_mass_g))

# oftentimes, you'll see these written wihtout the args explicitly stated
ggplot(penguins, 
       aes(x = flipper_length_mm, y = body_mass_g))
```

Still no data because we haven't specified how we want our observations (individual penguins) to to be represented on our graph.

Do so by adding a geom aka the geometrical object that a plot uses to represent data. There are many geoms (`geom_*`) that are built into `{ggplot2}` already (and more when you use extension packages)!

---


---

##  {#end-break data-menu-title="# End #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">See you next week!</p>
<p class="caption-text">*~ This is the end of Lesson 3 (of 3) ~*</p>
</div>











