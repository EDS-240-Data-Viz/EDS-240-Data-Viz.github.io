---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 1.3]{.custom-title}

[*{ggplot2} review*]{.custom-subtitle}

<hr class="hr-teal">

:::: {.columns} 

::: {.column width="50%"}
[Sam Csik |]{.custom-subtitle2}<br>
[Data Training Coordinator]{.custom-subtitle2}<br>
[*National Center for Ecological Analysis & Synthesis*]{.custom-subtitle3}
:::

::: {.column width="50%"}
[Master of Environmental Data Science |]{.custom-subtitle2}<br>
[*Bren School of Environmental Science & Management*]{.custom-subtitle3}
:::

::::

<br>

::: {.title-footer}
January 8th, 2024
:::

---

## {#ggplot2-advantages data-menu-title="{ggplot2} advantages"} 

[Advantages of `{ggplot2}`]{.slide-title}

<hr>

<br>

:::: columns

::: {.column width="50%"}

<br>

::: incremental
- consistent underlying "grammar of graphics" ([Wilkinson 2005](https://link.springer.com/book/10.1007/0-387-28695-0))
- super flexible, layered plot specification (see [Wickham 2008](http://vita.had.co.nz/papers/layered-grammar.pdf))
- theme system for polishing plot appearance
- lots of additional functionality thanks to extensions
- active and helpful community 
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
knitr::include_graphics("images/lecture1/ggplot2.png")
```
:::

::::

<br>
<br>

::: {.body-text-s .gray-text .center-text}
adapted from [CÃ©dric Scherer's](https://www.cedricscherer.com/) rstudio::conf(2022) workshop, [Graphic Design with ggplot2](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/) 
:::

--

## {#grammar-of-graphics data-menu-title="Grammar of Graphics"} 

[Grammar of Graphics]{.slide-title}

<hr>

---

## {#tidy-data data-menu-title="Tidy data"} 

[Tidy data]{.slide-title}

<hr>

---

## {#mapping data-menu-title="Mapping data"} 

[Mapping data]{.slide-title}

<hr>

1. layer (geom + stat)
2. scale (shape, color, size + how you interpret the plot e.g. legends, scales)
3. coord (e.g. polar, flip)
4. facet (create small multiples; helpful for EDA)
5. theme (adjust individual pieces of a plot)

a graphic: 

maps the data +
to the aesthetic attributes +
of geometric points + 
with possible statistical transformations + 
different coordinate systems +
and faceting

---

## {#explore-data data-menu-title="Explore data"} 

[Remember to always explore your data first!]{.slide-title}

<hr>

```{r}
library(palmerpenguins)
library(tidyverse)
```

`str()`, `glimpse()`

---

Initialize a plot object that you'll add layers to. Creates empty graph that's primed to display `penguins` data, but empty since we haven't told ggplot how we want to map our data onto the graph yet.
```{r}
ggplot(data = penguins) 
```

`mapping` defines how variables in your dataset are mapped to visual properties (aesthetics) of your plot. Here, we specify which variables map to x and y axes
```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm, y = body_mass_g))

# oftentimes, you'll see these written wihtout the args explicitly stated
ggplot(penguins, 
       aes(x = flipper_length_mm, y = body_mass_g))
```

Still no data because we haven't specified how we want our observations (individual penguins) to to be represented on our graph.

Do so by adding a geom aka the geometrical object that a plot uses to represent data. There are many geoms (`geom_*`) that are built into `{ggplot2}` already (and more when you use extension packages)!

---













