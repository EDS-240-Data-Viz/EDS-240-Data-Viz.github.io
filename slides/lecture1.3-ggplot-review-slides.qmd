---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 1.3]{.custom-title}

[*{ggplot2} review*]{.custom-subtitle}

<hr class="hr-teal">

[Week 1 | January 8th, 2024]{.custom-subtitle3}

---

## {#ggplot2-advantages data-menu-title="{ggplot2} advantages"} 

[Advantages of `{ggplot2}`]{.slide-title}

<hr>

<br>

:::: columns

::: {.column width="50%"}

<br>

::: incremental
- consistent underlying "grammar of graphics" ([Wilkinson 2005](https://link.springer.com/book/10.1007/0-387-28695-0))
- super flexible, layered plot specification (see [Wickham 2008](http://vita.had.co.nz/papers/layered-grammar.pdf))
- theme system for polishing plot appearance
- lots of additional functionality thanks to extensions
- active and helpful community 
:::

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
knitr::include_graphics("images/lecture1/ggplot2.png")
```
:::

::::

<br>
<br>

::: {.body-text-s .gray-text .center-text}
adapted from [Cédric Scherer's](https://www.cedricscherer.com/) rstudio::conf(2022) workshop, [Graphic Design with ggplot2](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/) 
:::

--

## {#grammar-of-graphics data-menu-title="Grammar of Graphics"} 

[`{ggplot2}` is based on the Grammar of Graphics]{.slide-title2}

<hr>

>“A grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g. the “scatterplot”) and gain insight into the deep structure that underlies statistical graphics.” 

::: {.right-align-text .body-text-s}
-from Hadley Wickham’s [A layered grammar of graphics](https://doi.org/10.1198/jcgs.2009.07098) in *Journal of Computational and Graphical Statistics*, vol. 19, no. 1 pp. 3-28, 2010.
:::

<br>

. . .

>"In the grammar of a language, words have different parts of speech, which perform different roles in the sentence. Analagously, the grammar of graphics separates a graphic into different layers"

::: {.right-align-text .body-text-s}
-from Liz Sander’s post [Telling stories with data using the grammar of graphics](https://codewords.recurse.com/issues/six/telling-stories-with-data-using-the-grammar-of-graphics)
:::

---

## {#graphic-layers data-menu-title="Graphic layers"} 

[{{< fa chart-line title="a line chart" >}} `{ggplot2}` graphic layers]{.slide-title}

<hr>

<br>

[**First these:**]{.teal-text .body-text-m}

**1. data** -- in [tidy](https://doi.org/10.18637/jss.v059.i10) format **+** define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)  
**2. geometric objects (aka geoms)** -- define the type of plot(s)  

<br>

. . .

[**Then these:**]{.teal-text .body-text-m}

**3. statistical transformations** -- algorithm used to calculate new values for a graph  
**4. position adjustments** -- control the fine details of position when geoms might otherwise overlap  
**5. coordinate system** -- change what `x` and `y` axes mean (e.g. Cartesian (default), polar, flipped)    
**6. facet** -- create subplots that each display one subset of the data   
<!-- **7. theme** -- customize the non-data elements of your plot   -->

::: footer
**Note:** You many not apply or customize all of the above layers (or in this exact order) for every plot you build
:::

---

## {#comm-layers data-menu-title="Communication layers"} 

[{{< fa palette title="a painter's palette" >}} Enhance communication using additional layers]{.slide-title}

<hr>

<br>

**1. labels** -- add / update titles, axis / legend labels  
**2. annotations** -- add textual labels (e.g. to highlight specific data points or trend lines, etc.)   
**3. scales** -- update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)  
**4. themes** -- customize the non-data elements of your plot  
**5. layout** -- combine multiple plots into the same graphic  

::: footer
**Note:** You many not apply or customize all of the above layers (or in this exact order) for every plot you build
:::

---

## {#aside-tidy-data data-menu-title="An aside: tidy data"} 

[An aside . . .]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Digital illustration of two cute fuzzy monsters sitting on a park bench with a smiling data table between them, all eating ice cream together. In text above the illustration are the hand drawn words 'make friends with tidy data.'"
knitr::include_graphics("images/lecture1/horst-tidy-data-friends.png")
```

---

## {#tidy-data data-menu-title="What is tidy data?"} 

[What is tidy data?]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Stylized text providing an overview of Tidy Data. The top reads 'Tidy data is a standard way of mapping the meaning of a dataset to its structure. - Hadley Wickham.' On the left reads 'In tidy data: each variable forms a column; each observation forms a row; each cell is a single measurement.' There is an example table on the lower right with columns ‘id’, ‘name’ and ‘color’ with observations for different cats, illustrating tidy data structure."
knitr::include_graphics("images/lecture1/horst-tidy-data-definition.png")
```

:::{.gray-text .center-text}
*Artwork by [Allison Horst](https://allisonhorst.com/)*
:::

---

## {#untidy-data data-menu-title="Untidy data"} 

[Untidy data can take *many* different formats]{.slide-title2}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "There are two sets of anthropomorphized data tables. The top group of three tables are all rectangular and smiling, with a shared speech bubble reading 'our columns are variables and our rows are observations!'. Text to the left of that group reads 'The standard structure of tidy data means that 'tidy datasets are all alike…' The lower group of four tables are all different shapes, look ragged and concerned, and have different speech bubbles reading (from left to right) “my column are values and my rows are variables”, 'I have variables in columns AND in rows', 'I have multiple variables in a single column', and 'I don’t even KNOW what my deal is.' Next to the frazzled data tables is text '...but every messy dataset is messy in its own way. -Hadley Wickham.'"
knitr::include_graphics("images/lecture1/horst-untidy-data.png")
```

:::{.gray-text .center-text}
*Artwork by [Allison Horst](https://allisonhorst.com/)*
:::

---

## {#untidy-temps data-menu-title="Untidy temps"} 

[An example: untidy temperatures]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
library(tidyverse)
```

Take this [tibble](https://tibble.tidyverse.org/) (a lazy/surly `data.frame`) of temperature recordings at three stations on three dates:

```{r}
#| eval: true
#| echo: true
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)

print(temp_data_wide)
```

<br>

::: {.center-text}
This tibble is in **wide** or **untidy** format.
:::

---

##  {#make-temps-tidy data-menu-title="# Make tidy temps #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa table title="a data table with two columns and two rows" >}} Make tidy temperatures!</p>
<p class="caption-text">*With your learning partners, discuss the following:*</p>
<p class="dark-blue-text">**1.) What makes `temp_data_wide` untidy?**</p>
<p class="dark-blue-text">**2.) Sketch out on paper or talk through what `temp_data_wide` would look like in long aka tidy format. Why?**</p>
</div>

```{r}
countdown::countdown(
  minutes = 3,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```

---

## {#why-untidy-temps data-menu-title="Why untidy temps?"} 

[An example: untidy temperatures]{.slide-title}

<hr>

<br>

::: {.center-text .body-text-m}
**Multiple observations (temperature recordings) per row**
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
knitr::include_graphics("images/lecture1/untidy-multi-obs-per-row.png")
```

<br>

::: {.center-text .gray-text}
Want more examples of untidy data? Check out these [teaching materials](https://learning.nceas.ucsb.edu/2023-09-ucsb-faculty/session_07.html#tidy-data) from the NCEAS Learning Hub showcasing real-world examples of *very* untidy data.
:::

---

## {#tidy-temps data-menu-title="Tidy temps"} 

[An example: tidy temperatures]{.slide-title2}

<hr>

We can use `tidyr::pivot_longer()` to "lengthen" our data aka convert it from wide / untidy to **long / tidy:**

```{r}
#| eval: true
#| echo: true
temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id",
               values_to = "temp_c")

print(temp_data_long)
```

---

## {#tidy-data-benefits data-menu-title="Tidy data benefits"} 

[Benefits of tidy data]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "On the left is a happy cute fuzzy monster holding a rectangular data frame with a tool that fits the data frame shape. On the workbench behind the monster are other data frames of similar rectangular shape, and neatly arranged tools that also look like they would fit those data frames. The workbench looks uncluttered and tidy. The text above the tidy workbench reads 'When working with tidy data, we can use the same tools in similar ways for different datasets…' On the right is a cute monster looking very frustrated, using duct tape and other tools to haphazardly tie data tables together, each in a different way. The monster is in front of a messy, cluttered workbench. The text above the frustrated monster reads '...but working with untidy data often means reinventing the wheel with one-time approaches that are hard to iterate or reuse.'"
knitr::include_graphics("images/lecture1/horst-workbench.png")
```

:::{.gray-text .center-text}
*Artwork by [Allison Horst](https://allisonhorst.com/)*
:::

---

## {#wrangling-fxns data-menu-title="Helpful wrangling functions"} 

[Data viz almost *always* begins with data wrangling]{.slide-title3}

<hr>

The `{tidyverse}` is an "opinionated" set of packages -- meaning they share similar philosophies, grammar, and data structures -- that are **incredibly** useful for data wrangling, cleaning, and manipulation (and of course, visualization).

:::: columns

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/lecture1/core-tidyverse.png")
```

::: {.center-text .gray-text}
Check out the [tidyverse website](the packages that you’re likely to use in everyday data analyses) to learn more about each of these packages
:::

:::

::: {.column width="50%"}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "55.5%"
knitr::include_graphics("images/lecture1/r4ds-cover.png")
```

::: {.center-text .gray-text}
The best resource for learning all things [R for Data Science](https://r4ds.hadley.nz/)!
:::

:::

::::

---

## {#moving-on data-menu-title="Moving on..."} 

[Okay, moving on . . .]{.slide-title}

<hr>

::: {.center-text}
**Let's make some ggplots using data from [`{palmerpenguins}`](https://allisonhorst.github.io/palmerpenguins/) (which are already tidy)!**
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
#| fig-alt: "Three pengins stand side-by-side: A chinstrap penguin stands on the left atop a purple painted background. It's right side faces us and the word 'Chinstrap!' is written above. A gentoo penguin stands in the middle facing us with it's wings outstretched atop a green painted background. The word 'Gentoo!' is written above. An adélie penguin stands on the right atop an orange painted background. It faces us, but it's head is turned to the left. The word 'Adélie!' is written above it."
knitr::include_graphics("images/lecture1/palmer-penguins.png")
```

::: {.center-text .gray-text}
*Artwork by [Allison Horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)*
:::

::: footer
[*The examples on the following slides were adapted from R for Data Science, Chapters [2](https://r4ds.hadley.nz/data-visualize) and [10](https://r4ds.hadley.nz/layers).*]{.gray-text .center-text}
:::

---

## {#plot1 data-menu-title="Plot 1"} 

[Plot #1]{.slide-title}

<hr>

::: {.center-text}
We'll start by exploring the relationship between penguin **flipper length** and **body mass**. For this example, we'll focus on understanding the following layers of a ggplot (**bolded**):
:::


[**{{< fa chart-line title="a line chart" >}} Graphic layers:**]{.teal-text}  

[**1. data** -- in [tidy](https://doi.org/10.18637/jss.v059.i10) format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)]{.body-text-s}  
[**2. geometric objects (aka geoms)** -- define the type of plot(s)]{.body-text-s}     
[3. statistical transformations -- algorithm used to calculate new values for a graph]{.body-text-s}     
[4. position adjustments -- control the fine details of position when geoms might otherwise overlap]{.body-text-s}     
[5. coordinate system -- change what `x` and `y` axes mean (e.g. Cartesian (default), polar, flipped)]{.body-text-s}       
[6. facet -- create subplots that each display one subset of the data]{.body-text-s}       

[**{{< fa palette title="a painter's palette" >}} "Enhancing communication" layers:**]{.teal-text}   

[1. labels -- add / update titles, axis / legend labels]{.body-text-s}     
[2. annotations -- add textual labels (e.g. to highlight specific data points or trend lines, etc.)]{.body-text-s}      
[**3. scales** -- update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)]{.body-text-s}     
[4. themes-- customize the non-data elements of your plot]{.body-text-s}      
[5. layout -- combine multiple plots into the same graphic]{.body-text-s}      

---

## {#initialize data-menu-title="Initialize plot"} 

[{{< fa chart-line title="a line chart" >}} Initialize a plot object]{.slide-title}

<hr>

Initialize your plot object using `ggplot()` -- this creates a graph that's primed to display the `penguins` data set, but empty since we haven't told ggplot how to map our data onto the graph yet (in other words: we haven't told ggplot what *type* of plot to create):
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(data = penguins)
```

::: footer
[**data**]{.teal-text} | geometric object | statistical transformation | position adjustment | coordinate system | facet 
:::

---

## {#aesthetics data-menu-title="Initialize plot + map aesthetics"} 

[{{< fa chart-line title="a line chart" >}} Initialize a plot object + map aesthetics]{.slide-title}

<hr>

The `mapping` argument defines how variables in your data set are mapped to visual properties (aesthetics) of your plot. Here, we specify which variables map to our `x` and `y` axes:
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(data = penguins, 
       mapping = aes(x = flipper_length_mm, y = body_mass_g))
```

::: footer
[**data**]{.teal-text} | geometric object | statistical transformation | position adjustment | coordinate system | facet 
:::

::: notes
We've specified which variables map onto the x & y axes but still have not yet articulated how to represent the observations
:::

---

## {#omitting-arg-names data-menu-title="Omitting arg names"} 

[{{< fa chart-line title="a line chart" >}} Omitting argument names]{.slide-title}

<hr>

The `data` and `mapping` arguments are often not explicitly written in `ggplot()`, as in the example below (makes for more concise code):
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g))
```

::: footer
[**data**]{.teal-text} | geometric object | statistical transformation | position adjustment | coordinate system | facet 
:::

---

## {#geom data-menu-title="Define a geom"} 

[{{< fa chart-line title="a line chart" >}} Define a geom to represent data]{.slide-title}

<hr>

Next, we'll layer on a geometric object (aka geom) that our plot will use to represent our penguin data. There are many geoms (`geom_*()`) that are built into `{ggplot2}` already (and more when you use extension packages). To create a scatterplot:
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

::: footer
data | [**geometric object**]{.teal-text} | statistical transformation | position adjustment | coordinate system | facet  
:::

---

## {#dat-map-in-geom data-menu-title="Data & mapping in geom"} 

[{{< fa chart-line title="a line chart" >}} Defining data & mappings in `geom_*()`]{.slide-title2}

<hr>

You can also define the data and mapping layers within a `geom_*()` (rather than `ggplot()`) -- this is helpful if you plan to have multiple geoms with different mappings:
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot() +
  geom_point(penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g))
```

::: footer
data | [**geometric object**]{.teal-text} | statistical transformation | position adjustment | coordinate system | facet 
:::

---

## {#color-points-by-spp data-menu-title="Color points by species"} 

[{{< fa palette title="a painter's palette" >}} Use color to differentiate species]{.slide-title}

<hr>

[If we'd like to represent species using another aesthetic (e.g. color, shape, size), we need to modify our plot's aesthetic (i.e. inside `aes()`) -- **any time we want to modify the appearance of our plotted data based on a variable in our dataset, we do so within `aes()`.** This process is known as **scaling**. A legend will automatically be added to indicate which values (in this case, colors) correspond to which level of our variable (in this case, species):]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "4"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point()
```

::: footer
labels | annotations | [**scales**]{.teal-text} | themes | layout 
:::

---

## {#color-points-by-spp-local data-menu-title="Color points by species (local)"} 

[{{< fa palette title="a painter's palette" >}} Mapping color at a local level]{.slide-title}

<hr>

Alternatively, map color at a **local** (i.e. within a specific geom) rather than **global** (i.e. within `ggplot()`) layer:
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(mapping = aes(color = species))
```

::: footer
labels | annotations | [**scales**]{.teal-text} | themes | layout 
:::

---

## {#why-local-mapping data-menu-title="Why map locally?"} 

[{{< fa palette title="a painter's palette" >}} Why map locally?]{.slide-title}

<hr>

[Here, we use `geom_smooth()` to add a best fit line (based on a `l`inear `m`odel, using `method = "lm"`) to our plot:]{.body-text-s} 

:::: columns

::: {.column width="50%"}
[**Global** mappings are passed down to each subsequent geom layer. Therefore, the `color = species` mapping is also passed to `geom_smooth()`, resulting in a best fit line for each species.]{.body-text-s} 
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "4,6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  geom_smooth(method = "lm")
```
:::

::: {.column width="50%"}
[**Local** mappings (e.g. within `geom_point()`) only apply to that particular layer. Therefore, the `color = species` mapping is *only* applied to `geom_point()`, and `geom_smooth()` fits a best fit line to the entire data set.]{.body-text-s} 
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5-6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(mapping = aes(color = species)) +
  geom_smooth(method = "lm")
```
:::

::::

---

## {#one-color data-menu-title="One color for all points"} 

[{{< fa palette title="a painter's palette" >}} What if we just want to color all points the same?]{.slide-title3}

<hr>

Do so within the corresponding `geom_*()` and outside of the `aes()` function! **Color is no longer being mapped to a variable.**
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(color = "blue")
```

---

## {#scale-color-manual data-menu-title="Define custom colors"} 

[{{< fa palette title="a painter's palette" >}} We can also map our own colors]{.slide-title}

<hr>

Here, we use `scale_color_manual()` to update the colors of our data points. Colors will be mapped from the levels in our data (i.e. `Adelie`, `Chinstrap`, `Gentoo`) to the order of the aethetic values supplied (`"#FF8302"`, `"#C35CCA"`, `"#067575"`):
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  scale_color_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

::: footer
labels | annotations | [**scales**]{.teal-text} | themes | layout 
:::

--- 

## {#plot2 data-menu-title="Plot 2"} 

[Plot #2]{.slide-title}

<hr>

::: {.center-text}
In this next example, we'll explore **penguin species counts**. For this example, we'll focus on understanding the following layers of a ggplot (**bolded**):
:::


[**{{< fa chart-line title="a line chart" >}} Graphic layers:**]{.teal-text}  

[**1. data** -- in [tidy](https://doi.org/10.18637/jss.v059.i10) format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)]{.body-text-s}  
[**2. geometric objects (aka geoms)** -- define the type of plot(s)]{.body-text-s}     
[**3. statistical transformations** -- algorithm used to calculate new values for a graph]{.body-text-s}     
[**4. position adjustments** -- control the fine details of position when geoms might otherwise overlap]{.body-text-s}     
[**5. coordinate system** -- change what `x` and `y` axes mean (e.g. Cartesian (default), polar, flipped)]{.body-text-s}       
[6. facet -- create subplots that each display one subset of the data]{.body-text-s}       

[**{{< fa palette title="a painter's palette" >}} "Enhancing communication" layers:**]{.teal-text}   

[1. labels -- add / update titles, axis / legend labels]{.body-text-s}     
[2. annotations -- add textual labels (e.g. to highlight specific data points or trend lines, etc.)]{.body-text-s}      
[3. scales -- update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)]{.body-text-s}     
[**4. themes**-- customize the non-data elements of your plot]{.body-text-s}      
[5. layout -- combine multiple plots into the same graphic]{.body-text-s}      

---

## {#basic-barplot data-menu-title="Create a basic bar plot"} 

[{{< fa chart-line title="a line chart" >}} Initialize + map aesthetics + define geom]{.slide-title}

<hr>

Similar to our first scatterplot, we start by initializing our plot object with data, mapping our aesthetics, and defining a geometric object:
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar()
```

::: footer
[**data**]{.teal-text} | [**geometric object**]{.teal-text} | statistical transformation | position adjustment | coordinate system | facet 
:::

---

## {#stat-transformation data-menu-title="What is a stat transformation?"} 

[What is a statistical transformation?]{.slide-title}

<hr>

Some geoms, like scatterplots, plot the raw values of your data set. Other geoms, like bar charts, histograms, boxplots, smoothers, etc. calculate new values to plot. 

:::: columns

::: {.column width="50%"}
[Each point on our scatterplot represents a raw observation value (one point = one penguin)]{.body-text-s}
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point()
```
:::

::: {.column width="50%"}
[Each bar represents a species count (**note** the y-axis, `count`, which is not a variable in our penguins data set)]{.body-text-s}
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar()
```
:::

::::

::: footer
data | geometric object | [**statistical transformation**]{.teal-text} | position adjustment | coordinate system | facet 
:::

---

## {#default-stat data-menu-title="Default stat"} 

[{{< fa chart-line title="a line chart" >}} The default stat for `geom_bar()` is "count"]{.slide-title2}

<hr>

**Every geom has a default stat** -- meaning you can typically use geoms without worrying about the underlying statistical transformation.

The default statistical transformation used in `geom_bar()` is **count**, which first groups our categorical variable (`species`), then calculates a count for each unique level (`Adelie`, `Chinstrap`, `Gentoo`).

```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar(stat = "count") # you don't need to explicitly include `stat = "count"` since it's the default
```

::: footer
data | geometric object | [**statistical transformation**]{.teal-text} | position adjustment | coordinate system | facet 
:::

---

## {#override-default-stat data-menu-title="Override default stat"} 

[{{< fa chart-line title="a line chart" >}} We can override the default stat]{.slide-title}

<hr>

Let's say we have a data frame with calculated count values (e.g. `penguins_summary`) that we'd like to plot using `geom_bar()`. We can change `stat = "count"` (default) to `stat = "identity"` to generate bar heights based off the "identity" of values in the `n` column of `penguin_summary`.
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

penguin_summary <- penguins |> 
  count(species) # calculate number of observations (rows) for each species

ggplot(penguin_summary, aes(x = species, y = n)) + 
  geom_bar(stat = "identity")
```


::: footer
data | geometric object | [**statistical transformation**]{.teal-text} | position adjustment | coordinate system | facet 
:::

---

## {#stat-mapping data-menu-title="Override default stat mappimg"} 

[{{< fa chart-line title="a line chart" >}} We can override the default stat *mapping*]{.slide-title2}

<hr>

Now let's say we'd like to display the same bar chart with y-axis values as proportions, rather than counts. We can override the default mapping from transformed variables to aesthetics by doing the following:
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species, y = after_stat(prop), group = 1)) +
  geom_bar()
```

[**NOTE: Including `group = 1` overrides the default behavior of `geom_bar()` to group by the `x` variable.** The default behavior of `geom_bar()` is to group by the `x` variable (for us, that's `species`) to separately count the number of rows in each level (`Adelie`, `Chinstrap`, `Gentoo`). If we want proportions, we need to consider all levels of `species` together to calculate the proportion of *each* level of species relative to *all* levels of `species`.]{.body-text-s} 

::: footer
data | geometric object | [**statistical transformation**]{.teal-text} | position adjustment | coordinate system | facet 
:::

---

## {#stat-summary data-menu-title="stat_summary()"} 

[{{< fa chart-line title="a line chart" >}} We can use `stat_summary()` to compute & plot any aggregate]{.slide-title3}

<hr>

Here, we plot the min, mean, and max values of penguin `body_mass_g` by species:
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins) +
  stat_summary(
    aes(x = species, y = body_mass_g),
    fun.max = max, 
    fun.min = min,
    fun = mean
  )
```


::: footer
data | geometric object | [**statistical transformation**]{.teal-text} | position adjustment | coordinate system | facet 
:::

---

## {#pos-adj data-menu-title="What is a position adjustment?"} 

[What is a position adjustment?]{.slide-title}

<hr>

Position adjustments apply minor tweaks to the position of elements to resolve overlapping geoms. For example, let's say we would like to visualize penguin counts by species (bar height) and by island (color) using our bar chart from earlier. We could add the `fill` aesthetic:
```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar()
```

::: footer
data | geometric object | statistical transformation | [**position adjustment**]{.teal-text} | coordinate system | facet
:::

---

## {#pos-default-bar data-menu-title="Default position geom_bar()"} 

[{{< fa chart-line title="a line chart" >}} The default position for `geom_bar()` is "stack"]{.slide-title3}

<hr>

**Every geom has a default position.** The default position used in `geom_bar()` is **stack**, which stacks bars on top of one another, based on the `fill` value (here, that's `island`):
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "stack") # you don't need to explicitly include `position = "stack"` since it's the default
```

::: footer
data | geometric object | statistical transformation | [**position adjustment**]{.teal-text} | coordinate system | facet
:::

---

## {#pos-alts data-menu-title="Alternative positions for geom_bar()"} 

[{{< fa chart-line title="a line chart" >}} Alternative position adjustments for `geom_bar()`]{.slide-title3}

<hr>

Below are a few position options available for use with `geom_bar()`:

:::: columns

::: {.column width="50%"}
[`position = "fill"` creates a set of stacked bars but makes each set the same height (easier to compare proportions across groups)]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
```

:::

::: {.column width="50%"}
[`position = "dodge"` places overlapping bars directly beside one another (easier to compare individual values)]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "dodge")
```
:::

::::

::: footer
data | geometric object | statistical transformation | [**position adjustment**]{.teal-text} | coordinate system | facet
:::

---

## {#default-coord data-menu-title="What is a coordinate system"} 

[What is a coordinate system?]{.slide-title}

<hr>

A Coordinate System is a system that uses one or more numbers (coordinates), to uniquely determine the position of points or other geometric elements. **By default, ggplots are constructed in a Cartesian coordinate system**, consisting of a horizontal x-axis and vertical y-axis.

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_cartesian() # you don't need to explicitly include `coord_cartesian()` since it's the default
```

::: footer
data | geometric object | statistical transformation | position adjustment | [**coordinate system**]{.teal-text} | facet
:::

---

## {#coord data-menu-title="Coordinate system"} 

[{{< fa chart-line title="a line chart" >}} Changing coordinate systems]{.slide-title}

<hr>

Depending on the type of data, axis label length, etc. it may make sense to change this coordinate system. Two options for our bar plot:

:::: columns

::: {.column width="50%"}

[`coord_flip()` switches the x and y axes.]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() + 
  coord_flip()
```

:::

::: {.column width="50%"}

[`coord_polar()` uses polar coordinates.]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() + 
  coord_polar()
```

:::

::::

::: footer
data | geometric object | statistical transformation | position adjustment | [**coordinate system**]{.teal-text} | facet
:::

---

## {#prebuilt-themes data-menu-title="Pre-built themes"} 

[{{< fa palette title="a painter's palette" >}} Use pre-made themes to update plot appearance]{.slide-title2}

<hr>

`{ggplot2}` comes with a number of [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), which control all non-data display. See two examples below:

:::: columns

::: {.column width="50%"}
[displays x and y axis lines and no gridlines]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_classic()
```
:::

::: {.column width="50%"}
[displays light grey lines and axes]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_light()
```
:::

::::

::: footer
labels | annotations | scales | [**themes**]{.teal-text} | layout 
:::

---

## {#custom-themes data-menu-title="Custom themes"} 

[{{< fa palette title="a painter's palette" >}} Further customize plot appearance using `theme()`]{.slide-title3}

<hr>

Further modify nearly any non-data element of your plot using [`theme()`](https://ggplot2.tidyverse.org/reference/theme.html).

:::: columns

::: {.column width="50%"}
[Start with `theme_light()`:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_light()
```
:::

::: {.column width="50%"}
[Further modify with `theme()`:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "7-9"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species)) +
  geom_bar() +
  theme_light() +
  theme(
    axis.title = element_text(size = 17, color = "purple")
  )
```
:::

::::

::: footer
labels | annotations | scales | [**themes**]{.teal-text} | layout 
:::

---

## {#plot3 data-menu-title="Plot 3"} 

[Plot #3]{.slide-title}

<hr>

::: {.center-text}
In this next example, we'll explore **penguin flipper lengths**. For this example, we'll focus on understanding the following layers of a ggplot (**bolded**):
:::


[**{{< fa chart-line title="a line chart" >}} Graphic layers:**]{.teal-text}  

[**1. data** -- in [tidy](https://doi.org/10.18637/jss.v059.i10) format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)]{.body-text-s}  
[**2. geometric objects (aka geoms)** -- define the type of plot(s)]{.body-text-s}     
[3. statistical transformations -- algorithm used to calculate new values for a graph]{.body-text-s}     
[**4. position adjustments** -- control the fine details of position when geoms might otherwise overlap]{.body-text-s}     
[5. coordinate system -- change what `x` and `y` axes mean (e.g. Cartesian (default), polar, flipped)]{.body-text-s}       
[**6. facet** -- create subplots that each display one subset of the data]{.body-text-s}       

[**{{< fa palette title="a painter's palette" >}} "Enhancing communication" layers:**]{.teal-text}   

[**1. labels** -- add / update titles, axis / legend labels]{.body-text-s}     
[2. annotations -- add textual labels (e.g. to highlight specific data points or trend lines, etc.)]{.body-text-s}      
[**3. scales** -- update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)]{.body-text-s}     
[4. themes-- customize the non-data elements of your plot]{.body-text-s}      
[5. layout -- combine multiple plots into the same graphic]{.body-text-s}      

---

## {#basic-histogram data-menu-title="Create a basic histogram"} 

[{{< fa chart-line title="a line chart" >}} Initialize + map aesthetics + define geom]{.slide-title}

<hr>

We'll again start by initializing our plot object with data, mapping our aesthetics, and defining a geometric object. Note that the default statistical transformation for `geom_histogram()` is `stat = "bin"`:

```{r}
#| eval: true
#| echo: true
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm)) + 
  geom_histogram()
```

::: footer
[**data**]{.teal-text} | [**geometric object**]{.teal-text} | statistical transformation | position adjustment | coordinate system | facet 
:::

---

## {#color-bins-by-spp data-menu-title="Color bins by species"} 

[{{< fa palette title="a painter's palette" >}} Use color to differentiate species]{.slide-title}

<hr>

[Just like in our scatterplot (Plot #1), we'll modify our plot's aesthetics (i.e. inside `aes()`) to color our histrogram bins according to the species variable. Unlike our scatterplot (which uses the `color` argument), we'll use the `fill` argument to *fill* the bars with color (rather than *outline* them with color). We'll also manually define our fill scale:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "4,6"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

::: footer
labels | annotations | [**scales**]{.teal-text} | themes | layout 
:::

---

## {#pos-default-hist data-menu-title="Update position geom_histogram()"} 

[{{< fa chart-line title="a line chart" >}} Update the default position to `"identity"`]{.slide-title2}

<hr>

Let's update the position of our binned bars from `"stack"` to `"identity"` and also increase the transparency (using `alpha`) so that we can see overlapping bars:
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "5"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

::: footer
data | geometric object | statistical transformation | [**position adjustment**]{.teal-text} | coordinate system | facet
:::

---

## {#labels data-menu-title="Labels"} 

[{{< fa palette title="a painter's palette" >}} Update / add plot labels]{.slide-title}

<hr>

Update axis and legend titles and add a plot title using `labs()`:
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "7-8"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575")) +
  labs(x = "Flipper length (mm)", y = "Frequency", fill = "Species",
       title = "Penguin Flipper Lengths")
```

::: footer
[**labels**]{.teal-text} | annotations | scales | themes | layout 
:::

---

## {#faceting data-menu-title="Faceting"} 

[{{< fa chart-line title="a line chart" >}} Create subplots using facets]{.slide-title}

<hr>

[Sometimes (particularly during the data exploration phase) it's helpful to create subplots (i.e. separate panels) of your data. Here we use `facet_wrap()` to separate our data by the `species` variable. By default, it creates a 1 x 3 matrix of plots. We can manually specify how many rows or columns we'd like using `nrow` or `ncol`:]{.body-text-s}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "9"
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575")) +
  labs(x = "Flipper length (mm)", y = "Frequency", fill = "Species",
       title = "Penguin Flipper Lengths") + 
  facet_wrap(~species, ncol = 1)
```

::: footer
data | geometric object | statistical transformation | position adjustment | coordinate system | [**facet**]{.teal-text}
:::

---

##  {#end-break data-menu-title="# End #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">See you next week!</p>
<p class="caption-text">*~ This is the end of Lesson 3 (of 3) ~*</p>
</div>

---

##  {#assignments data-menu-title="Assignments" background="#D8E7E7"}

::: {.center-text}
[Assignments]{.slide-title .dark-blue-text}
:::

<hr>

**End-of-class Survey #1 (EOC #1)** -- *Due [Mon 01/08]{.magenta-text} at 11:55pm*

::: {.body-text-s}
- 2 multiple choice
- 2 short answer
- 1 optional question
:::

. . . 

**Pre-course Reflection (SR #1)** -- *Due Sat [01/13]{.magenta-text} at 11:59pm*

::: {.body-text-s}
- 3 sets of questions about:
    - school & life
    - the way you learn best
    - some fun stuff
:::

. . . 

**Homework Assignment #1 (HW #1)** -- *Sat [01/20]{.magenta-text} at 11:59pm*

::: {.body-text-s}
- 2 parts:
    - interpreting & annotating ggplot code
    - finding data that you're interested in visualizing for your final assignment
:::

