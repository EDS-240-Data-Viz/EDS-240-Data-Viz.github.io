---
format: revealjs
editor_options: 
  chunk_output_type: console
---

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| layout-ncol: 2
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              important links                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# State-level precipitation by year/month: <https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/statewide/mapping>
# County-level precipitation by year/month: <https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/110/pcp/202310/1/value>
# Tutorial: <https://eriqande.github.io/rep-res-web/lectures/making-maps-with-R.html>

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(maps) 

#.........................get shape data.........................
states <- map_data("state")
counties <- map_data("county")

#....................import precipitation data...................
precip_counties <- read_csv(here::here("slides", "data", "county-precip-oct2023.csv"), skip = 4) |> 
  janitor::clean_names()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..............update names of counties df variables.............
us_counties <- counties |> 
  
  # select / rename cols of interest ----
  select(state = region, county = subregion, long, lat, group, order) |> 
  
  # make all county & state names Title Case ----
  mutate(county = str_to_title(county),
         state = str_to_title(state)) |> 
  
  # fix different spellings so that they match county names in precip data ----
  mutate(county = case_when(
    county == "De Kalb" ~ "DeKalb",
    county == "De Soto" ~ "DeSoto", # works for FL & MI
    county == "Du Page" ~ "DuPage",
    county == "La Porte" ~ "LaPorte",
    county == "Obrien" ~ "O'Brien",
    county == "Prince Georges" ~ "Prince George's",
    county == "Queen Annes" ~ "Queen Anne's",
    county == "Ste Genevieve" ~ "Ste. Genevieve",
    county == "La Moure" ~ "LaMoure",
    state == "Texas" & county == "De Witt" ~ "DeWitt",
    # county == "St. Marys" ~ "St. Mary's", # isn't working??
    TRUE ~ county
    )) |> 
  mutate(county = str_replace(string = county, pattern = "St ", replacement = "St. ")) |> 
  
  # remove DC & Yellowstone National Park ----
  filter(!state %in% c("District Of Columbia")) |> 
  filter(!county %in% c("Yellowstone National"))


#..........clean precip data & make sure var names match.........
precip_counties_wrangled <- precip_counties |> 
  
  # more intuitive col name ----
  rename(county = name) |> 
  
  # make all county & state names lower case ----
  mutate(county = str_to_lower(county),
         state = str_to_lower(state)) |>
  
  # remove recurring patterns ----
  mutate(county = str_remove(county, pattern = " county")) |> # across all county names
  mutate(county = str_remove(county, pattern = " parish")) |> # LA
  
  # make state & county names Title Case again ----
  mutate(county = str_to_title(county),
         state = str_to_title(state)) |> 
  
  # fix different spellings so that they match county names in precip data ----
  mutate(county = case_when(
    county == "Dekalb" ~ "DeKalb",
    county == "Desoto" ~ "DeSoto", # works for FL & MI
    state == "Louisiana" & county == "De Soto" ~ "DeSoto",
    county == "Dupage" ~ "DuPage",
    county == "Lasalle" ~ "La Salle",
    county == "Laporte" ~ "LaPorte",
    county == "O'brien" ~ "O'Brien",
    county == "Lamoure" ~ "LaMoure",
    state == "Texas" & county == "Dewitt" ~ "DeWitt",
    county == "St. Mary's" ~ "St. Marys",
    county == "Suffolk City" ~ "Suffolk",
    county == "Hampton City" ~ "Hampton",
    county == "Virginia Beach City" ~ "Virginia Beach",
    county == "Newport News City" ~ "Newport News",
    county == "Norfolk City" ~ "Norfolk",
    TRUE ~ county
  )) |> 
  
  # remove DC & other non-counties
  filter(!county %in% c("Washington, D.c.", "Alexandria City", "Bristol City")) |>
  
  # select & rename cols ----
  select(state, county, precip = value, mean_1901_2000 = x1901_2000_mean, anomaly = anomaly_1901_2000_base_period) |> 
  
  # coerce precip from chr to numeric ----
  mutate(precip = as.numeric(precip))

#............................join dfs............................
joined_precip_us_counties <- full_join(precip_counties_wrangled, us_counties)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                 create map                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# define palette ----
my_palette <- c("#543006", "#975F1C", "#AC7E42", "#C09C66", "#D6BB8C", "#EBD9B0","#D5D4CE",
                 "#B2DDD7", "#8BC2BC", "#64A7A1", "#3B8E86", "#16726B", "#003C30")

# create map -----
ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) + 
  geom_polygon(data = joined_precip_us_counties, aes(fill = precip)) + 
  coord_map(projection = "mercator") +
  geom_polygon(color = "#2F2D2C", fill = NA, linewidth = 0.1) +
  scale_fill_gradientn(colors = my_palette) +
  guides(fill = guide_colorbar(title = "Precipitation (inches)",
                                 title.position = "top",
                                 barwidth = 15, barheight = 1)) +
  labs(title = "Total Precipitation, by County",
       subtitle = "October 2023") +
  theme_void() + 
  theme(
    legend.position = "bottom"
  )

# ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) + 
#   coord_fixed(1.3) + 
#   geom_polygon(data = joined_precip_us_counties, aes(fill = precip)) + #, color = "gray"
#   geom_polygon(color = "#2F2D2C", fill = NA, linewidth = 0.1) +
#   scale_fill_gradientn(colours = rev(c("#B10025", "#FF8A37", "#FBFE82", "#00712F", "#9CDC94", "#C2EDBA", "#FFFFFF")), 
#                        breaks = c(0, 2, 4, 6, 8, 10, 12)) +
#   labs(title = "Total Precipitation, by County",
#        subtitle = "October 2023",
#        fill = "Precip\n(inches)") +
#   theme_void()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              create bar chart                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...............precipitation data for CA counties...............
ca_precip <- precip_counties_wrangled |> 
  filter(state == "California") |> 
  mutate(county = str_to_title(county))

#.........................create barplot.........................

ca_precip |> 
  slice_max(n = 20, order_by = precip) |> 
  ggplot(aes(x = reorder(county, precip), y = precip)) +
  geom_bar(stat = "identity", width = 0.9, fill = "#635F5F") +
  coord_flip() +
  labs(x = "", y = "Total Precipitation (inches)",
       title = "Top 20 California counties to recieve the most rainfall in October 2023") +
  theme_classic()
```



