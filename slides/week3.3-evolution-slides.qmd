---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 3.3]{.custom-title}

[*Visualizing evolution*]{.custom-subtitle}

<hr class="hr-teal">

[Week 3 | January 22^nd^, 2024]{.custom-subtitle3}

---

## {#viz-evolution data-menu-title="Visualizing evolution"} 

[Visualizing data *evolution*?]{.slide-title}

<hr>

<br>
<br>

. . .

::: {.body-text-l .center-text}
Visualizing the change in a **numeric variable** over some unit of time.
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
library(tidyverse)

data <- tribble(
  ~time, ~value,
  1, 111,
  2, 110.5,
  3, 109.8, 
  4, 105,
  5, 108.9,
  6, 107.6,
  7, 116.8,
  8, 115.1,
  9, 117.6,
  10, 109.9,
)

ggplot(data, aes(x = time, y = value)) +
  geom_line() +
  labs(
    x = "Time\n(when measurement was taken)",
    y = "Values\n(an ordered numeric variable)"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  theme(axis.title = element_text(size = 17)) 
```

---

Roadmap

---

## {#lyme-data data-menu-title="Lyme disease by state"} 

[The data: Lyme disease]{.slide-title}

<hr>

[Lyme disease has been a nationally notifiable condition in the United States since 1991. Reports of Lyme disease are collected and verified by local and state health departments, anonymized by the [National Notifiable Diseases Surveillance System](https://www.cdc.gov/nndss/index.html) (NNDSS), then shared with [Centers for Disease Control and Prevention](https://www.cdc.gov/) (CDC). The CDC has developed a public use data set for [download](https://www.cdc.gov/lyme/stats/survfaq.html) to facilitate the public health and research communityâ€™s access to NNDSS data on Lyme disease.]{.body-text-s}

:::: columns

::: {.column width="33%"}
<br>
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week3/cdc-logo.png")
```
:::

::: {.column width="33%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week3/tick-cartoon.png")
```
:::

::: {.column width="33%"}

<br>
<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week3/census-bureau-logo.png")
```
:::

::::

[Using the publicly-available CDC data on Lyme disease and population estimates from the [US Census Bureau](https://www.census.gov/) (via the [`{tidycensus}` package]()), we'll explore **changes in Lyme disease cases over time**, by state.]{.body-text-s}

::: notes
NNDSS is a nationwide collaboration that enables all levels of public health to share health information to monitor, control, and prevent the occurrence and spread of state-reportable and nationally notifiable infectious (and some noninfectious) diseases and conditions.
:::

---

## {#tidycensus data-menu-title="{tidycensus} package"} 

[`{tidycensus}` for ___ ]{.slide-title}

<hr>

:::: columns

::: {.column width="50%"}

<br>
<br>

The [`{tidycensus}` package]() is ____

Using `{tidycensus}` requires that you first have an API key. Be sure to follow the [Pre-Course setup instructions]() for requesting and activating your key before proceeding.
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/tidycensus.png")
```
:::

::::

---

## {#lyme-wrangling data-menu-title="Wrangle data"} 

[Data wrangling]{.slide-title}

<hr>

<!-- {{< include slides/sections/3.3-lyme.qmd >}} -->

See the [online documentation](https://walker-data.com/tidycensus/articles/other-datasets.html#:~:text=Population%20estimates%20are%20available%20in,%22%20%2C%20and%20%22characteristics%22%20.) for more information on downloading and parsing population data using the `{tidycensus}` package.
```{r}
#| eval: false
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.........................load libraries.........................
library(tidycensus)
library(tidyverse)
library(janitor)
library(gghighlight)

#.........................source API key.........................
source(here::here("KEYS.R"))
census_api_key(censusKEY)

#..........................import data...........................
lyme <- read_csv(here::here("week3", "data", "LD-Case-Counts-by-County-01-20.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          wrangle lyme disease data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#............wide to long (plus some other wrangling)............
lyme_clean <- lyme |> 
  janitor::clean_names() |> 
  rename(city = ctyname, state = stname, status = ststatus) |> 
  pivot_longer(cols = 6:25, names_to = "city_year", values_to = "reported_cases") |> 
  mutate(year = str_remove(city_year, pattern = "cases"),
         year = as.numeric(year)) |> 
  select(year, city, state, status, reported_cases)

#................calculate total cases per state.................
lyme_states <- lyme_clean |> 
  group_by(year, state) |> 
  summarize(total_cases = sum(reported_cases)) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                      request / wrangle population data                   ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................get pop estimates by state...................
us_state_pop <- get_estimates(geography = "state", 
                              product = "population",
                              state = NULL, 
                              year = 2019) |> 
  filter(variable == "POP") |> 
  select(state = NAME, population = value) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            join lyme & pop dfs                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

lyme_pop <- left_join(lyme_states, us_state_pop) |> 
  mutate(pop100k = population/100000) |> # add col with num of 100k people per state
  mutate(cases_per100k = total_cases/pop100k) # calculate num bases per 100k people
```

---


Line graphs 

just NJ

add connections

---

cutting y-axs okay
aspect ratio (width:height)
no dual axes (e.g. avg temp each year on 2nd y-axis)

---

Avoiding spaghetti graphs

gghighlight NJ

---

## {#drought-data data-menu-title="Drought data"}

[The data: California droughts]{.slide-title}

<hr>

The [U.S. Drought Monitor](https://droughtmonitor.unl.edu/) (USDM) is a collection of measures that allows experts to assess droughts in the United States. You can download and explore comprehensive statistics through their [data portal](https://droughtmonitor.unl.edu/DmData/DataDownload/ComprehensiveStatistics.aspx).

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
#| fig-alt: "Percentage area of California in U.S. drought monitor categories"
knitr::include_graphics("images/week3/usdm.png")
```

::: {.body-text-s .gray-text .center-text}
*Percentage area of California in U.S. drought monitor categories. Source [Wikipedia](https://en.wikipedia.org/wiki/Droughts_in_California#:~:text=County%20municipal%20rates.-,Dry%20years,2017%2C%20and%202020%E2%80%932022.)*
:::

<br>

Using these data, we'll explore **drought conditions in California** through time.

---

## {#lyme-wrangling data-menu-title="Wrangle data"} 

[Data wrangling]{.slide-title}

<hr>

<!-- {{< include ../slides/sections/3.3-drought.qmd >}} -->

```{r}
#| eval: false
#| echo: true

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.........................load libraries.........................
library(tidyverse)

#..........................import data...........................
tuesdata <- tidytuesdayR::tt_load('2021-07-20')
drought <- tuesdata$drought
  
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          wrangle lyme disease data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

drought_clean <- drought |>

  # select cols of interest ----
  select(date = valid_start, state_abb, drought_lvl, area_pct) |> 

  # add year col ----
  mutate(year = year(date),
         month = month(date, label = TRUE, abbr = TRUE),
         day = day(date)) |>
  
  # convert year to factor ----
  mutate(year = as.factor(year)) |> 

  # add drought level conditions names ----
  mutate(drought_lvl_long = factor(drought_lvl,
                            levels = c("D4", "D3", "D2", "D1","D0", "None"),
                            labels = c("Exceptional Drought", "Extreme Drought",
                                       "Severe Drought", "Moderate Drought", "Abnormally Dry", 
                                       "No Drought"))) |>
  
  # reorder cols ----
  select(date, year, month, day, state_abb, drought_lvl, drought_lvl_long, area_pct)

```

---

stacked area chart

---

stream graph

---


---


##  {#end-break data-menu-title="# End / Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ This is the end of Lesson 3 (of 3) ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```





