---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 3.3]{.custom-title}

[*Visualizing evolution*]{.custom-subtitle}

<hr class="hr-teal">

[Week 3 | January 22^nd^, 2024]{.custom-subtitle3}

---

## {#viz-evolution data-menu-title="Visualizing evolution"} 

[Visualizing data *evolution*?]{.slide-title}

<hr>

<br>
<br>

. . .

::: {.body-text-l .center-text}
Visualizing the change in a **numeric variable** over some unit of time.
:::

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "60%"
library(tidyverse)

data <- tribble(
  ~time, ~value,
  1, 111,
  2, 110.5,
  3, 109.8, 
  4, 105,
  5, 108.9,
  6, 107.6,
  7, 116.8,
  8, 115.1,
  9, 117.6,
  10, 109.9,
)

ggplot(data, aes(x = time, y = value)) +
  geom_line() +
  labs(
    x = "Time\n(when measurement was taken)",
    y = "Values\n(an ordered numeric variable)"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  theme(axis.title = element_text(size = 17)) 
```

---

Roadmap

---

## {#lyme-data data-menu-title="Lyme disease by state"} 

[The data: Lyme disease]{.slide-title}

<hr>

[Lyme disease has been a nationally notifiable condition in the United States since 1991. Reports of Lyme disease are collected and verified by local and state health departments, anonymized by the [National Notifiable Diseases Surveillance System](https://www.cdc.gov/nndss/index.html) (NNDSS), then shared with [Centers for Disease Control and Prevention](https://www.cdc.gov/) (CDC). The CDC has developed a public use data set for [download](https://www.cdc.gov/lyme/stats/survfaq.html) to facilitate the public health and research community’s access to NNDSS data on Lyme disease.]{.body-text-s}

:::: columns

::: {.column width="33%"}
<br>
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week3/cdc-logo.png")
```
:::

::: {.column width="33%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week3/tick-cartoon.png")
```
:::

::: {.column width="33%"}

<br>
<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("images/week3/census-bureau-logo.png")
```
:::

::::

[Using the publicly-available CDC data on Lyme disease and population estimates from the [US Census Bureau](https://www.census.gov/) (via the [`{tidycensus}` package]()), we'll explore **changes in Lyme disease cases over time**, by state.]{.body-text-s}

::: notes
NNDSS is a nationwide collaboration that enables all levels of public health to share health information to monitor, control, and prevent the occurrence and spread of state-reportable and nationally notifiable infectious (and some noninfectious) diseases and conditions.
:::

---

## {#tidycensus data-menu-title="{tidycensus} package"} 

[`{tidycensus}` for accessing US population data]{.slide-title2}

<hr>

:::: columns

::: {.column width="50%"}

<br>
<br>
<br>

The [`{tidycensus}` package](https://walker-data.com/tidycensus/) allows users to interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames.

<br>

Using `{tidycensus}` requires that you first have an API key. **Be sure to follow the Pre-Course setup [instructions for requesting and activating your key](https://samanthacsik.github.io/EDS-240-data-viz/course-materials/week3.html#request-a-us-census-bureau-api-key) before proceeding.**
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "90%"
knitr::include_graphics("images/week3/tidycensus.png")
```
:::

::::

---

## {#lyme-wrangling data-menu-title="Wrangle data"} 

[Data wrangling]{.slide-title}

<hr>

{{< include sections/3.3-lyme.qmd >}}

See the [online documentation](https://walker-data.com/tidycensus/articles/other-datasets.html#:~:text=Population%20estimates%20are%20available%20in,%22%20%2C%20and%20%22characteristics%22%20.) for more information on downloading and parsing population data using the `{tidycensus}` package.
```{r}
#| eval: false
#| echo: true
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.........................load libraries.........................
library(tidycensus)
library(tidyverse)
library(janitor)
library(gghighlight)

#.........................source API key.........................
source(here::here("KEYS.R"))
census_api_key(censusKEY)

#..........................import data...........................
lyme <- read_csv(here::here("week3", "data", "LD-Case-Counts-by-County-01-20.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          wrangle lyme disease data                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#............wide to long (plus some other wrangling)............
lyme_clean <- lyme |> 
  
  # make col names snake_case ----
  janitor::clean_names() |> 
  
  # rename columns ----
  rename(city = ctyname, state = stname, status = ststatus) |> 
  
  # wide to long (tidy) years
  pivot_longer(cols = 6:25, names_to = "city_year", values_to = "reported_cases") |> 
  
  # remove "cases" from the year & coerce year from chr to factor ----
  mutate(year = str_remove(city_year, pattern = "cases"),
         year = as.factor(year)) |> 
  
  # select necessary cols ----
  select(year, city, state, status, reported_cases)

#................calculate total cases per state.................
lyme_states <- lyme_clean |> 
  group_by(year, state) |> 
  summarize(total_cases = sum(reported_cases)) 

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                      request / wrangle population data                   ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................get pop estimates by state...................
us_state_pop <- get_estimates(geography = "state", 
                              product = "population",
                              state = NULL, 
                              year = 2019) |> 
  filter(variable == "POP") |> 
  select(state = NAME, population = value) 

#........................write data to csv.......................
# optional, but recommended in case you want to work offline, the API is down, etc. (you can then read in your saved data file rather than run the above code)
write_csv(us_state_pop, file = here::here("week3", "data", "us_state_pop.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            join lyme & pop dfs                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

lyme_pop <- left_join(lyme_states, us_state_pop) |> 
  
  # add col with num of 100k people per state ----
  mutate(pop100k = population/100000) |> 
  
  # calculate num cases per 100k people (common way of reporting disease incidence) ----
  mutate(cases_per100k = total_cases/pop100k) 
```

---

## {#basic-line-plot1 data-menu-title="Line plot"} 

[Line plots show the evolution of 1+ numeric variables]{.slide-title3}

<hr>

[Line graphs display the **evolution of one or several *numeric* variables**. They are similar to scatter plots, but the measurement points are **ordered** (typically by their x-axis value) and joined with straight line segments. They are often used to visualize a trend in data over intervals of time. For example, changes in Lyme disease incidence (# cases / 100k people) from 2010 - 2020, by state:]{.body-text-s}

:::: columns

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
A basic line graph using `geom_line()`
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) + 
  geom_line()
```
:::

::: {.column width="50%"}

:::

::::

---

## {#basic-line-plot2 data-menu-title="Connected line plot"} 

[Line plots show the evolution of 1+ numeric variables]{.slide-title3}

<hr>

[Line graphs display the **evolution of one or several *numeric* variables**. They are similar to scatter plots, but the measurement points are **ordered** (typically by their x-axis value) and joined with straight line segments. They are often used to visualize a trend in data over intervals of time. For example, changes in Lyme disease incidence (# cases / 100k people) from 2010 - 2020, by state:]{.body-text-s}

:::: columns

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
A basic line graph using `geom_line()`
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) + 
  geom_line()
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
A connected scatter plot by layering on `geom_point()`
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) + 
  geom_line() +
  geom_point()
```
:::

::::

---

## {#spaghetti-plot data-menu-title="Avoid Spaghetti plots"} 

["Spaghetti plots" are hard to read]{.slide-title}

<hr>

A line plot with many lines displayed together can be hard to read / overwhelming to interpret. Consider highlighting a group(s) of interest (the [`{gghighlight}` package](https://yutannihilation.github.io/gghighlight/) comes in handy):

:::: columns

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
E.g. I'm interested in how Lyme disease in New Jersey compares to other states.
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  gghighlight::gghighlight(state == "New Jersey") 
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
E.g. I'm interested in states where Lyme disease incidence is (or at one point was) > 100 cases / 100k people.
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +
  geom_line() +
  gghighlight::gghighlight(max(cases_per100k) > 100) 
```
:::

::::

---

## {#cut-y data-menu-title="Cutting y-axis"} 

[It's okay to cut the y-axis of line graphs]{.slide-title}

<hr>

Line graphs encode data by **position** and not **length** (e.g. as in the height of a bar graph), therefore, you can choose to include the 0 origin only if it makes sense.

:::: columns 

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Lyme disease incidence from 2013 - 2019  
(cut y-axis = default)
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2013:2019)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line()
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Lyme disease incidence from 2013 - 2019  
(force y-axis origin at 0)
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2013:2019)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
```

:::

::::

---

## {#cut-y-dow data-menu-title="Cutting y-axis (Dow)"} 

[It's okay to cut the y-axis of line graphs]{.slide-title}

<hr>

*Do not* start the y-axis at 0 if the **range of data is small but the distance from the bottom of the range to zero is large**. For example:

:::: columns 

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/dow-uncut-y.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/dow-cut-y.png")
```
:::

::::

::: footer
Example from [Meagan Hall](https://meghan.rbind.io/)'s [Statistical Graphics & Visualization](https://cmu-36315.netlify.app/) course [Lecture 5 slides](https://cmu-36315.netlify.app/slides/36-315_summer2021_lec5#1).
:::

---

## {#cut-y-temps data-menu-title="Cutting y-axis (Temps)"} 

[It's okay to cut the y-axis of line graphs]{.slide-title}

<hr>

*Do not* start the y-axis at 0 if the **relationship to zero is insignificant**. For example:

:::: columns 

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/temps-uncut-y.png")
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/temps-cut-y.png")
```
:::

::::

::: footer
Example from [Meagan Hall](https://meghan.rbind.io/)'s [Statistical Graphics & Visualization](https://cmu-36315.netlify.app/) course [Lecture 5 slides](https://cmu-36315.netlify.app/slides/36-315_summer2021_lec5#1).
:::

--- 

## {#aspect-ratio data-menu-title="Aspect ratio"} 

[Aspect ratio affects perception of slope]{.slide-title}

<hr>

[The aspect ratio is the **height:width ratio of a graph**. The **larger the aspect ratio, the steeper changes appear**, which may cause readers to **interpret changes as more important**. The **smaller the aspect ratio, the flatter the line** which may cause readers to **interpret changes as small / insignificant**.]{.body-text-s}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/aspect-ratio.png")
```

::: {.center-text}
[Image source: [Graph workflow](https://graphworkflow.com/enhancement/aspect/#:~:text=The%20aspect%20ratio%20of%20a,%3A10%20or%2016%3A9.)]{.gray-text}
:::

[There's **no exact rule** for what aspect ratio to use for a given graphic (but see [Cleveland et al. 1988](https://www.jstor.org/stable/2288843) to read about the "banking to 45 degrees" rule) -- it depends on the nature of the variable and your goal with the visualization. *However* it's important to keep mind that manipulating the aspect ratio can mislead readers, and so you should do so carefully.]{.body-text-s}

--- 

## {#aspect-ratio-sunspots-default data-menu-title="Aspect ratio (sunspots 1)"} 

[Aspect ratio affects perception of slope]{.slide-title}

<hr>

Consider this line graph of sunspot activity from 1700 - 2015, with a default aspect ratio (1:1). Can you easily identify where in time sunspot activity rises more quickly / sharply than others?

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/sunspot-default-ar.png")
```

::: {.center-text}
[Image source: [Graph workflow](https://graphworkflow.com/enhancement/aspect/#:~:text=The%20aspect%20ratio%20of%20a,%3A10%20or%2016%3A9.)]{.gray-text}
:::

--- 

## {#aspect-ratio-sunspots-wide data-menu-title="Aspect ratio (sunspots 2)"} 

[Aspect ratio affects perception of slope]{.slide-title}

<hr>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("images/week3/sunspot-wide-ar.png")
```

:::: columns

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
knitr::include_graphics("images/week3/sunspot-wide-ar-panels.png")
```
:::

:::: {.column width="50%"}

<br>

**Note:** The bottom plot is the same as the top, but with the x-axis split into panels / rows, by decade.

With a wider aspect ratio, we can more clearly see the differences in rates of change (slopes) in sunspot activity through time.
:::

::::

::: {.center-text}
[Image source: [Graph workflow](https://graphworkflow.com/enhancement/aspect/#:~:text=The%20aspect%20ratio%20of%20a,%3A10%20or%2016%3A9.)]{.gray-text}
:::

---

## {#ggplot-default-ar data-menu-title="ggplot's default aspect ratio"} 

[ggplot without a fixed aspect ratio]{.slide-title}

<hr>

Let's first look at Lyme disease incidence for Vermont from 2010 - 2020 without adjusting the aspect ratio.:

```{r}
#| eval: true
#| echo: true
#| fig-align: "center"
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line()
```

---

## {#ggplot-default-ar-ticks data-menu-title="ggplot's default aspect ratio"} 

[ggplot without a fixed aspect ratio]{.slide-title}

<hr>

We have 10 units on our x-axis (`year` ranges from 2010 - 2020), and ~175 units (`case_per100k` ranges from 0 to ~175) on our y-axis. By default, ggplot adjusts the space between each x-axis unit so that they are wider apart than each y-axis unit, making the plot easier to read. Below, we've added in tick marks for each y-axis unit, to better highlight this (a single tick already existed for each of our 10 x-axis units):

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "Vermont") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  scale_y_continuous(breaks = seq(0, 175, by = 1)) 
```

---

## {#aspect-ratio-ggplot-equal data-menu-title="Adjust aspect ratio (ratio = 1)"} 

[Adjust the aspect ratio using `coord_fixed()`]{.slide-title2}

<hr>

:::: columns 

::: {.column width="50%"}
We can use `coord_fixed()` to fix the aspect ratio of our plot. The `ratio` argument controls the aspect ratio, which is expressed as `y / x` and by default is `ratio = 1`. This means that the height of one y-unit is equal to the width of one x-unit (paying attention to the grid lines and tick marks here can be helpful). 

Because we have 175 y-axis units and only 10 x-axis units, fixing our aspect ratio at 1:1 means our plot gets taller and squished.
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(state == "Vermont") |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(breaks = seq(0, 175, by = 1)) +
  coord_fixed(ratio = 1)
```
:::

::::

---

## {#aspect-ratio-ggplot-update data-menu-title="Adjust aspect ratio"} 

[Adjust the aspect ratio using `coord_fixed()`]{.slide-title2}

<hr>

Ratios > 1 will make units on the y-axis longer than units on the x-axis (resulting in steeper slopes). Ratios < 1 will make units on the x-axis longer than units on the y-axis (resulting in shallower slopes).

If we want to make our graph wider, we'll need to update `ratio` so that it's < 1. For example:

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(state == "Vermont") |> 
  filter(year %in% c(2010:2020)) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_line() + 
  scale_y_continuous(breaks = seq(0, 200, by = 1)) +
  coord_fixed(ratio = 1/50)
```

Play around with `ratio` yourself and see how it changes.

---

## {#area-chart data-menu-title="Area chart"} 

[Area chart is similar to a line graph, just filled in]{.slide-title2}

<hr>

[Instead of just a line or connected scatter plot to indicate the change in a numeric variable through time, the space between the line and the x-axis is colored or shaded in. Area plots are sometimes criticized for **violating the [data-ink ratio](https://infovis-wiki.net/wiki/Data-Ink_Ratio) rule**, which argues that any non-data-ink should be omitted wherever possible. If the number of observations is low (as in this example) a connected scatter plot may more clearly show when each observation was made.]{.body-text-s}

:::: columns

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
A basic area plot (New Jersey)
:::

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "New Jersey") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state)) +
  geom_area() 
```
:::

::: {.column width="50%"}

::: {.center-text .gray-text .body-text-s}
Update the fill color
:::

```{r}
#| eval: true
#| echo: true
#| out-width: "80%"
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state == "New Jersey") |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area() +
  scale_fill_manual(values = c("#047C90")) +
  theme(legend.position = "none")
```
:::

::::

---

## {#stacked-area-chart data-menu-title="Stacked area chart"} 

[Stacked area charts show the evolution of a whole + the relative contribution of each group]{.slide-title3}

<hr>

[**Stacked area charts are useful for showing the evolution of a whole and the relative proportions of each group that make up the whole**. For example, the top of the colored area shows the total Lyme disease incidence (# cases / 100k people) across all groups (notice the difference in y-axis values), while the individual colors are the relative contributions of the top 4 states with the highest lyme disease incidence:]{.body-text-s}

```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area()
```

---

## {#stacked-area-group-order data-menu-title="Stacked area group order"} 

[Group order matters!]{.slide-title}

<hr>

[Group order (from bottom to top) can have an influence -- oftentimes, you'll want to **put the most important group on the bottom (closest to the x-axis)**, since your audience will have an easier time reading values for that group. For example, [US Drought Monitor](https://droughtmonitor.unl.edu/) likely wanted to draw attention to what percentage of land area in CA experienced the highest-severity drought level (D4, Exceptional). By plotting that group on the bottom of the graph below, we can more easily identify that ~60% of CA experienced the worst level of drought in 2014-2015.]{.body-text-s}

:::: columns 

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "70%"
#| fig-alt: "Percentage area of California in U.S. drought monitor categories"
knitr::include_graphics("images/week3/usdm.png")
```
:::

::: {.column width="50%"}

<br>
<br>

{{< fa arrow-left title="an arrow pointing to the left" >}} You'll be recreating this graph (original source US Drought Monitor, via [Wikipedia](https://en.wikipedia.org/wiki/Droughts_in_California#:~:text=County%20municipal%20rates.-,Dry%20years,2017%2C%20and%202020%E2%80%932022.)) in discussion section this week!
:::

::::

[[This article](https://inforiver.com/insights/stacked-area-charts-when-to-use-and-avoid/) by Info River nicely outlines situations where using a stacked area chart is great, when not to use them, and important considerations.]{.body-text-s}

---

## {#stacked-area-chart-challenge data-menu-title="Stacked area chart challenge"} 

[Stacked area charts are not good for studying the evolution of individual groups]{.slide-title3}

<hr>

It is super **challenging to subtract the height of groups from one another at any / each given point in time**. For example, both of the charts below show the same data (Lyme disease incidence (# cases / 100k people) for Maine, New Hampshire, Rhode Island, and Vermont): 

:::: columns

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_area()
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
lyme_pop |> 
  filter(year %in% c(2010:2020)) |> 
  filter(state %in% c("Maine", "Rhode Island", "New Hampshire", "Vermont")) |> 
  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +
  geom_line() +
  facet_wrap(~state)
```
:::

::::

---


##  {#end data-menu-title="# End #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">See you next week!</p>
<p class="caption-text">*~ This is the end of Lesson 3 (of 3) ~*</p>
</div>

---

##  {#assignments data-menu-title="Assignments" background="#D8E7E7"}

::: {.center-text}
[Assignments]{.slide-title .dark-blue-text}
:::

<hr>

<br>

[**End-of-class Survey week 3 (EOC #2)** -- *Due [Mon 01/22]{.magenta-text} at 11:55pm*]{.body-text-m}

- 2 multiple choice + 2 short answer + 1 optional question

. . . 

[**Homework Assignment #2 (HW #2)** -- *Due [Sat 02/03]{.magenta-text} at 11:59pm*]{.body-text-m}

- tbd


