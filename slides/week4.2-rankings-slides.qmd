---
format: 
  revealjs:
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - ../meds-slides-styles.scss
editor_options: 
  chunk_output_type: console
---

## {#title-slide data-menu-title="Title Slide" background="#053660"} 

[EDS 240: Lecture 4.1]{.custom-title}

[*Visualizing rankings*]{.custom-subtitle}

<hr class="hr-teal">

[Week 4 | January 29^th^, 2024]{.custom-subtitle3}

---

## {#data-ranking data-menu-title="Data rankings"} 

[Visualizing data *rankings*?]{.slide-title}

<hr>

<br>
<br>
<br>

[Showing the relationship between a **numeric and categorical variable**, i.e. comparing categorical groups based on their values.]{.body-text-m}

<!-- often with the intent to arrange categorical variables in order based on their value (from high to low, low to high). -->

<br>

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
library(tidyverse)

data <- tribble(
  ~group, ~value,
  "A", 10,
  "B", 14, 
  "C", 12,
  "D", 15
)

ggplot(data, aes(x = group, y = value)) +
  geom_col() + 
  labs(x = "Categorical variable",
       y = "Numeric variable") +
  theme(axis.title = element_text(size = 17)) 
```

---

## {#roadmap data-menu-title="Roadmap"} 

[Roadmap]{.slide-title}

<hr>

---

## {#job-data data-menu-title="About the data"} 

[The data: women in the workforce]{.slide-title}

<hr>

<https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-03-05>

---

## {#data-wrangling data-menu-title="About the data"} 

[Data wrangling]{.slide-title}

<hr>

Data are downloaded from GitHub, courtesy of the [TidyTuesday community](https://github.com/rfordatascience/tidytuesday/tree/master), which explored [these data](https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-03-05) in March 2019.

```{r}
#| eval: true
#| echo: true


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)

#..........................import data...........................
jobs_gender <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs_gender_clean <- jobs_gender |> 
  
  # add cols (needed for dumbbell plot) ----
  mutate(percent_male = 100 - percent_female, # % of females within each industry was already included
         difference_earnings_male_female = total_earnings_male - total_earnings_female) |>  # diff in earnings between M & F
         #avg_salary = ((total_earnings_male + total_earnings_female)/2)) |> # avg salary of an industry (will be used for ordering); TRY INSTEAD BY `total_earnings`
  
  # rearrange columns ----
  relocate(year, major_category, minor_category, occupation,
          total_workers, workers_male, workers_female,
          percent_male, percent_female,
          total_earnings, total_earnings_male, total_earnings_female, difference_earnings_male_female,
          wage_percent_of_male) |> # , avg_salary
  
  # drop rows with missing earning data ----
  drop_na(total_earnings_male, total_earnings_female) |> 
  
  # make occupation a factor ----
  mutate(occupation = as_factor(occupation)) |> 
  
  # ---- these next steps are necessary for creating our dumbbell plots ----

  # classify jobs by percentage male or female ----
  mutate(percentage_group_long = case_when(
    percent_female >= 75 ~ "Occupations that are 75%+ female",
    percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
    percent_male >= 75 ~ "Occupations that are 75%+ male"
  )) |> 
  
  # column with short names for groups ----
  mutate(percentage_group_short = case_when(
    percent_female >= 75 ~ "f75",
    percent_female >= 45 & percent_female <= 55 ~ "f50",
    percent_male >= 75 ~"m75"
  )) |> 
  
  # relevel factors (for plotting) ----
  mutate(percentage_group_short = fct_relevel(percentage_group_short, "f75", "f50", "m75"),
         percentage_group_long = fct_relevel(percentage_group_long, "Occupations that are 75%+ female", "Occupations that are 45-55% female", "Occupations that are 75%+ male")) 
```

---

## {#barplot data-menu-title="Barplot"} 

[Barplot: the most common way to visualize rankings]{.slide-title3}

<hr>

[Let's first explore the top ten occupations with the highest median earnings in 2016 (full-time workers > 16 years old). Here, we'll use `geom_col()` since our data is already summarized (i.e. we have total estimated median earnings (`total_earnings`), which will be represented by bar height).]{.body-text-s}

```{r}
#| eval: true
#| echo: true 
#| out-width: "40%"
jobs_gender_clean |> 
  
  # filter for year 2016 ----
  filter(year == 2016) |> 
  
  # keep top 10 jobs with most total_earnings ----
  slice_max(order_by = total_earnings, n = 10) |> 
  
  ggplot(aes(x = occupation, y = total_earnings)) +
  geom_col()
```

::: notes
An example of using `geom_bar()` to create bars based off counts in our data set
```{r}
ggplot(jobs_gender_clean, aes(x = major_category)) +
  geom_bar() + 
  coord_flip()
```
:::

---

## {#coord-flip data-menu-title="Flip axes"} 

[Consider flipping axes when x-axis labels are long]{.slide-title3}

<hr>

```{r}
#| eval: true
#| echo: true 
#| code-line-numbers: "11"
#| out-width: "40%"
jobs_gender_clean |> 
  
  # filter for year 2016 ----
  filter(year == 2016) |> 
  
  # keep top 10 jobs with most total_earnings ----
  slice_max(order_by = total_earnings, n = 10) |> 
  
  ggplot(aes(x = occupation, y = total_earnings)) +
  geom_col() +
  coord_flip()
```

---

## {#arrange-bars data-menu-title="Arrange bars"} 

[Reordering groups helps readers derive insight]{.slide-title2}

<hr>

[Here, we use `forcats::fct_reorder()` to reorder the levels of our x-axis variable, `occupation` based on a numeric variable, `total_earnings` (NOTE: we do *not* have to reorder based on the same numeric variable that's plotted on the y-axis):]{.body-text-s}
```{r}
#| eval: true
#| echo: true 
#| code-line-numbers: "9"
jobs_gender_clean |> 
  
  # filter for year 2016 ----
  filter(year == 2016) |> 
  
  # keep top 10 jobs with most total_earnings ----
  slice_max(order_by = total_earnings, n = 10) |> 
  
  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings)) +
  geom_col() +
  coord_flip()
```

---

## {#more-cat-groups data-menu-title="2+ categorical groups"} 

[Plotting 2+ categorical groups]{.slide-title2}

<hr>

Default `position = "stack"`:

```{r}
#| eval: true
#| echo: true 
jobs_gender_clean |> 
  
  # filter for year 2016 ----
  filter(year == 2016) |> 
  
  # keep top 10 jobs with most total_earnings ----
  slice_max(order_by = total_earnings, n = 10) |> 
  
  # wide to long (male vs female earnings) ----
  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = "group", values_to = "earnings_by_group") |> 
  
  # remove part of string, leaving only "male" or "female" in `sex` column ----
  mutate(sex = str_remove(group, pattern = "total_earnings_")) |> 
  
  ggplot(aes(x = occupation, y = earnings_by_group, fill = sex)) +
  geom_col()
```

---

## {#dodge data-menu-title="Dodge columns"} 

[Dodge groups]{.slide-title2}

<hr>

Update `position = "dodge"`:

```{r}
#| eval: true
#| echo: true 
jobs_gender_clean |> 
  
  # filter for year 2016 ----
  filter(year == 2016) |> 
  
  # keep top 10 jobs with most total_earnings ----
  slice_max(order_by = total_earnings, n = 10) |> 
  
  # wide to long (male vs female earnings) ----
  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = "group", values_to = "earnings_by_group") |> 
  
  # remove part of string, leaving only "male" or "female" in `sex` column ----
  mutate(sex = str_remove(group, pattern = "total_earnings_")) |> 
  
  ggplot(aes(x = occupation, y = earnings_by_group, fill = sex)) +
  geom_col(position = "dodge")
```


---

## {#no-cont-data data-menu-title="No continous data"} 

[Bar charts were designed for *categorical* data...]{.slide-title2}

<hr>

...but they're often (incorrectly) used to visualize continuous data

Weissgerber et al. (2015) Beyond Bar and Line Graphs: Time for a New Data Presentation Paradigm. *PLOS Biology* 13:e1002128 <https://doi.org/10.1371/journal.pbio.1002128>

---

## {#barchart-alts data-menu-title="Barchart alternatives"} 

[Consider barchart alternatives]{.slide-title2}

<hr>

:::: columns



::::

---

##  {#end-break data-menu-title="# Break #" background="#047C90"}

<div class="page-center vertical-center">
<p class="custom-subtitle bottombr">{{< fa mug-hot title="a mug with steam rising out the top" >}} Take a Break</p>
<p class="caption-text">*~ This is the end of Lesson 2 (of 3) ~*</p>
</div>

```{r}
countdown::countdown(
  minutes = 5,
  # left = 0, right = 0,
  # Fanfare when it's over
  play_sound = TRUE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "2em",
  )
```
