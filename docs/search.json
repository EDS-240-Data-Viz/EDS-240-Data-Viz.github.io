[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Recommended reading & materials",
    "section": "",
    "text": "Fundamentals of Data Visualization, by Claus O. Wilke – a primer on making informative and compelling figures\nR for Data Science (2e), by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund – an excellent primer on all things R for programming, data wrangling, visualizing, and communicating\nggplot2: Elegant Graphics for Data Analysis (3e), by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen – helpful for understanding the underlying theory of ggplot2 graphics (NOTE: this is currently (as of November 2023) a work-in-progress, and as the authors put it, “a dumping ground for ideas…we don’t recommend reading it” – it’s still worth noting its existence so that you can return to it in the future!)\nData Visualization: A practical introduction, by Kieran Healy – a hands-on intro to the principles and practice of looking at and presenting data using R and ggplot.\nHands-On Data Visualization, by Jack Dougherty and Ilya Ilyankou – learn how to tell stories with your data using drag-and-drop tools (e.g. Google Sheets, Datawrapper, Tableau Public)\nThe Truthful Art: Data, Charts, and Maps for Communication, by Albert Cairo – a guide to understanding information graphics and visualization (I have a hard copy in my office if you’d like to borrow it!)\n, by Cédric Scherer – a blogpost that might as well be a book; an excellent introduction to many different ggplot options, ideas, and extension packages"
  },
  {
    "objectID": "resources.html#books",
    "href": "resources.html#books",
    "title": "Recommended reading & materials",
    "section": "",
    "text": "Fundamentals of Data Visualization, by Claus O. Wilke – a primer on making informative and compelling figures\nR for Data Science (2e), by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund – an excellent primer on all things R for programming, data wrangling, visualizing, and communicating\nggplot2: Elegant Graphics for Data Analysis (3e), by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen – helpful for understanding the underlying theory of ggplot2 graphics (NOTE: this is currently (as of November 2023) a work-in-progress, and as the authors put it, “a dumping ground for ideas…we don’t recommend reading it” – it’s still worth noting its existence so that you can return to it in the future!)\nData Visualization: A practical introduction, by Kieran Healy – a hands-on intro to the principles and practice of looking at and presenting data using R and ggplot.\nHands-On Data Visualization, by Jack Dougherty and Ilya Ilyankou – learn how to tell stories with your data using drag-and-drop tools (e.g. Google Sheets, Datawrapper, Tableau Public)\nThe Truthful Art: Data, Charts, and Maps for Communication, by Albert Cairo – a guide to understanding information graphics and visualization (I have a hard copy in my office if you’d like to borrow it!)\n, by Cédric Scherer – a blogpost that might as well be a book; an excellent introduction to many different ggplot options, ideas, and extension packages"
  },
  {
    "objectID": "resources.html#readings-journals-reporting-talks",
    "href": "resources.html#readings-journals-reporting-talks",
    "title": "Recommended reading & materials",
    "section": "Readings, Journals, Reporting & Talks",
    "text": "Readings, Journals, Reporting & Talks\n\nNightingale: Journal of the Data Visualization Society – focuses on data visualization from personal stories to exploratory research to interviews with leaders in the community, data ethics, and best practices\nThe Upshot, by The New York Times – analysis that explains politics, policy and everyday life, with an emphasis on data and charts\nTED Topics: Visualizations – a collection of TED talks (and more) on the topic of Visualizations\nGrainger S, Mao F, Buytaert W (2016) Environmental data visualisation for non-scientific contexts: Literature review and design framework. Environmental Modelling & Software. 85:299-318. https://doi.org/10.1016/j.envsoft.2016.09.004"
  },
  {
    "objectID": "resources.html#chart-types",
    "href": "resources.html#chart-types",
    "title": "Recommended reading & materials",
    "section": "Chart Types",
    "text": "Chart Types\n\nFrom Data to Viz, by Yan Holtz & Conor Healy – a decision tree for deciding which chart type is most appropriate for your data\nChart Suggestions – A Thought-Starter, by A. Abela – a single pdf decision tree, which uses the four main chart types to guide users towards selecting an appropriate visualization\nData Viz Project, by Ferdio (an infographic and data visualization agency in Copenhagen) – 100 different visualizations from one simple dataset"
  },
  {
    "objectID": "resources.html#colors",
    "href": "resources.html#colors",
    "title": "Recommended reading & materials",
    "section": "Colors",
    "text": "Colors\n\nPalette Generator, by Learn UI Design – supply a starting color(s) and this tool will generate a palette, single hue, or divergent color scheme\nViz Palette, by Elijah Meeks and Susie Lu – a tool that shows you how well your chosen colors work for tiny lines and big areas, warns if you have colors sharing the same name (which can make it more challenging to talk about your designs, say, in a presentation), and can simulate color vision deficiencies\nShade Generator – a tool for generating shade scales\nColorblind Safe Color Schemes, by the NCEAS Science Communication Resource Center – tips and examples of colorblind-friendly color palettes\nColor review, by Anton Robsarve – for understanding foreground and background contrasts\nYour Friendly Guide to Colors in Data Visualization, by Lisa Charlotte Muth – a blog post on useful tools for deciding data viz color palettes\nWhat to consider when choosing colors for data visualization, by Lisa Charlotte Muth – a blog post with explanations and examples\nSubtleties of Color, by Robert Simmon – a 6 part blog post series from NASA Earth Observatory about the use of color to map Earth observation data"
  },
  {
    "objectID": "resources.html#typography",
    "href": "resources.html#typography",
    "title": "Recommended reading & materials",
    "section": "Typography",
    "text": "Typography\n\nGoogle Fonts – catalog of open-source fonts and icons, which can be imported for use with {ggplot2}; check out this collection of short articles on choosing type\nWhich fonts to use for your charts and tables, by Lisa Charlotte Muth\nChoosing Fonts for Your Data Visualization, by Tiffany France\nWake up & smell the fonts, by Sarah Hyndman – a great 14min-long TEDx talk about how fonts turn words into stories that have the power to influence audience perceptions"
  },
  {
    "objectID": "resources.html#alternative-alt-text",
    "href": "resources.html#alternative-alt-text",
    "title": "Recommended reading & materials",
    "section": "Alternative (alt) text",
    "text": "Alternative (alt) text\n\nHow to write good alternative descriptions for your data visualization, by Amy Cesal – great instructions (and examples) on how to construct informative alt text for data visualizations\nWriting Alt Text for Data Visualization, also by Amy Cesal – more great example of alt text for data viz!\n#TidyTuesday alt text instructions – a simple formula for writing alt text for data visualizations, as recommended for #TidyTuesday participants"
  },
  {
    "objectID": "resources.html#dei-in-data-visualization",
    "href": "resources.html#dei-in-data-visualization",
    "title": "Recommended reading & materials",
    "section": "DEI in Data Visualization",
    "text": "DEI in Data Visualization\n\nDo No Harm Guide: Applying Equity Awareness in Data Visualization, by Jonathan Schwabish and Alice Feng – a guide for for approaching data work (and particularly visualizations) through a lens of diversity, equity, and inclusion"
  },
  {
    "objectID": "resources.html#podcasts",
    "href": "resources.html#podcasts",
    "title": "Recommended reading & materials",
    "section": "Podcasts",
    "text": "Podcasts\n\nTidy Tuesday, hosted by Jon Harmon – a weekly (very short, ~5min-long) podcast that reviews a visualization (or a few) produced by community members using the latest published data set; Jon describes the visualization and describes a couple key geoms and/or functions the author used to create it\nData is Plural, hosted by Jeremy Singer-Vine – a new podcast from the long-running newsletter, Data Is Plural, where each episode distills an expert interview into a crisp 15 minutes, taking you behind the scenes of another surprising data set"
  },
  {
    "objectID": "resources.html#inspirational-data-visualization-creators",
    "href": "resources.html#inspirational-data-visualization-creators",
    "title": "Recommended reading & materials",
    "section": "Inspirational data visualization creators",
    "text": "Inspirational data visualization creators\n\n{ggplot2} creators\n(In my honest opinion) One of the best ways to learn how to build exciting ggplots is to look at code that others have written. Here are just a few folks doing really incredible work (along with their repos where they often showcase their creations):\n\n\n\nCreator\n Data Viz Repository\n\n\n\n\nIjeamaka Anyene\ntidytuesday\n\n\nMeghan Hall\ncheck out Meghan’s awesome blog posts, which cover a number of {ggplot2} topics\n\n\nGeorgios Karamanis\ntidytuesday\n\n\nDanielle Navarro\ngenerative art outputs from multiple repos can be found on Danielle’s website’s Gallery\n\n\nCristophe Nicault\ntidytuesday\n\n\nDan Oehm\ntidytues\n\n\nNicola Rennie\ntidytuesday (Nicola also records nearly all of her work using the {camcorder} package)\n\n\nCédric Scherer\nTidyTuesday\n\n\nTanya Shapiro\ntanya-data-viz\n\n\nCara Thompson\ntidytuesdays\n\n\n\n\n\nOther seriously amazing data visualizationists\nDefinitely don’t limit yourself to just {ggplot2} creators! There are so many incredible data story-tellers and information designers to draw inspiration and learn from. Just a few:\n\nNadieh Bremer\nMona Chalabi\nSonja Kuijpers\nGiorgia Lupi\nKinga Stryszowska-Hill (who does use R / {ggplot2}, among other data visualization tools)"
  },
  {
    "objectID": "resources.html#data-sources",
    "href": "resources.html#data-sources",
    "title": "Recommended reading & materials",
    "section": "Data sources",
    "text": "Data sources\nData are everywhere, but that doesn’t mean they’re necessarily easy to track down. Here are some of the places I’ve found and used data from (or at least considered using data from). If you’ve found a cool data source (particularly if it’s a source of environmental data), I would love to know! It can help me build out teaching materials with new / different examples, and also help your peers who may be searching for similar data. Please consider contributing data sources using this Google Form.\n\nData Repositories\n\nDataOne – a repository of data repositories! Search across all member repositories (including repositories like EDI Data Portal, Arctic Data Center, KNB, etc.) for environmental data (along with curated metadata records)\nEDI Data Portal – contains environmental and ecological data and metadata derived from publicly funded research contributed by a number of participating organizations (e.g. EDI is the main repository for all Long Term Ecological Research (LTER) data)\n\n\n\nNewsletters / Data Collections\n\nData is Plural – a weekly newsletter (and seasonal podcast) of useful / curious data sets, published by Jeremy Singer-Vine\ntidytuesday – a weekly social data project that shares minimally-cleaned data sets covering a variety of topics for the R4DS community to visualize; organizers share links to the original data sources, as well as the scripts used to clean them prior to publishing\nawesome-public-datasets – a repository containing a list of high quality, topic-centric public data sources\n\n\n\nGovernment Agencies\n\nCenters for Disease Control and Prevention (CDC) – there are tons of data sets buried in the pages of this website (you’ll likely have to do a bit of digging)\nData.gov – view data sets by the federal agency, state, city, or county that publishes them\nEPA’s National Emissions Inventory (NEI) Data Retrieval Tool – read more about NEI Data on the EPA’s website\nNOAA’s National Centers for Environmental Information – specifically, check out their Climate Monitoring Products (I used the County Mapping interface to download precipitation data featured in Lecture 3.1’s choropleth map)\n{tidycensus} package – tooling that allows R users to more easily interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames"
  },
  {
    "objectID": "resources.html#misc.",
    "href": "resources.html#misc.",
    "title": "Recommended reading & materials",
    "section": "Misc.",
    "text": "Misc.\n\nawesome-ggplot2, by Erik Gahner Larsen – a curated list of awesome ggplot2 tutorials, packages etc.\nClimate Viz, by Datawrapper – a collection of blog posts on data visualizations created with Datawrapper that help us (and hopefully you) to understand global warming and what humanity can do against it"
  },
  {
    "objectID": "resources.html#learning-communities",
    "href": "resources.html#learning-communities",
    "title": "Recommended reading & materials",
    "section": "Learning communities",
    "text": "Learning communities\nOnline communities:\n\nTidyTuesday, by the R4DS Online Learning Community – a weekly data project in R, and an excellent (dare I say, the best) way to practice your data wrangling & visualization skills\n\nThe following Santa Barbara-based groups hold regular meetups, workshops, networking events, and more:\n\nEcoDataScience – an environmental data science community based at the University of California Santa Barbara (UCSB), open to anyone who is interested in joining the journey of learning, advancing and applying data science skills in the environmental and ecological field\nR-Ladies Santa Barbara – a local chapter of R-Ladies Global, which exists to promote diversity in the R community\nSanta Barbara Women in STEM – a local network of professionals with a common goal to promote and encourage women in fields related to science, technology, engineering, and math\n\n\n\n\n\n\n\n\n\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "course-materials/discussion/week3/CA-drought.html",
    "href": "course-materials/discussion/week3/CA-drought.html",
    "title": "EDS 240",
    "section": "",
    "text": "##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(tidyverse)\n\n#..........................import data...........................\ntuesdata &lt;- tidytuesdayR::tt_load('2021-07-20')\ndrought &lt;- tuesdata$drought\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                            wrangle drought data                          ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndrought_clean &lt;- drought |&gt;\n\n  # select cols of interest & update names as needed ----\n  select(date = valid_start, state_abb, drought_lvl, area_pct) |&gt; \n\n  # add year, month & day cols using {lubridate} fxns ----\n  mutate(year = year(date),\n         month = month(date, label = TRUE, abbr = TRUE),\n         day = day(date)) |&gt;\n  \n  # convert year to factor (necessary for next step) ----\n  mutate(year = as.factor(year)) |&gt; \n\n  # add drought level conditions names ----\n  mutate(drought_lvl_long = factor(drought_lvl,\n                            levels = c(\"D4\", \"D3\", \"D2\", \"D1\",\"D0\", \"None\"),\n                            labels = c(\"(D4) Exceptional\", \"(D3) Extreme\",\n                                       \"(D2) Severe\", \"(D1) Moderate\", \"(D0) Abnormally Dry\", \n                                       \"No Drought\"))) |&gt;\n  \n  # reorder cols ----\n  select(date, year, month, day, state_abb, drought_lvl, drought_lvl_long, area_pct)\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##       create stacked area plot of CA drought conditions through time     ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndrought_clean |&gt; \n  \n  # remove drought_lvl \"None\" & filter for just CA ----\n  filter(drought_lvl != \"None\",\n         state_abb == \"CA\") |&gt; \n  \n  # create ggplot ----\n  ggplot(mapping = aes(x = date, y = area_pct, fill = drought_lvl_long)) +\n  \n  # reverse order of groups so level D4 is closest to x-axis ----\n  geom_area(position = position_stack(reverse = TRUE)) +\n  \n  # update colors to match US Drought Monitor (colors selected using ColorPick Eyedropper from original USDM data viz) ----\n  scale_fill_manual(values = c(\"#853904\", \"#FF0000\", \"#FFC100\", \"#FFD965\", \"#FFFF00\")) +\n  \n  # set x-axis breaks & remove padding between data and x-axis ----\n  scale_x_date(date_breaks = \"2 years\", date_labels = \"%Y\",\n               expand = c(0,0)) +\n  \n  # set y-axis breaks & convert values to percentages & & remove padding between data and y-axis----\n  scale_y_continuous(breaks = seq(0, 100, by = 10),\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0,0)) +\n  \n  # add title ----\n  labs(title = \"Drought area in California\") +\n  \n  # set theme minimal (includes major/minor grid lines, no axes) ----\n  theme_minimal() +\n  \n  # fine-tune adjustments to plot theme (non-data elements) ----\n  theme(\n    \n    # update axis lines & ticks color ----\n    axis.line = element_line(color = \"#5A9CD6\"),\n    axis.ticks = element_line(color = \"#5A9CD6\"),\n    \n    # adjust length of axis ticks ----\n    axis.ticks.length = unit(.2, \"cm\"),\n    \n    # center plot title ----\n    plot.title = element_text(hjust = 0.5, color = \"#686868\", size = 25,\n                              margin = margin(t = 10, r = 0, b = 15, l = 0)),\n    \n    # remove axis & legend titles ----\n    axis.title = element_blank(),\n    legend.title = element_blank(),\n    \n    # axis text color & size ----\n    axis.text = element_text(color = \"#686868\", size = 15),\n    legend.text = element_text(color = \"#686868\", size = 15),\n    \n    # move legend below plot ----\n    legend.position = \"bottom\",\n  )"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#title-slide",
    "href": "course-materials/discussion/week2/week2-alt-text.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Discussion 2\nAlt Text\n\nWeek 2 | January 17th, 2024"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#what-is-alt-text",
    "href": "course-materials/discussion/week2/week2-alt-text.html#what-is-alt-text",
    "title": "EDS 240",
    "section": "",
    "text": "What is alt text?\n\n \nWebAIM defines alternative text, aka alt text, as:\n\n\n…a textual substitute for non-text content in web pages.\n\n\n\nIn other words, alt text is a written description that conveys the meaning / messaging of visual elements (e.g. photos / images, media, data visualizations)."
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#why-alt-text",
    "href": "course-materials/discussion/week2/week2-alt-text.html#why-alt-text",
    "title": "EDS 240",
    "section": "",
    "text": "Alt text serves many different communities and functions\n\n\nJust a few examples:\n\n\nAlt text is read aloud by assistive technologies, like screen readers, helping users with visual or certain cognitive disabilities to perceive the content and function of visual elements on web pages\nAlt text will appear in place of visual elements for those who are using a slow internet connection, or who have limited or expensive bandwidth\nAlt text may serve those with “situational limitations,” such as viewing a computer screen in bright sunlight\nAlt text provides more accurate image descriptions / context to search engine crawlers, which improves their assessment of a page’s purpose and content\n\n\n\nBecause of this, it’s important that we include good alt text with any data visualizations we publish online!"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#writing-alt-text",
    "href": "course-materials/discussion/week2/week2-alt-text.html#writing-alt-text",
    "title": "EDS 240",
    "section": "",
    "text": "A formula for writing alt text\n\nData viz designer and instructor, Amy Cesal, suggests this rule of thumb for writing alt text for data visualizations: alt=“Chart type of type of data where reason for including chart.\n\n\n\n\n\n\n\n\n\n\n\nalt=“Colored stripes of chronologically ordered temperatures where they increase in red to show the warming global temperature”\n\nExample from Amy Cesal’s article, Writing Alt Text for Data Visualization"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#writing-alt-text2",
    "href": "course-materials/discussion/week2/week2-alt-text.html#writing-alt-text2",
    "title": "EDS 240",
    "section": "",
    "text": "Another example\n\n\n\nalt=“A split bars chart of different types of milk’s (dairy and plant-based) environmental impact, where cow’s milk scores significantly worst in carbon emissions, land use, and water use than the other milk alternatives. Cow’s milk produces two times more carbon emissions, uses nine times more land, and twice the water that rice milk uses. Rice milk is the second most contaminating type of milk in terms of carbon emissions.”\n\nExample from Datawrapper"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#alt-vs-cap",
    "href": "course-materials/discussion/week2/week2-alt-text.html#alt-vs-cap",
    "title": "EDS 240",
    "section": "",
    "text": "Include both a figure caption & alt text\n\n\nA figure caption is text that is displayed on the screen (typically beneath the data visualization it’s associated with) and is used to provide additional information and context.\nAlt text is not rendered on screen, but is identified and read aloud by screen readers. It’s used to describe the main takeaway(s) of a data visualization.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure caption: “Warming Stripes”, by Ed Hawkins, depicts the average annual global temperature from 1850-2022. Data Source: HadCRUT5. To learn more about this visualization, visit showyourstripes.info.\nAlt text: Colored stripes of chronologically ordered temperatures where they increase in red to show the warming global temperature"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#tips",
    "href": "course-materials/discussion/week2/week2-alt-text.html#tips",
    "title": "EDS 240",
    "section": "",
    "text": "Additional tips for writing alt text for data visualizations\n\n\nIn addition to the formula presented on the last couple slides, consider the following tips:\n\n\n\nwrite in sentence case, but keep it short (alt text is read linearly by screen readers, which means that people can’t go back a word if they missed something)\ncarefully consider the use of special characters (this article details “safe” vs. “unread” characters)\nlink to the data or source (not in your alt text, but somewhere in the surrounding text or figure caption)"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#practice1",
    "href": "course-materials/discussion/week2/week2-alt-text.html#practice1",
    "title": "EDS 240",
    "section": "",
    "text": "Practice writing alt text:\n\n\n\nImage source: Verisk Maplecroft | To enlarge: right click on image &gt; Open Image in New Tab\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#practice2",
    "href": "course-materials/discussion/week2/week2-alt-text.html#practice2",
    "title": "EDS 240",
    "section": "",
    "text": "Practice writing alt text:\n\n\n\nImage source: Milken Institute School of Public Health | To enlarge: right click on image &gt; Open Image in New Tab\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#adding-alt-text",
    "href": "course-materials/discussion/week2/week2-alt-text.html#adding-alt-text",
    "title": "EDS 240",
    "section": "",
    "text": "Adding alt text\n\nInclude alt text with your data visualizations, no matter how you choose to embed them:\n\nIf you’re rendering ggplot (or other data visualization) code within a .qmd file, add the fig-alt code chunk option:\n\n#| eval: true\n#| echo: false\n#| fig-cap: \"Figure caption text goes here\"\n#| fig-alt: \"Alt text goes here\"\nggplot(...) +\n  geom_*()\n\n\nIf you’ve save your data visualization as an image file, you can embed it in a .qmd file using either markdown or html syntax:\n\n\n\n\nMarkdown\n\n\n![Figure caption goes here](file/path/to/image){fig-alt=\"Alt text goes here\"}\n\n\n\nHTML\n\n\n&lt;img src=\"file/path/to/image\" alt=\"Alt text goes here\"&gt;"
  },
  {
    "objectID": "course-materials/discussion/week2/week2-alt-text.html#checking-alt-text",
    "href": "course-materials/discussion/week2/week2-alt-text.html#checking-alt-text",
    "title": "EDS 240",
    "section": "",
    "text": "Check to make sure your alt text was applied\n\n(In Chrome) Right click on an image &gt; Inspect to look at the underlying HTML of a webpage. You should see alt=\"Your alt text.\". For example, right clicking on the image on slide 4 should reveal something that looks like this:"
  },
  {
    "objectID": "course-materials/week5.html#pre-class-prep",
    "href": "course-materials/week5.html#pre-class-prep",
    "title": "Enhancing visualizations",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nComing soon"
  },
  {
    "objectID": "course-materials/week5.html#lecture-materials",
    "href": "course-materials/week5.html#lecture-materials",
    "title": "Enhancing visualizations",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nWeek 5 instruction is broken down into three lessons:\n\n\n\nTypography\n lecture 5.1 slides\n\n\n\n\nColors\n lecture 5.2 slides\n\n\n\n\nAnnotations\n lecture 5.3 slides"
  },
  {
    "objectID": "course-materials/week5.html#discussion-materials",
    "href": "course-materials/week5.html#discussion-materials",
    "title": "Enhancing visualizations",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week5.html#assignment-reminders",
    "href": "course-materials/week5.html#assignment-reminders",
    "title": "Enhancing visualizations",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 5)\nMon 02/05/2024\nMon 02/05/2024, 11:55pm PT\n\n\nSR\nMid-course reflection (SR #2)\nMon 02/05/2024\nSat 02/10/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week6.html#pre-class-prep",
    "href": "course-materials/week6.html#pre-class-prep",
    "title": "Data communication",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nComing soon"
  },
  {
    "objectID": "course-materials/week6.html#lecture-materials",
    "href": "course-materials/week6.html#lecture-materials",
    "title": "Data communication",
    "section": "Lecture Materials",
    "text": "Lecture Materials\n\n\n\n\n\n\n\n\n\n\n     \n\n\n\n\n\n\n\n\nData communication\n lecture 6.1 slides\n\n\n\n\ntbd\n lecture 6.2 slides\n\n\n\n\ntbd\n lecture 6.3 slides"
  },
  {
    "objectID": "course-materials/week6.html#discussion-materials",
    "href": "course-materials/week6.html#discussion-materials",
    "title": "Data communication",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nBrainstorming ideas (not yet set in stone):\n\nThe beauty of data visualization, a TED Talk by David McCandless (founder of information is beautiful)"
  },
  {
    "objectID": "course-materials/week6.html#assignment-reminders",
    "href": "course-materials/week6.html#assignment-reminders",
    "title": "Data communication",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 6)\nMon 02/12/2024\nMon 02/12/2024, 11:55pm PT\n\n\nHW\nHomework Assignment #3\nMon 02/12/2024\nSat 02/24/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week3.html#pre-class-prep",
    "href": "course-materials/week3.html#pre-class-prep",
    "title": "Choosing a graphic form, Fundamental chart types (part I)",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nBefore coming to class, you’ll need to install some packages, download data, and request a US Census Bureau API key. For step-by-step instructions, unfold the following note (collapsed to save space):\n\n\n\n\n\n\nStep-by-step pre-class prep instructions\n\n\n\n\n\n\nInstall required packages\n\ninstall.packages(\"tidytuesdayR\") # used to download TidyTuesday data\ninstall.packages(\"tidycensus\") # an R package that allows users to interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames\ninstall.packages(\"ggridges\") # {ggplot2} extension for creating ridgeline plots\ninstall.packages(\"gghighlight\") # {ggplot2} extension for highlighting geoms\ninstall.packages(\"ggbeeswarm\") # {ggplot2} extension for creating categorical scatter (violin point) plots\ninstall.packages(\"see\") # {ggplot2} extension for model visualization (we'll be using it for it's geom, geom_violindot())\ninstall.packages(\"scales\") # provides the internal scaling infrastructure used by ggplot2, and gives you tools to override the default breaks, labels, transformations and palettes (installed automatically with {ggplot2} or {tidyverse})\n\n\n\nDownload data\n\nCounty-level Lyme disease data from 2001-2020, made available by the CDC (read more on this CDC web page)\n\nrename file as lyme-cdc-2001-2020.csv and save to your class repo at the file path: EDS-240-class-examples/week3/data/lyme-cdc-2001-2020.csv\n\n\n\n\nRequest a US Census Bureau API key\n\nTo use the {tidycensus} package to access US Census Bureau data, you’ll first need to request and activate an API key. Do so by following these steps:\n\nRequest an API key at http://api.census.gov/data/key_signup.html\nAfter a short period of time, you should receive an email with your key (it may be helpful to star/bookmark that email), and click the included link to activate your key (Note: if you get an error when activating your key, close your browser window and try clicking the activation link again)\n\nFor security purposes, you should never push any API keys to GitHub. To prevent us from accidentally pushing our key(s), we can save it to a separate file which we’ll add to our .gitignore. Do so by following these steps:\n\n\nCreate a file in your class repo’s root directory called KEYS.R, and save your API key to an object name like this:\n\n\n\n\nKEYS.R\n\ncensusKEY &lt;- \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n\n\n\nAdd KEYS.R to your .gitignore\n\n\n\n\n.gitignore\n\nKEYS.R\n\n\n\nSave .gitignore (once saved, you should see the newly added KEYS.R file disappear from your Git pane in RStudio, and a modified .gitignore appear). Stage/add, commit, and push this .gitignore file to GitHub\n\nIn class, we’ll source our key (by running source(\"KEYS.R\")) into any scripts/Qmd files, where required."
  },
  {
    "objectID": "course-materials/week3.html#lecture-materials",
    "href": "course-materials/week3.html#lecture-materials",
    "title": "Choosing a graphic form, Fundamental chart types (part I)",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nWeek 3 instruction is broken down into three lessons:\n\n\n\nChoosing graphic forms\n lecture 3.1 slides\n\n\n\n\nVisualizing distributions\n lecture 3.2 slides\n\n\n\n\nVisualizing evolution\n lecture 3.3 slides\n\n\n\n\nToday’s lectures are inspired by and draw largely on materials created by a number of other educators, including Albert Cairo and his book The Truthful Art, Meghan Hall and her course, CMU 36-315: Statistical Graphics & Visualization, as well as information curated by Yan Holtz & Conor Healy as part of their From Data to Viz project."
  },
  {
    "objectID": "course-materials/week3.html#discussion-materials",
    "href": "course-materials/week3.html#discussion-materials",
    "title": "Choosing a graphic form, Fundamental chart types (part I)",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nThe U.S. Drought Monitor (USDM) is a collection of measures that allows experts to assess droughts in the United States. It is produced through a partnership between the National Drought Mitigation Center at the University of Nebraska-Lincoln, the United States Department of Agriculture and the National Oceanic and Atmospheric Administration. You can download and explore comprehensive statistics through their data portal.\nThe TidyTuesday community wrangled and visualized USDM data back in 2021 (2021-07-20, week 30), so we’ll use the {tidytuesdayR} package to import some minimally-tidied data (TidyTuesday always provides the cleaning script that the organizers used to pre-process any of the data provided – these data comprise three separate data sets, which were converted from wide to long format, joined together, and had some columns renamed).\nFor this week’s discussion section, you’ll be recreating the following data visualization produced by U.S. Drought Monitor, which you can find on the Droughts in California Wikipedia page.\n\n\n\n\n\n\n\n\n\nBefore coming to section, please be sure to:\n\n(Optional) Install the ColorPick Eyedropper Google Chrome extension, which makes it easy to select color values from webpages.\n\n\n\n\n\nSolution\n(but try not to look during section!)\n\n\n\n\n\n\n\nComplete code for week 3 discussion (CA drought)\n\n\n\n\n\n\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(tidyverse)\n\n#..........................import data...........................\ntuesdata &lt;- tidytuesdayR::tt_load('2021-07-20')\ndrought &lt;- tuesdata$drought\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                            wrangle drought data                          ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndrought_clean &lt;- drought |&gt;\n\n  # select cols of interest & update names as needed ----\n  select(date = valid_start, state_abb, drought_lvl, area_pct) |&gt; \n\n  # add year, month & day cols using {lubridate} fxns ----\n  mutate(year = year(date),\n         month = month(date, label = TRUE, abbr = TRUE),\n         day = day(date)) |&gt;\n  \n  # convert year to factor (necessary for next step) ----\n  mutate(year = as.factor(year)) |&gt; \n\n  # add drought level conditions names ----\n  mutate(drought_lvl_long = factor(drought_lvl,\n                            levels = c(\"D4\", \"D3\", \"D2\", \"D1\",\"D0\", \"None\"),\n                            labels = c(\"(D4) Exceptional\", \"(D3) Extreme\",\n                                       \"(D2) Severe\", \"(D1) Moderate\", \"(D0) Abnormally Dry\", \n                                       \"No Drought\"))) |&gt;\n  \n  # reorder cols ----\n  select(date, year, month, day, state_abb, drought_lvl, drought_lvl_long, area_pct)\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##       create stacked area plot of CA drought conditions through time     ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndrought_clean |&gt; \n  \n  # remove drought_lvl \"None\" & filter for just CA ----\n  filter(drought_lvl != \"None\",\n         state_abb == \"CA\") |&gt; \n  \n  # create ggplot ----\n  ggplot(mapping = aes(x = date, y = area_pct, fill = drought_lvl_long)) +\n  \n  # reverse order of groups so level D4 is closest to x-axis ----\n  geom_area(position = position_stack(reverse = TRUE)) +\n  \n  # update colors to match US Drought Monitor (colors selected using ColorPick Eyedropper from original USDM data viz) ----\n  scale_fill_manual(values = c(\"#853904\", \"#FF0000\", \"#FFC100\", \"#FFD965\", \"#FFFF00\")) +\n  \n  # set x-axis breaks & remove padding between data and x-axis ----\n  scale_x_date(date_breaks = \"2 years\", date_labels = \"%Y\",\n               expand = c(0,0)) +\n  \n  # set y-axis breaks & convert values to percentages & & remove padding between data and y-axis----\n  scale_y_continuous(breaks = seq(0, 100, by = 10),\n                     labels = scales::percent_format(scale = 1),\n                     expand = c(0,0)) +\n  \n  # add title ----\n  labs(title = \"Drought area in California\") +\n  \n  # set theme minimal (includes major/minor grid lines, no axes) ----\n  theme_minimal() +\n  \n  # fine-tune adjustments to plot theme (non-data elements) ----\n  theme(\n    \n    # update axis lines & ticks color ----\n    axis.line = element_line(color = \"#5A9CD6\"),\n    axis.ticks = element_line(color = \"#5A9CD6\"),\n    \n    # adjust length of axis ticks ----\n    axis.ticks.length = unit(.2, \"cm\"),\n    \n    # center plot title ----\n    plot.title = element_text(hjust = 0.5, color = \"#686868\", size = 25,\n                              margin = margin(t = 10, r = 0, b = 15, l = 0)),\n    \n    # remove axis & legend titles ----\n    axis.title = element_blank(),\n    legend.title = element_blank(),\n    \n    # axis text color & size ----\n    axis.text = element_text(color = \"#686868\", size = 15),\n    legend.text = element_text(color = \"#686868\", size = 15),\n    \n    # move legend below plot ----\n    legend.position = \"bottom\",\n  )"
  },
  {
    "objectID": "course-materials/week3.html#assignment-reminders",
    "href": "course-materials/week3.html#assignment-reminders",
    "title": "Choosing a graphic form, Fundamental chart types (part I)",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 3)\nMon 01/22/2024\nMon 01/22/2024, 11:55pm PT\n\n\nHW\nHomework Assignment #2\nMon 01/22/2024\nSat 02/03/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week1.html#pre-class-prep",
    "href": "course-materials/week1.html#pre-class-prep",
    "title": "Course logistics, Intro, {ggplot2} review",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nPlease be sure to complete the following before class:\n\nInstall required packages\n\ninstall.packages(\"palmerpenguins\") # a package containing the `penguins` data set, which we'll use for plotting practice\ninstall.packages(\"tidyverse\") # a collection of packages used for data wrangling / manipulation and visualization (including {ggplot2})\n\n\n\nCreate your EDS-240-class-examples repository\nWe’ll be coding together quite a bit throughout this course. To stay organized, we’ll complete all of our in-class examples in one repository (repo). Create and clone a GitHub repository named EDS-240-class-examples. For step-by-step instructions, unfold the following note (collapsed to save space):\n\n\n\n\n\n\nStep-by-step instructions for creating and cloning a GitHub repo:\n\n\n\n\n\nCreate a remote (GitHub) repo:\n\nNavigate to your GitHub profile and click on Repositories (top menu bar)\nClick on the green New button in the upper right-hand corner\nGive it the name EDS-240-class-examples, and optionally, a short description. Select the radio button for Public repository (it should be selected by default). Initialize this repository with a README by checking the box and Add a .gitignore (select R from the .gitignore template drop down menu) boxes. Click Create repository.\nFrom your repo’s main page, click the green Code button and copy the URL to your clipboard\n\nClone your repo:\n\nOpen up RStudio\nClick on the drop down menu next to the R project icon (top right corner)\nClick New Project… &gt; Version Control &gt; Git &gt; paste your repo’s URL in the Repository URL: box and press Tab to auto fill the Project directory name field (it should automatically be named the same as your GitHub repo). Browse to select where on your computer you’d like your repo to be saved.\nClick Create Project"
  },
  {
    "objectID": "course-materials/week1.html#lecture-materials",
    "href": "course-materials/week1.html#lecture-materials",
    "title": "Course logistics, Intro, {ggplot2} review",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nWeek 1 instruction is broken down into three lessons:\n\n\n\nCourse logistics & syllabus\n lecture 1.1 slides\n\n\n\n\nIntro to data visualization\n lecture 1.2 slides\n\n\n\n\n{ggplot2} review\n lecture 1.3 slides"
  },
  {
    "objectID": "course-materials/week1.html#discussion-materials",
    "href": "course-materials/week1.html#discussion-materials",
    "title": "Course logistics, Intro, {ggplot2} review",
    "section": "Discussion Materials",
    "text": "Discussion Materials\n\n\n\n\n\n\n\nBy now, you may have heard / read something like, “Data scientists spend 80% of their time preparing their data for analysis and/or visualization.” And while that may not be totally accurate for all data scientists or all projects, you will spend lots of time wrestling with data. You’ll spend this week’s discussion cleaning up a messy data set on hydraulic fracturing (aka fracking), with the goal of (re)familiarizing yourselves with some of commonly-used tidyverse functions.\nThis week’s data comes courtesy of Jeremy Singer-Vine’s Data is Plural weekly newsletter of useful/curious data sets (the 2023.09.27 edition). Singer-Vine’s description:\n\nSince launching in 2011, FracFocus has become the largest registry of hydraulic fracturing chemical disclosures in the US. The database, available to explore online and download in bulk, contains 210,000+ such disclosures from fracking operators; it details the location, timing, and water volume of each fracking job, plus the names and amounts of chemicals used. The project is managed by the Ground Water Protection Council, “a nonprofit 501(c)6 organization whose members consist of state ground water regulatory agencies”. As seen in: The latest installment of the New York Times’ Uncharted Water series.\n\nInterested in reading more about fracking? Check out this communications piece from USGS to start.\nBefore coming to section, you’ll need to install some packages and download data. For step-by-step instructions, unfold the following note (collapsed to save space):\n\n\n\n\n\n\nStep-by-step pre-discussion prep instructions\n\n\n\n\n\n\nInstall the following packages:\n\n\ninstall.packages(\"janitor\") # tools for cleaning dirty data\ninstall.packages(\"usdata\") # demographic data on the United States at the county and state levels spanning multiple years\n\n\nDownload the data (fracking.csv) from Google Drive and save it to your class repo in the following location: EDS-240-class-examples/week1/data/fracking.csv (NOTE: data were originally downloaded as a zip file from FracFocus in November 2023. Since then, FracFocus has published a cleaner version of these data, which defeats some of this purpose of this exercise. As such, we’ll be working with this saved version of the data, rather than downloading directly from FracFocus’s data download page.)\nWe don’t want to push any data in our repo to GitHub (GitHub enforces file size limits, and you’ll run into some serious headaches when you try to push a file that’s too big) – to avoid doing this, we can add our data files to our .gitignore file, which, as the name implies, is a collection of files that we want Git to ignore. Open up your .gitignore file and add the following line (anywhere is fine, but it makes sense to add it beneath the last line):\n\n\n\n\n.gitignore\n\n# ignore any folder named `data/` within folders named `week__` (* acts as a wildcard)\n/week*/data/\n\n\nNotice that when you Save your modified .gitignore file, untracked data files at the specified file path disappear from your Git tab in RStudio, and a modified .gitignore file appears in it’s place (this is what we want!). Stage/add, commit, and push .gitignore.\n\n\n\n\n\n\n\n\n\n\nAn example repo with three folders: week1/, week2/, and other-stuff/. Each of those folders has a subfolder named data/, and each data/ folder contains a .csv file. Adding the line, /week*/data/ to the .gitignore tells Git to ignore folders (and their contents) named data/ that are within a parent folder named week__ (the * acts as a wildcard). If we wanted to ignore all three data/ folders (including other-stuff/data/), we can instead include /*/data/ to our .gitignore.\n\n\n\n\n\n\n\n\nSolution\n(but try not to look during section!)\n\n\n\n\n\n\n\nComplete code for week 1 discussion (fracking)\n\n\n\n\n\n\n\n\n\n\n\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(tidyverse)\nlibrary(janitor)\n\n#......................import fracking data......................\nfracking &lt;- read_csv(here::here(\"week1\", \"data\", \"fracking.csv\"))\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                        clean/wrangle fracking data                       ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfracking_clean &lt;- fracking |&gt; \n  \n  # clean column names ----\n  janitor::clean_names() |&gt; \n  \n  # clean up dates ----\n  mutate(job_start_date = str_remove(job_start_date, \" AM\")) |&gt; # remove 'AM' from string\n  mutate(datetime_start = mdy_hms(job_start_date)) |&gt; # convert from string to date (save to new col)\n  mutate(year = year(datetime_start)) |&gt; # create 'year' col from date\n\n  # select relevant cols ----\n  select(datetime_start, year, state_name, county_name, well_name, total_base_water_volume) |&gt; \n  \n  # filter out non-state names ----\n  filter(!state_name %in% c(\"Beaver\", \"Beckham\", \"Harper\", \"Hemphill\", \"Midland\", \"Red River\", \"Roosevelt\", \"Rusk\", \"State\", \"WARD\")) |&gt; \n  \n  # rename state_name to something shorter for typing out when using case_when (not necessary) ----\n  rename(sn = state_name) |&gt; \n  \n  # make all words title case ----\n  mutate(sn = str_to_title(sn)) |&gt; \n  \n  # fix misspelled state names ----\n  mutate(sn = case_when(\n    sn == \"Colordao\" ~ \"Colorado\",\n    sn == \"Loiusiana\" ~ \"Louisiana\",\n    sn == \"Louisianna\" ~ \"Louisiana\",\n    sn == \"Lousiana\" ~ \"Louisiana\",\n    sn == \"New Mexcio\" ~ \"New Mexico\",\n    sn == \"Norh Dakota\" ~ \"North Dakota\",\n    sn == \"Norht Dakota\" ~ \"North Dakota\",\n    sn == \"North  Dakota\" ~ \"North Dakota\",\n    sn == \"North Dakata\" ~ \"North Dakota\",\n    sn == \"North Dakotta\" ~ \"North Dakota\",\n    sn == \"Noth Dakota\" ~ \"North Dakota\",\n    sn == \"Pennslvania\" ~ \"Pennsylvania\",\n    sn == \"Pennsylavania\" ~ \"Pennsylvania\",\n    sn == \"Pennsylvanya\" ~ \"Pennsylvania\",\n    sn == \"Penssylvania\" ~ \"Pennsylvania\",\n    sn == \"Texasa\" ~ \"Texas\",\n    sn == \"Texs\" ~ \"Texas\", \n    sn == \"West Viginia\" ~ \"West Virginia\",\n    sn == \"Wyominng\" ~ \"Wyoming\", \n    TRUE ~ sn # copy over rest of state names from as-is\n  )) |&gt; \n  \n  # remove rows that have a '?' mark ----\n  filter(!str_detect(string = sn, pattern = \"\\\\?\")) |&gt; # `?` is a special chr; escape with `\\\\` prefix\n  \n  # make all uppercase (so that we can covert abbreviation to state names) ----\n  mutate(sn = str_to_upper(sn)) |&gt; \n  \n  # mutate abbreviations to full state names ----\n  mutate(sn = ifelse(test = str_length(sn) == 2, # if string in 'sn' col is 2 chrs long\n                     yes = usdata::abbr2state(sn), # replace abbreviation with full state name \n                     no = sn)) |&gt; # if string in 'sn' col is not 2 chrs long, keep state name as-is\n  \n  # make all words title case again ----\n  mutate(sn = str_to_title(sn)) |&gt; \n  \n  # create a column of just state abbreviations ----\n  mutate(state_abb = usdata::state2abbr(sn)) |&gt; \n  \n  # rename 'sn' to 'state_name' again for clarity ----\n  rename(state_name = sn, total_base_water_volume_gal = total_base_water_volume) |&gt; \n  \n  # move 'state_abb' col after state_name col ----\n  relocate(state_abb, .after = state_name) |&gt; \n  \n  # convert 'state_name' & 'state_abb' from string to factor ----\n  mutate(state_name = as.factor(state_name),\n         state_abb = as.factor(state_abb)) |&gt; \n  \n  # remove obs that don't have a measurement for 'total_base_water_volume' (NA) ----\n  drop_na(total_base_water_volume_gal)\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##          some exploratory data viz + a few plot mods for practice        ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfracking_clean |&gt; \n  filter(state_name %in% c(\"Texas\", \"Colorado\", \"North Dakota\")) |&gt; \n  filter(year == 2015) |&gt; \n  group_by(state_name) |&gt; # pipe directly into ggplot\n  ggplot(aes(x = fct_rev(fct_infreq(state_name)), y = total_base_water_volume_gal)) + # need to reverse fct order for coord_flip() (plots lowest freq at top by default)\n  geom_jitter(width = 0.3, alpha = 0.5, color = \"gray15\") +\n  geom_violin(color = \"red4\", alpha = 0.3) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  labs(y = \"Total base water volumn (gal)\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    axis.title.y = element_blank()\n    )"
  },
  {
    "objectID": "course-materials/week1.html#assignment-reminders",
    "href": "course-materials/week1.html#assignment-reminders",
    "title": "Course logistics, Intro, {ggplot2} review",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEnd-of-class survey (week 1)\nMon 01/08/2024\nMon 01/08/2024, 11:55pm PT\n\n\nSR\nPre-course reflection (SR #1)\nMon 01/08/2024\nSat 01/13/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #1\nMon 01/08/2024\nSat 01/20/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week8.html",
    "href": "course-materials/week8.html",
    "title": "Visualizing Uncertainty & Avoiding the Misrepresentation of Data",
    "section": "",
    "text": "Coming soon"
  },
  {
    "objectID": "course-materials/week8.html#pre-class-prep",
    "href": "course-materials/week8.html#pre-class-prep",
    "title": "Visualizing Uncertainty & Avoiding the Misrepresentation of Data",
    "section": "",
    "text": "Coming soon"
  },
  {
    "objectID": "course-materials/week8.html#lecture-materials",
    "href": "course-materials/week8.html#lecture-materials",
    "title": "Visualizing Uncertainty & Avoiding the Misrepresentation of Data",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week8.html#discussion-materials",
    "href": "course-materials/week8.html#discussion-materials",
    "title": "Visualizing Uncertainty & Avoiding the Misrepresentation of Data",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nBrainstorming ideas (not yet set in stone):\n\n3 ways to spot a bad statistic, TED Talk by Mona Chalabi\nWTF Visualizations, a collection of visualizations that make no sense"
  },
  {
    "objectID": "course-materials/week8.html#assignment-reminders",
    "href": "course-materials/week8.html#assignment-reminders",
    "title": "Visualizing Uncertainty & Avoiding the Misrepresentation of Data",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 8)\nMon 02/26/2024\nMon 02/26/2024, 11:55pm PT\n\n\nHW\nHomework Assignment #4\nMon 02/26/2024\nSat 03/16/2024, 11:59pm PT"
  },
  {
    "objectID": "slides/week6.3-tbd.html#title-slide",
    "href": "slides/week6.3-tbd.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 6.3\ntbd\n\nWeek 6 | February 12th, 2024"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#title-slide",
    "href": "slides/week3.3-evolution-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 3.3\nVisualizing evolution\n\nWeek 3 | January 22nd, 2024"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#viz-evolution",
    "href": "slides/week3.3-evolution-slides.html#viz-evolution",
    "title": "EDS 240",
    "section": "",
    "text": "Visualizing data evolution?\n\n \n\n\nVisualizing the change in a numeric variable over some unit of time."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#roadmap1",
    "href": "slides/week3.3-evolution-slides.html#roadmap1",
    "title": "EDS 240",
    "section": "",
    "text": "Roadmap\n\n\nIn this lesson, we’ll be exploring two primary chart types:\n\n1. line graphs\n2. area charts"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#roadmap2",
    "href": "slides/week3.3-evolution-slides.html#roadmap2",
    "title": "EDS 240",
    "section": "",
    "text": "Roadmap\n\n\nIn this lesson, we’ll be exploring two primary chart types:\n\n1. line graphs\n\navoiding spaghetti plots\ncutting the y-axis\naspect ratio\n\n2. area charts\n\n1 vs. multiple groups\nhow to interpret them\nstacked vs. proportional stacked area chart\nconsiderations"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#lyme-data",
    "href": "slides/week3.3-evolution-slides.html#lyme-data",
    "title": "EDS 240",
    "section": "",
    "text": "The data: Lyme disease\n\nLyme disease has been a nationally notifiable condition in the United States since 1991. Reports of Lyme disease are collected and verified by local and state health departments, anonymized by the National Notifiable Diseases Surveillance System (NNDSS), then shared with Centers for Disease Control and Prevention (CDC). The CDC has developed a public use data set for download to facilitate the public health and research community’s access to NNDSS data on Lyme disease.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\nUsing the publicly-available CDC data on Lyme disease and population estimates from the US Census Bureau (via the {tidycensus} package), we’ll explore changes in Lyme disease cases over time, by state.\n\nNNDSS is a nationwide collaboration that enables all levels of public health to share health information to monitor, control, and prevent the occurrence and spread of state-reportable and nationally notifiable infectious (and some noninfectious) diseases and conditions."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#tidycensus",
    "href": "slides/week3.3-evolution-slides.html#tidycensus",
    "title": "EDS 240",
    "section": "",
    "text": "{tidycensus} for accessing US population data\n\n\n\n  \nThe {tidycensus} package allows users to interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames.\n\nUsing {tidycensus} requires that you first have an API key. Be sure to follow the Pre-Course setup instructions for requesting and activating your key before proceeding."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#lyme-wrangling",
    "href": "slides/week3.3-evolution-slides.html#lyme-wrangling",
    "title": "EDS 240",
    "section": "",
    "text": "Data wrangling\n\n\nSee the online documentation for more information on downloading and parsing population data using the {tidycensus} package.\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#.........................load libraries.........................\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(gghighlight)\n\n#.........................source API key.........................\nsource(here::here(\"KEYS.R\"))\ncensus_api_key(censusKEY)\n\n#..........................import data...........................\nlyme &lt;- read_csv(here::here(\"week3\", \"data\", \"LD-Case-Counts-by-County-01-20.csv\"))\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                          wrangle lyme disease data                       ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#............wide to long (plus some other wrangling)............\nlyme_clean &lt;- lyme |&gt; \n  \n  # make col names snake_case ----\n  janitor::clean_names() |&gt; \n  \n  # rename columns ----\n  rename(city = ctyname, state = stname, status = ststatus) |&gt; \n  \n  # wide to long (tidy) years\n  pivot_longer(cols = 6:25, names_to = \"city_year\", values_to = \"reported_cases\") |&gt; \n  \n  # remove \"cases\" from the year & coerce year from chr to factor ----\n  mutate(year = str_remove(city_year, pattern = \"cases\"),\n         year = as.factor(year)) |&gt; \n  \n  # select necessary cols ----\n  select(year, city, state, status, reported_cases)\n\n#................calculate total cases per state.................\nlyme_states &lt;- lyme_clean |&gt; \n  group_by(year, state) |&gt; \n  summarize(total_cases = sum(reported_cases)) \n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                      request / wrangle population data                   ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#...................get pop estimates by state...................\nus_state_pop &lt;- get_estimates(geography = \"state\", \n                              product = \"population\",\n                              state = NULL, \n                              year = 2019) |&gt; \n  filter(variable == \"POP\") |&gt; \n  select(state = NAME, population = value) \n\n#........................write data to csv.......................\n# optional, but recommended in case you want to work offline, the API is down, etc. (you can then read in your saved data file rather than run the above code)\n# write_csv(us_state_pop, file = here::here(\"week3\", \"data\", \"us_state_pop.csv\"))\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                            join lyme & pop dfs                           ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nlyme_pop &lt;- left_join(lyme_states, us_state_pop) |&gt; \n  \n  # add col with num of 100k people per state ----\n  mutate(pop100k = population/100000) |&gt; \n  \n  # calculate num cases per 100k people (common way of reporting disease incidence) ----\n  mutate(cases_per100k = total_cases/pop100k)"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#basic-line-plot1",
    "href": "slides/week3.3-evolution-slides.html#basic-line-plot1",
    "title": "EDS 240",
    "section": "",
    "text": "Line plots show the evolution of 1+ numeric variables\n\nLine graphs display the evolution of one or several numeric variables. They are similar to scatter plots, but the measurement points are ordered (typically by their x-axis value) and joined with straight line segments. They are often used to visualize a trend in data over intervals of time. For example, changes in Lyme disease incidence (# cases / 100k people) from 2010 - 2020, by state:\n\n\n\nA basic line graph using geom_line()\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) + \n  geom_line()"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#basic-line-plot2",
    "href": "slides/week3.3-evolution-slides.html#basic-line-plot2",
    "title": "EDS 240",
    "section": "",
    "text": "Line plots show the evolution of 1+ numeric variables\n\nLine graphs display the evolution of one or several numeric variables. They are similar to scatter plots, but the measurement points are ordered (typically by their x-axis value) and joined with straight line segments. They are often used to visualize a trend in data over intervals of time. For example, changes in Lyme disease incidence (# cases / 100k people) from 2010 - 2020, by state:\n\n\n\nA basic line graph using geom_line()\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) + \n  geom_line()\n\n\n\n\n\n\nA line + scatter plot created by layering geom_line() & geom_point()\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) + \n  geom_line() +\n  geom_point()"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#spaghetti-plot",
    "href": "slides/week3.3-evolution-slides.html#spaghetti-plot",
    "title": "EDS 240",
    "section": "",
    "text": "“Spaghetti plots” are hard to read\n\nA line plot with many lines displayed together can be hard to read / overwhelming to interpret. Consider highlighting a group(s) of interest (the {gghighlight} package comes in handy):\n\n\n\nE.g. I’m interested in how Lyme disease in New Jersey compares to other states.\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line() +\n  gghighlight::gghighlight(state == \"New Jersey\") \n\n\n\n\n\n\nE.g. I’m interested in states where Lyme disease incidence is (or at one point was) &gt; 100 cases / 100k people.\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +\n  geom_line() +\n  gghighlight::gghighlight(max(cases_per100k) &gt; 100)"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#cut-y",
    "href": "slides/week3.3-evolution-slides.html#cut-y",
    "title": "EDS 240",
    "section": "",
    "text": "It’s okay to cut the y-axis of line graphs\n\nLine graphs encode data by position and not length (e.g. as in the height of a bar graph), therefore, you can choose to include the 0 origin only if it makes sense.\n\n\n\nLyme disease incidence from 2013 - 2019\n(cut y-axis = default)\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2013:2019)) |&gt; \n  filter(state == \"Vermont\") |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line()\n\n\n\n\n\n\nLyme disease incidence from 2013 - 2019\n(force y-axis origin at 0)\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2013:2019)) |&gt; \n  filter(state == \"Vermont\") |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line() +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, NA))"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#cut-y-dow",
    "href": "slides/week3.3-evolution-slides.html#cut-y-dow",
    "title": "EDS 240",
    "section": "",
    "text": "It’s okay to cut the y-axis of line graphs\n\nDo not start the y-axis at 0 if the range of data is small but the distance from the bottom of the range to zero is large. For example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Meagan Hall’s Statistical Graphics & Visualization course Lecture 5 slides."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#cut-y-temps",
    "href": "slides/week3.3-evolution-slides.html#cut-y-temps",
    "title": "EDS 240",
    "section": "",
    "text": "It’s okay to cut the y-axis of line graphs\n\nDo not start the y-axis at 0 if the relationship to zero is insignificant. For example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Meagan Hall’s Statistical Graphics & Visualization course Lecture 5 slides."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#aspect-ratio",
    "href": "slides/week3.3-evolution-slides.html#aspect-ratio",
    "title": "EDS 240",
    "section": "",
    "text": "Aspect ratio affects perception of slope\n\nThe aspect ratio is the height:width ratio of a graph. The larger the aspect ratio, the steeper changes appear, which may cause readers to interpret changes as more important. The smaller the aspect ratio, the flatter the line which may cause readers to interpret changes as small / insignificant.\n\n\nImage source: Graph workflow\n\nThere’s no exact rule for what aspect ratio to use for a given graphic (but see Cleveland et al. 1988 to read about the “banking to 45 degrees” rule) – it depends on the nature of the variable and your goal with the visualization. However it’s important to keep mind that manipulating the aspect ratio can mislead readers, and so you should do so carefully."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#aspect-ratio-sunspots-default",
    "href": "slides/week3.3-evolution-slides.html#aspect-ratio-sunspots-default",
    "title": "EDS 240",
    "section": "",
    "text": "Aspect ratio affects perception of slope\n\nConsider this line graph of sunspot activity from 1700 - 2015, with a default aspect ratio (1:1). Can you easily identify where in time sunspot activity rises more quickly / sharply than others?\n\n\nImage source: Graph workflow"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#aspect-ratio-sunspots-wide",
    "href": "slides/week3.3-evolution-slides.html#aspect-ratio-sunspots-wide",
    "title": "EDS 240",
    "section": "",
    "text": "Aspect ratio affects perception of slope\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: The bottom plot is the same as the top, but with the x-axis split into panels / rows, by decade.\nWith a wider aspect ratio, we can more clearly see the differences in rates of change (slopes) in sunspot activity through time.\n\n\n\nImage source: Graph workflow"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#ggplot-default-ar",
    "href": "slides/week3.3-evolution-slides.html#ggplot-default-ar",
    "title": "EDS 240",
    "section": "",
    "text": "ggplot with a default aspect ratio\n\nLet’s first look at Lyme disease incidence for Vermont from 2010 - 2020 without adjusting the aspect ratio:\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state == \"Vermont\") |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line()"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#ggplot-default-ar-ticks",
    "href": "slides/week3.3-evolution-slides.html#ggplot-default-ar-ticks",
    "title": "EDS 240",
    "section": "",
    "text": "ggplot with a default aspect ratio\n\nWe have 10 units on our x-axis (year ranges from 2010 - 2020), and ~175 units (case_per100k ranges from 0 to ~175) on our y-axis. By default, ggplot adjusts the space between each x-axis unit so that they are wider apart than each y-axis unit, making the plot easier to read. Below, we’ve added in tick marks for each y-axis unit to better highlight this (a single tick already existed for each of our 10 x-axis units).\n\n\nNote: This plot doesn’t render well in thse slides or in the RStudio plot pane. I recommend running the code in RStudio, then clicking the Zoom button in the Plot pane for best viewing.\n\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state == \"Vermont\") |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line() +\n  scale_y_continuous(breaks = seq(0, 190, by = 1))"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#aspect-ratio-ggplot-equal",
    "href": "slides/week3.3-evolution-slides.html#aspect-ratio-ggplot-equal",
    "title": "EDS 240",
    "section": "",
    "text": "Adjust the aspect ratio using coord_fixed()\n\nWe can use coord_fixed() to fix the aspect ratio of our plot. The ratio argument controls the aspect ratio, which is expressed as y / x and by default is set to 1. This means that the height of one y-unit is equal to the width of one x-unit (paying attention to the grid lines and tick marks here can be helpful). Because we have 175 y-axis units and only 10 x-axis units, fixing our aspect ratio at 1:1 means our plot gets taller and squished.\n\n\nNote: This plot doesn’t render well in thse slides or in the RStudio plot pane. I recommend running the code in RStudio, then clicking the Zoom button in the Plot pane for best viewing.\n\n\n\nlyme_pop |&gt; \n  filter(state == \"Vermont\") |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line() +\n  scale_y_continuous(breaks = seq(0, 190, by = 1)) +\n  coord_fixed(ratio = 1)"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#aspect-ratio-ggplot-update",
    "href": "slides/week3.3-evolution-slides.html#aspect-ratio-ggplot-update",
    "title": "EDS 240",
    "section": "",
    "text": "Adjust the aspect ratio using coord_fixed()\n\nRatios &gt; 1 will make units on the y-axis longer than units on the x-axis (resulting in steeper slopes). Ratios &lt; 1 will make units on the x-axis longer than units on the y-axis (resulting in shallower slopes). If we want to make our graph wider, we’ll need to update ratio so that it’s &lt; 1. For example:\n\n\nNote: This plot doesn’t render well in thse slides or in the RStudio plot pane. I recommend running the code in RStudio, then clicking the Zoom button in the Plot pane for best viewing.\n\n\n\nlyme_pop |&gt; \n  filter(state == \"Vermont\") |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_line() + \n  coord_fixed(ratio = 1/50)\n\n\n\nPlaying around with the ratio value yourself is the best way to get a sense for how the aspect ratio of a given ggplot will change."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#area-chart",
    "href": "slides/week3.3-evolution-slides.html#area-chart",
    "title": "EDS 240",
    "section": "",
    "text": "Area chart is similar to a line graph, just filled in\n\nInstead of just a line or scatter plot to indicate the change in a numeric variable through time, the space between the line and the x-axis is colored or shaded in. Area plots are sometimes criticized for violating the data-ink ratio rule, which argues that any non-data-ink should be omitted wherever possible. If the number of observations is low (as in this example) a connected scatter plot may more clearly show when each observation was made.\n\n\n\nA basic area plot (New Jersey)\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state == \"New Jersey\") |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state)) +\n  geom_area() \n\n\n\n\n\n\nUpdate the fill color\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state == \"New Jersey\") |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +\n  geom_area() +\n  scale_fill_manual(values = c(\"#047C90\")) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#stacked-area-chart",
    "href": "slides/week3.3-evolution-slides.html#stacked-area-chart",
    "title": "EDS 240",
    "section": "",
    "text": "Stacked area charts show the evolution of a whole + the relative contribution of each group\n\nStacked area charts are useful for showing the evolution of a whole and the relative proportions of each group that make up the whole. For example, the top of the colored area shows the total Lyme disease incidence (# cases / 100k people) across all groups (notice the difference in y-axis values), while the individual colors are the relative contributions of the top 4 states with the highest lyme disease incidence:\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state %in% c(\"Maine\", \"Rhode Island\", \"New Hampshire\", \"Vermont\")) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +\n  geom_area()"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#proportional-stacked-area",
    "href": "slides/week3.3-evolution-slides.html#proportional-stacked-area",
    "title": "EDS 240",
    "section": "",
    "text": "A variant: proportional stacked area charts\n\nProportional stacked area charts plot percentage contribution instead of absolute numbers on the y-axis. The focus of this version is the proportion of contribution made by each category rather than absolute numbers.\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state %in% c(\"Maine\", \"Rhode Island\", \"New Hampshire\", \"Vermont\")) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +\n  geom_area(position = \"fill\") +\n  scale_y_continuous(labels = scales::percent_format(scale = 100))"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#stacked-area-group-order",
    "href": "slides/week3.3-evolution-slides.html#stacked-area-group-order",
    "title": "EDS 240",
    "section": "",
    "text": "Group order matters!\n\nGroup order (from bottom to top) can have an influence – oftentimes, you’ll want to put the most important group on the bottom (closest to the x-axis), since your audience will have an easier time reading values for that group. For example, US Drought Monitor likely wanted to draw attention to what percentage of land area in CA experienced the highest-severity drought level (D4, Exceptional). By plotting that group on the bottom of the graph below, we can more easily identify that ~60% of CA experienced the worst level of drought in 2014-2015.\n\n\n\n\n\n\n\n\n\n\n\n\n \n You’ll be recreating this graph (original source US Drought Monitor, via Wikipedia) in discussion section this week!\n\n\nThis article by Info River nicely outlines situations where using a stacked area chart is great, when not to use them, and important considerations."
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#stacked-area-chart-challenge",
    "href": "slides/week3.3-evolution-slides.html#stacked-area-chart-challenge",
    "title": "EDS 240",
    "section": "",
    "text": "Stacked area charts are not good for studying the evolution of individual groups\n\nIt is super challenging to subtract the height of groups from one another at any / each given point in time. For example, both of the charts below show the same data (Lyme disease incidence (# cases / 100k people) for Maine, New Hampshire, Rhode Island, and Vermont):\n\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state %in% c(\"Maine\", \"Rhode Island\", \"New Hampshire\", \"Vermont\")) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state, fill = state)) +\n  geom_area()\n\n\n\n\n\n\nlyme_pop |&gt; \n  filter(year %in% c(2010:2020)) |&gt; \n  filter(state %in% c(\"Maine\", \"Rhode Island\", \"New Hampshire\", \"Vermont\")) |&gt; \n  ggplot(aes(x = year, y = cases_per100k, group = state, color = state)) +\n  geom_line() +\n  facet_wrap(~state)"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#end",
    "href": "slides/week3.3-evolution-slides.html#end",
    "title": "EDS 240",
    "section": "",
    "text": "See you next week!\n\n\n~ This is the end of Lesson 3 (of 3) ~"
  },
  {
    "objectID": "slides/week3.3-evolution-slides.html#assignments",
    "href": "slides/week3.3-evolution-slides.html#assignments",
    "title": "EDS 240",
    "section": "",
    "text": "Assignments\n\n\n\nEnd-of-class Survey week 3 (EOC #2) – Due Mon 01/22 at 11:55pm\n\n2 multiple choice + 2 short answer + 1 optional question\n\n\nHomework Assignment #2 (HW #2) – Due Sat 02/03 at 11:59pm\n\ntbd"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#title-slide",
    "href": "slides/week4.2-relationships-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 4.1\nVisualizing numerical relationships\n\nWeek 4 | January 29th, 2024"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#numerical-relationships",
    "href": "slides/week4.2-relationships-slides.html#numerical-relationships",
    "title": "EDS 240",
    "section": "",
    "text": "Visualizing numerical relationships?\n\n\n\nFor visualizing the relationship between (typically) two numeric variables.\n\n\n\n\nLine graphs (from week 3) are similar to scatter plots, except the x-axis variable is ordered chronologically and points are connected by lines to emphasize trends."
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#roadmap",
    "href": "slides/week4.2-relationships-slides.html#roadmap",
    "title": "EDS 240",
    "section": "",
    "text": "Roadmap"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#stream-data",
    "href": "slides/week4.2-relationships-slides.html#stream-data",
    "title": "EDS 240",
    "section": "",
    "text": "The data: Hubbard Brook Watershed stream chemistry\n\nThe Hubbard Brook Experimenatal Forest is a 8,700-acre hardwood research forest in the White Mountains of New Hampshire and home to a series of small watersheds occupying the valley’s north- and south-facing slopes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMap of Hubbard Brook Experimental Forest, downloaded from the Hubbard Brook Ecosystem Study Photo Galleries\n\n\nSince 1963, researchers have collected and analyzed weekly stream and precipitation data from the forest’s watersheds.\nThese long-term data have contributed to important research, including the discovery of acid rain in North America. These data have also been used to document the effectiveness of federal clean air legislation in reducing coalfired power plant emissions.\nIn this lesson, we’ll explore the effects of various compounds on stream water pH (a lower pH = more acidic).\n\n\n\nI admittedly don’t know much about water chemistry, but have skimmed a number of helpful resources throughout the creation of this lesson. They’ll be linked as referenced."
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#data-wrangling",
    "href": "slides/week4.2-relationships-slides.html#data-wrangling",
    "title": "EDS 240",
    "section": "",
    "text": "Data wrangling\n\nOut data don’t require much wrangling, though we will practice using the {metajam} package for downloading and reading in data from repositories in the DataOne network.\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(metajam) \nlibrary(tidyverse)\n\n#...................download data from DataOne...................\ndownload_d1_data(\"https://cn.dataone.org/cn/v2/resolve/https%3A%2F%2Fpasta.lternet.edu%2Fpackage%2Fdata%2Feml%2Fknb-lter-hbr%2F208%2F9%2F3b3cf7ea447cb875d7c7d68ebdfd24c7\",\n                 path = here::here(\"week4\")) \n\n#  ~ NOTE: I recommend renaming the downloaded folder to 'data/' so that it's ignored by .gitignore! ~\n\n#....................read in downloaded files....................\nstream_chem_all &lt;- read_d1_files(here::here(\"week4\", \"data\"))\n\n#........................get the data file.......................\nstream_chem_data &lt;- stream_chem_all$data"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#basic-scatter",
    "href": "slides/week4.2-relationships-slides.html#basic-scatter",
    "title": "EDS 240",
    "section": "",
    "text": "Basic scatter plot\n\nThe pH of surface water and topsoil may be lower in the presence of dissolved organic matter (e.g. see Erlandsson et al. 2010 & Zhou et al. 2019.)). To start, let’s look at the effects of DOC on pH for just the most recent water year (2021):\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH)) + \n  geom_point(alpha = 0.5)"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#rug-plot",
    "href": "slides/week4.2-relationships-slides.html#rug-plot",
    "title": "EDS 240",
    "section": "",
    "text": "Rug plots help to visualize the distribution of data\n\nRug plots add distribution marks (one narrow line for each data point) along the x and y axes of your plot:\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH)) + \n  geom_point(alpha = 0.5) +\n  geom_rug()"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#ggMarginal",
    "href": "slides/week4.2-relationships-slides.html#ggMarginal",
    "title": "EDS 240",
    "section": "",
    "text": "Try marginal plots as an alternative to geom_rug()\n\nThe {ggExtra} package can be used to add marginal histograms / boxplots / density plots to ggplot scatter plots:\n\n\n\np1 &lt;- stream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH)) + \n  geom_point(alpha = 0.5)\n\nggExtra::ggMarginal(p1, type = \"histogram\")\n\n\n\n\n\n\n\n\n\n\np1 &lt;- stream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH)) + \n  geom_point(alpha = 0.5)\n\nggExtra::ggMarginal(p1, type = \"density\")\n\n\n\n\n\n\n\n\n\n\np1 &lt;- stream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH)) + \n  geom_point(alpha = 0.5)\n\nggExtra::ggMarginal(p1, type = \"boxplot\")\n\n\n\n\n\n\n\n\n\n\nExplore a variety of other parameters to adjust the appearance of your marginal plots (e.g. col, fill, binwidth, etc.). You can add marginal plots on just a single axis (e.g. margins = \"x\" for just a marginal plot along the x-axis), or separately adjust the appearance of marginal plots (e.g. xparams = list(fill = \"red\"))"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#ggMarginal-groups",
    "href": "slides/week4.2-relationships-slides.html#ggMarginal-groups",
    "title": "EDS 240",
    "section": "",
    "text": "Marginal plots also work with groups\n\nHere, we color points by site. It can be helpful to move the legend above or below the plot so that the marginal plot sit cleanly against the right-hand side of graph:\n\np2 &lt;- stream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH, color = site)) + \n  geom_point(alpha = 0.5) +\n  theme(legend.position = \"bottom\")\n\nggExtra::ggMarginal(p2, type = \"density\", groupFill = TRUE, groupColour = TRUE)"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#trend-lines",
    "href": "slides/week4.2-relationships-slides.html#trend-lines",
    "title": "EDS 240",
    "section": "",
    "text": "Trend lines\n\nhttps://intro2r.com/the-start-of-the-end.html https://ggplot2-book.org/getting-started#sec-smooth"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#third-var",
    "href": "slides/week4.2-relationships-slides.html#third-var",
    "title": "EDS 240",
    "section": "",
    "text": "Bubble charts for visualizing a third numeric variable\n\nLow pH levels can increase the solubility of heavy metals, like aluminum (Al). High levels of Al can limit the growth and reproduction of aquatic species.\nWe can use a bubble chart to represent this third numeric variable (Al) through the size of our scatter plot points. Here, we also update our x-axis and legend titles:\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH, color = site, size = Al_ICP)) + \n  geom_point(alpha = 0.5) +\n  labs(x = \"DOC (mg/L)\", size = \"Al (mg/L)\", color = \"Site\")"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#bub-size",
    "href": "slides/week4.2-relationships-slides.html#bub-size",
    "title": "EDS 240",
    "section": "",
    "text": "Adjust the size range of bubbles\n\nUse scale_size() to adjust the area range of the bubbles:\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH, color = site, size = Al_ICP)) + \n  geom_point(alpha = 0.5) +\n  scale_size(range = c(1, 10)) +\n  labs(x = \"DOC (mg/L)\", size = \"Al (mg/L)\", color = \"Site\")\n\n\nAlternatively, using scale_size_area() ensures that the value of 0 is mapped to a size of 0."
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#third-var-difficult",
    "href": "slides/week4.2-relationships-slides.html#third-var-difficult",
    "title": "EDS 240",
    "section": "",
    "text": "Use size to represent a third numeric variable cautiously\n\n\nBubble charts encode values based on both position (within the Cartesian coordinate system) and size. Some challenges with this:\n\n\nwe (humans) generally have an easier time perceiving differences in position rather than size – the relationship between your x- and y-axis variables will be the primary focus\nit can be hard to compare the strengths of different associations – is there an alternative way of presenting your data to better highlight this?\nit’s difficult to see small differences in size – if the range of values mapped to size is small, your bubbles will look indistinguishable from one another\nit can be difficult to match a bubble’s size to the scale of difference in the legend – consider adjusting the size range of your scale"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#bub-size-area",
    "href": "slides/week4.2-relationships-slides.html#bub-size-area",
    "title": "EDS 240",
    "section": "",
    "text": "Always scale bubble area by value\n\nBy default, ggplot scales bubble area by value, rather than radius or diameter. Scaling the radius or diameter by value can be deceiving – a point with 2x the value of another point would end up having 4x the area, making it’s value appear larger than warranted:\n\n\n\nScaling size by area using scale_size()\n\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH, color = site, size = Al_ICP)) + \n  geom_point(alpha = 0.5) +\n  scale_size(range = c(1, 10)) +\n  labs(x = \"DOC (mg/L)\", size = \"Al (mg/L)\", color = \"Site\")\n\n\n\n\n\n\n\n\n\n\nScaling size by radius using scale_radius()\n\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH, color = site, size = Al_ICP)) + \n  geom_point(alpha = 0.5) +\n  scale_radius(range = c(1, 10)) +\n  labs(x = \"DOC (mg/L)\", size = \"Al (mg/L)\", color = \"Site\")"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#scale-by-color",
    "href": "slides/week4.2-relationships-slides.html#scale-by-color",
    "title": "EDS 240",
    "section": "",
    "text": "Visualizing a third numeric variable using color\n\nRather than coloring points by site, we can map color to them based on our third continuous numeric variable, Al_ICP. We’ll also apply the viridis color map:\n\nstream_chem_data |&gt; \n  filter(waterYr == 2021) |&gt; \n  ggplot(aes(x = DOC, y = pH, color = Al_ICP)) + \n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  labs(x = \"DOC (mg/L)\", color = \"Al (mg/L)\")"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#overplotting",
    "href": "slides/week4.2-relationships-slides.html#overplotting",
    "title": "EDS 240",
    "section": "",
    "text": "Overplotting can disguise trends\n\nSometimes, we just have too many data points for a traditional scatter plot to be effective. For example, what if we want to plot all data (not just the 2021 water year subset)? Here, we plot sulfate concentration (SO4) against pH:\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) + \n  geom_point()"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#initial-strategies",
    "href": "slides/week4.2-relationships-slides.html#initial-strategies",
    "title": "EDS 240",
    "section": "",
    "text": "Some initial strategies\n\nDepending on how many points you have and the message you want to convey, you may consider the following:\n\n\n\n\nSmaller points and / or transparency\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) + \n  geom_point(size = 0.5, alpha = 0.3) \n\n\n\n\n\n\n\n\n\n\nAdd a rug plot\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) + \n  geom_point(size = 0.5, alpha = 0.3) +\n  geom_rug()\n\n\n\n\n\n\n\n\n\n\nColor by group\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH, color = site)) + \n  geom_point(size = 0.5, alpha = 0.3) \n\n\n\n\n\n\n\n\n\n\n\n\nBut with a really large number of points, these strategies may not make interpretation much easier…"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#heatmaps",
    "href": "slides/week4.2-relationships-slides.html#heatmaps",
    "title": "EDS 240",
    "section": "",
    "text": "Alternatively, try a heatmap\n\nYou might imagine that you’re looking down on a histogram, where lighter areas indicate a higher density of points.\n\n\n\nheatmap of 2d bin counts\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  geom_bin2d() +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\nhexagonal heatmap of 2d bin counts\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  geom_hex() +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\nSimilar to a histogram, you can update the number of bins or binwidth."
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#cont-legend",
    "href": "slides/week4.2-relationships-slides.html#cont-legend",
    "title": "EDS 240",
    "section": "",
    "text": "Adjust legend appearance using guides()\n\nCheck out the guides() function for tweaking the appearance of your legend (e.g. increasing the height can help readers more easily read the continuous color scale):\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  geom_hex() +\n  scale_fill_viridis_c() + \n  guides(fill = guide_colourbar(title = \"Count\", \n                                barwidth = 1, barheight = 15))"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#2d-density",
    "href": "slides/week4.2-relationships-slides.html#2d-density",
    "title": "EDS 240",
    "section": "",
    "text": "Another option: 2d density / contour plots\n\nThese are the 2d equivalent to creating a density plot using geom_density() (see week 3 materials).\n\n\n\ncontours of a 2d density estimate\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  geom_density_2d()\n\n\n\n\n\n\n\n\n\n\nfilled in contours\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  geom_density_2d_filled()\n\n\n\n\n\n\n\n\n\n\n\nHowever, it can be challenging to interpret these plots…"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#ggdensity",
    "href": "slides/week4.2-relationships-slides.html#ggdensity",
    "title": "EDS 240",
    "section": "",
    "text": "Consider using the {ggdensity} equivalent geoms\n\n\n\n\ncontour lines using geom_hdr_lines()\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  ggdensity::geom_hdr_lines()\n\n\n\n\n\n\n\n\n\n\nfilled contours using geom_hdr()\n\n\nggplot(stream_chem_data, aes(x = SO4, y = pH)) +\n  ggdensity::geom_hdr()"
  },
  {
    "objectID": "slides/week4.2-relationships-slides.html#end-break",
    "href": "slides/week4.2-relationships-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "Take a Break\n\n\n~ This is the end of Lesson 2 (of 3) ~\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#title-slide",
    "href": "slides/week1.3-ggplot-review-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 1.3\n{ggplot2} review\n\nWeek 1 | January 8th, 2024"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#ggplot2-advantages",
    "href": "slides/week1.3-ggplot-review-slides.html#ggplot2-advantages",
    "title": "EDS 240",
    "section": "",
    "text": "Advantages of {ggplot2}\n\n\n\n\n\n\n\nconsistent underlying “grammar of graphics” (Wilkinson 2005)\nsuper flexible, layered plot specification (see Wickham 2008)\ntheme system for polishing plot appearance\nlots of additional functionality thanks to extensions\nactive and helpful community\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\nadapted from Cédric Scherer’s rstudio::conf(2022) workshop, Graphic Design with ggplot2\n\n\nGrammar of graphics: provides a structure to combine graphical elements into figures that display data in a meaningful way.\n\n–"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#grammar-of-graphics",
    "href": "slides/week1.3-ggplot-review-slides.html#grammar-of-graphics",
    "title": "EDS 240",
    "section": "",
    "text": "{ggplot2} is based on the Grammar of Graphics\n\n\n“A grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g. the “scatterplot”) and gain insight into the deep structure that underlies statistical graphics.”\n\n\n-from Hadley Wickham’s A layered grammar of graphics in Journal of Computational and Graphical Statistics, vol. 19, no. 1 pp. 3-28, 2010.\n\n\n\n\n“In the grammar of a language, words have different parts of speech, which perform different roles in the sentence. Analagously, the grammar of graphics separates a graphic into different layers”\n\n\n-from Liz Sander’s post Telling stories with data using the grammar of graphics"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#graphic-layers",
    "href": "slides/week1.3-ggplot-review-slides.html#graphic-layers",
    "title": "EDS 240",
    "section": "",
    "text": "{ggplot2} graphic layers\n\n\nFirst these:\n1. data – in tidy format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)\n2. geometric objects (aka geoms) – define the type of plot(s)\n\n\nThen these:\n3. statistical transformations – algorithm used to calculate new values for a graph\n4. position adjustments – control the fine details of position when geoms might otherwise overlap\n5. coordinate system – change what x and y axes mean (e.g. Cartesian (default), polar, flipped)\n6. facet – create subplots that each display one subset of the data\n\nNote: You many not apply or customize all of the above layers (or in this exact order) for every plot you build"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#comm-layers",
    "href": "slides/week1.3-ggplot-review-slides.html#comm-layers",
    "title": "EDS 240",
    "section": "",
    "text": "Enhance communication using additional layers\n\n\n1. labels – add / update titles, axis / legend labels\n2. annotations – add textual labels (e.g. to highlight specific data points or trend lines, etc.)\n3. scales – update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)\n4. themes – customize the non-data elements of your plot\n5. layout – combine multiple plots into the same graphic\n\nNote: You many not apply or customize all of the above layers (or in this exact order) for every plot you build"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#aside-tidy-data",
    "href": "slides/week1.3-ggplot-review-slides.html#aside-tidy-data",
    "title": "EDS 240",
    "section": "",
    "text": "An aside . . .\n\n\n\nArt by Allison Horst"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#tidy-data",
    "href": "slides/week1.3-ggplot-review-slides.html#tidy-data",
    "title": "EDS 240",
    "section": "",
    "text": "What is tidy data?\n\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#untidy-data",
    "href": "slides/week1.3-ggplot-review-slides.html#untidy-data",
    "title": "EDS 240",
    "section": "",
    "text": "Untidy data can take many different formats\n\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#untidy-temps",
    "href": "slides/week1.3-ggplot-review-slides.html#untidy-temps",
    "title": "EDS 240",
    "section": "",
    "text": "An example: untidy temperatures\n\nTake this tibble (a lazy / surly data.frame) of temperature recordings at three stations on three dates:\n\ntemp_data_wide &lt;- tribble(\n  ~date, ~station1, ~station2,  ~station3,\n  \"2023-10-01\", 30.1, 29.8,  31.2,\n  \"2023-11-01\", 28.6, 29.1,  33.4,\n  \"2023-12-01\", 29.9, 28.5,  32.3\n)\n\nprint(temp_data_wide)\n\n# A tibble: 3 × 4\n  date       station1 station2 station3\n  &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 2023-10-01     30.1     29.8     31.2\n2 2023-11-01     28.6     29.1     33.4\n3 2023-12-01     29.9     28.5     32.3\n\n\n\n\nThis tibble is in wide or untidy format."
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#make-temps-tidy",
    "href": "slides/week1.3-ggplot-review-slides.html#make-temps-tidy",
    "title": "EDS 240",
    "section": "",
    "text": "Make tidy temperatures!\n\n\nWith your learning partners, discuss the following:\n\n\n1.) What makes temp_data_wide untidy?\n\n\n2.) Sketch out on paper or talk through what temp_data_wide would look like in long aka tidy format. Why?\n\n\n\n\n\n−+\n03:00"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#why-untidy-temps",
    "href": "slides/week1.3-ggplot-review-slides.html#why-untidy-temps",
    "title": "EDS 240",
    "section": "",
    "text": "An example: untidy temperatures\n\n\n\nMultiple observations (temperature recordings) per row\n\n\n\n\nWant more examples of untidy data? Check out these teaching materials from the NCEAS Learning Hub showcasing real-world examples of very untidy data."
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#tidy-temps",
    "href": "slides/week1.3-ggplot-review-slides.html#tidy-temps",
    "title": "EDS 240",
    "section": "",
    "text": "An example: tidy temperatures\n\nWe can use tidyr::pivot_longer() to “lengthen” our data aka convert it from wide / untidy to long / tidy:\n\ntemp_data_long &lt;- temp_data_wide |&gt; \n  pivot_longer(cols = starts_with(\"station\"),\n               names_to = \"station_id\",\n               values_to = \"temp_c\")\n\nprint(temp_data_long)\n\n# A tibble: 9 × 3\n  date       station_id temp_c\n  &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt;\n1 2023-10-01 station1     30.1\n2 2023-10-01 station2     29.8\n3 2023-10-01 station3     31.2\n4 2023-11-01 station1     28.6\n5 2023-11-01 station2     29.1\n6 2023-11-01 station3     33.4\n7 2023-12-01 station1     29.9\n8 2023-12-01 station2     28.5\n9 2023-12-01 station3     32.3"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#tidy-data-benefits",
    "href": "slides/week1.3-ggplot-review-slides.html#tidy-data-benefits",
    "title": "EDS 240",
    "section": "",
    "text": "Benefits of tidy data\n\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#wrangling-fxns",
    "href": "slides/week1.3-ggplot-review-slides.html#wrangling-fxns",
    "title": "EDS 240",
    "section": "",
    "text": "Data viz almost always begins with data wrangling\n\nThe {tidyverse} is an “opinionated” set of packages – meaning they share similar philosophies, grammar, and data structures – that are incredibly useful for data wrangling, cleaning, and manipulation (and of course, visualization).\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out the tidyverse website to learn more about each of these packages\n\n\n\n\n\n\n\n\n\n\n\n\nThe best resource for learning all things R for Data Science!"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#moving-on",
    "href": "slides/week1.3-ggplot-review-slides.html#moving-on",
    "title": "EDS 240",
    "section": "",
    "text": "Okay, moving on . . .\n\n\nLet’s make some ggplots using data from {palmerpenguins} (which are already tidy)!\n\n\n\nArtwork by Allison Horst\n\n\nThe examples on the following slides were adapted from R for Data Science, Chapters 2 and 10."
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#plot1",
    "href": "slides/week1.3-ggplot-review-slides.html#plot1",
    "title": "EDS 240",
    "section": "",
    "text": "Plot #1\n\n\nWe’ll start by exploring the relationship between penguin bill length and bill depth. For this example, we’ll focus on understanding the following layers of a ggplot (bolded):\n\n Graphic layers:\n1. data – in tidy format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)\n2. geometric objects (aka geoms) – define the type of plot(s)\n3. statistical transformations – algorithm used to calculate new values for a graph\n4. position adjustments – control the fine details of position when geoms might otherwise overlap\n5. coordinate system – change what x and y axes mean (e.g. Cartesian (default), polar, flipped)\n6. facet – create subplots that each display one subset of the data\n “Enhancing communication” layers:\n1. labels – add / update titles, axis / legend labels\n2. annotations – add textual labels (e.g. to highlight specific data points or trend lines, etc.)\n3. scales – update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)\n4. themes– customize the non-data elements of your plot\n5. layout – combine multiple plots into the same graphic"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#initialize",
    "href": "slides/week1.3-ggplot-review-slides.html#initialize",
    "title": "EDS 240",
    "section": "",
    "text": "Initialize a plot object\n\nInitialize your plot object using ggplot() – this creates a graph that’s primed to display the penguins data set, but empty since we haven’t told ggplot how to map our data onto the graph yet (in other words: we haven’t told ggplot what variables to display and where, as well as what type of plot to create):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(data = penguins)\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#aesthetics",
    "href": "slides/week1.3-ggplot-review-slides.html#aesthetics",
    "title": "EDS 240",
    "section": "",
    "text": "Initialize a plot object + map aesthetics\n\nThe mapping argument defines how variables in your data set are mapped to visual properties (aesthetics) of your plot. Here, we specify which variables map to our x and y axes:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(data = penguins, \n       mapping = aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet\n\n\nWe’ve specified which variables map onto the x & y axes but still have not yet articulated how to represent the observations"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#omitting-arg-names",
    "href": "slides/week1.3-ggplot-review-slides.html#omitting-arg-names",
    "title": "EDS 240",
    "section": "",
    "text": "Omitting argument names\n\nThe data and mapping arguments are often not explicitly written in ggplot(), as in the example below (makes for more concise code):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#piping-in",
    "href": "slides/week1.3-ggplot-review-slides.html#piping-in",
    "title": "EDS 240",
    "section": "",
    "text": "Piping into a ggplot\n\nYou can also pipe (using %&gt;% or |&gt;) directly from a data set into a ggplot() call (we’ll use more of this in future lessons). When doing so, omit the data argument from ggplot():\n\npenguins |&gt; \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#geom",
    "href": "slides/week1.3-ggplot-review-slides.html#geom",
    "title": "EDS 240",
    "section": "",
    "text": "Define a geom to represent data\n\nNext, we’ll layer on a geometric object (aka geom) that our plot will use to represent our penguin data. There are many geoms (geom_*()) that are built into {ggplot2} already (and more when you use extension packages). To create a scatterplot:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#dat-map-in-geom",
    "href": "slides/week1.3-ggplot-review-slides.html#dat-map-in-geom",
    "title": "EDS 240",
    "section": "",
    "text": "Defining data & mappings in geom_*()\n\nYou can also define the data and mapping layers within a geom_*() (rather than ggplot()) – this is helpful if you plan to have multiple geoms with different mappings:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot() +\n  geom_point(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm))\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#color-points-by-spp",
    "href": "slides/week1.3-ggplot-review-slides.html#color-points-by-spp",
    "title": "EDS 240",
    "section": "",
    "text": "Use color to differentiate species\n\nIf we’d like to represent species using another aesthetic (e.g. color, shape, size), we need to modify our plot’s aesthetic (i.e. inside aes()) – any time we want to modify the appearance of our plotted data based on a variable in our dataset, we do so within aes(). This process is known as scaling. A legend will automatically be added to indicate which values (in this case, colors) correspond to which level of our variable (in this case, species):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#color-points-by-spp-local",
    "href": "slides/week1.3-ggplot-review-slides.html#color-points-by-spp-local",
    "title": "EDS 240",
    "section": "",
    "text": "Mapping color at a local level\n\nAlternatively, map color at a local (i.e. within a specific geom) rather than global (i.e. within ggplot()) layer:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species))\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#why-local-mapping",
    "href": "slides/week1.3-ggplot-review-slides.html#why-local-mapping",
    "title": "EDS 240",
    "section": "",
    "text": "Why map locally?\n\nHere, we use geom_smooth() to add a best fit line (based on a linear model, using method = \"lm\") to our plot:\n\n\nGlobal mappings are passed down to each subsequent geom layer. Therefore, the color = species mapping is also passed to geom_smooth(), resulting in a best fit line for each species.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\nLocal mappings (e.g. within geom_point()) only apply to that particular layer. Therefore, the color = species mapping is only applied to geom_point(), and geom_smooth() fits a best fit line to the entire data set.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#one-color",
    "href": "slides/week1.3-ggplot-review-slides.html#one-color",
    "title": "EDS 240",
    "section": "",
    "text": "What if we just want to color all points the same?\n\nDo so within the corresponding geom_*() and outside of the aes() function! Color is no longer being mapped to a variable.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(color = \"blue\")"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#scale-color-manual",
    "href": "slides/week1.3-ggplot-review-slides.html#scale-color-manual",
    "title": "EDS 240",
    "section": "",
    "text": "We can also map our own colors\n\nHere, we use scale_color_manual() to update the colors of our data points. Colors will be mapped from the levels in our data (i.e. Adelie, Chinstrap, Gentoo) to the order of the aethetic values supplied (\"#FF8302\", \"#C35CCA\", \"#067575\"):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_manual(values = c(\"#FF8302\", \"#C35CCA\", \"#067575\"))\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#color-points-by-mass",
    "href": "slides/week1.3-ggplot-review-slides.html#color-points-by-mass",
    "title": "EDS 240",
    "section": "",
    "text": "Use color to describe a continuous variable\n\nIn the previous example, we mapped color to a categorical variable (species). We can also map color to continuous variables (e.g. body_mass_g):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = body_mass_g)) +\n  geom_point() +\n  scale_color_gradient(low = \"#132B43\", high = \"#F7DD4C\")\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#plot2",
    "href": "slides/week1.3-ggplot-review-slides.html#plot2",
    "title": "EDS 240",
    "section": "",
    "text": "Plot #2\n\n\nIn this next example, we’ll explore penguin species counts. For this example, we’ll focus on understanding the following layers of a ggplot (bolded):\n\n Graphic layers:\n1. data – in tidy format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)\n2. geometric objects (aka geoms) – define the type of plot(s)\n3. statistical transformations – algorithm used to calculate new values for a graph\n4. position adjustments – control the fine details of position when geoms might otherwise overlap\n5. coordinate system – change what x and y axes mean (e.g. Cartesian (default), polar, flipped)\n6. facet – create subplots that each display one subset of the data\n “Enhancing communication” layers:\n1. labels – add / update titles, axis / legend labels\n2. annotations – add textual labels (e.g. to highlight specific data points or trend lines, etc.)\n3. scales – update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)\n4. themes– customize the non-data elements of your plot\n5. layout – combine multiple plots into the same graphic"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#basic-barplot",
    "href": "slides/week1.3-ggplot-review-slides.html#basic-barplot",
    "title": "EDS 240",
    "section": "",
    "text": "Initialize + map aesthetics + define geom\n\nSimilar to our first scatterplot, we start by initializing our plot object with data, mapping our aesthetics, and defining a geometric object:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar()\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#stat-transformation",
    "href": "slides/week1.3-ggplot-review-slides.html#stat-transformation",
    "title": "EDS 240",
    "section": "",
    "text": "What is a statistical transformation?\n\nSome geoms, like scatterplots, plot the raw values of your data set. Other geoms, like bar charts, histograms, boxplots, smoothers, etc. calculate new values to plot.\n\n\nEach point on our scatterplot represents a raw observation value (one point = one penguin)\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nEach bar represents a species count (note the y-axis, count, which is not a variable in our penguins data set)\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#default-stat",
    "href": "slides/week1.3-ggplot-review-slides.html#default-stat",
    "title": "EDS 240",
    "section": "",
    "text": "The default stat for geom_bar() is “count”\n\nEvery geom has a default stat – meaning you can typically use geoms without worrying about the underlying statistical transformation.\nThe default statistical transformation used in geom_bar() is count, which first groups our categorical variable (species), then calculates a count for each unique level (Adelie, Chinstrap, Gentoo).\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(stat = \"count\") # you don't need to explicitly include `stat = \"count\"` since it's the default\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#override-default-stat",
    "href": "slides/week1.3-ggplot-review-slides.html#override-default-stat",
    "title": "EDS 240",
    "section": "",
    "text": "We can override the default stat\n\nLet’s say we have a data frame with calculated count values (e.g. penguins_summary) that we’d like to plot using geom_bar(). We can change stat = \"count\" (default) to stat = \"identity\" to generate bar heights based off the “identity” of values in the n column of penguin_summary.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguin_summary &lt;- penguins |&gt; \n  count(species) # calculate number of observations (rows) for each species\n\nggplot(penguin_summary, aes(x = species, y = n)) + \n  geom_bar(stat = \"identity\")\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#stat-mapping",
    "href": "slides/week1.3-ggplot-review-slides.html#stat-mapping",
    "title": "EDS 240",
    "section": "",
    "text": "We can override the default stat mapping\n\nNow let’s say we’d like to display the same bar chart with y-axis values as proportions, rather than counts. We can override the default mapping from transformed variables to aesthetics by doing the following:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species, y = after_stat(prop), group = 1)) +\n  geom_bar()\n\n\nNOTE: Including group = 1 overrides the default behavior of geom_bar() to group by the x variable. The default behavior of geom_bar() is to group by the x variable (for us, that’s species) to separately count the number of rows in each level (Adelie, Chinstrap, Gentoo). If we want proportions, we need to consider all levels of species together to calculate the proportion of each level of species relative to all levels of species.\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#stat-summary",
    "href": "slides/week1.3-ggplot-review-slides.html#stat-summary",
    "title": "EDS 240",
    "section": "",
    "text": "We can use stat_summary() to compute & plot any aggregate\n\nHere, we plot the min, mean, and max values of penguin body_mass_g by species:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins) +\n  stat_summary(\n    aes(x = species, y = body_mass_g),\n    fun.max = max, \n    fun.min = min,\n    fun = mean\n  )\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#pos-adj",
    "href": "slides/week1.3-ggplot-review-slides.html#pos-adj",
    "title": "EDS 240",
    "section": "",
    "text": "What is a position adjustment?\n\nPosition adjustments apply minor tweaks to the position of elements to resolve overlapping geoms. For example, let’s say we would like to visualize penguin counts by species (bar height) and by island (color) using our bar chart from earlier. We could add the fill aesthetic:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar()\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#pos-default-bar",
    "href": "slides/week1.3-ggplot-review-slides.html#pos-default-bar",
    "title": "EDS 240",
    "section": "",
    "text": "The default position for geom_bar() is “stack”\n\nEvery geom has a default position. The default position used in geom_bar() is stack, which stacks bars on top of one another, based on the fill value (here, that’s island):\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"stack\") # you don't need to explicitly include `position = \"stack\"` since it's the default\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#pos-alts",
    "href": "slides/week1.3-ggplot-review-slides.html#pos-alts",
    "title": "EDS 240",
    "section": "",
    "text": "Alternative position adjustments for geom_bar()\n\nBelow are a few position options available for use with geom_bar():\n\n\nposition = \"fill\" creates a set of stacked bars but makes each set the same height (easier to compare proportions across groups)\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\nposition = \"dodge\" places overlapping bars directly beside one another (easier to compare individual values)\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#pos-alt",
    "href": "slides/week1.3-ggplot-review-slides.html#pos-alt",
    "title": "EDS 240",
    "section": "",
    "text": "Alternatively, use position = position_*()\n\nInstead of position = \"X\", you can use functions to update and further adjust your geom’s positions. Here, we’ll use position_dodge2() to also ensure the widths of each of our bars are equal:\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = position_dodge2(preserve = \"single\"))\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#default-coord",
    "href": "slides/week1.3-ggplot-review-slides.html#default-coord",
    "title": "EDS 240",
    "section": "",
    "text": "What is a coordinate system?\n\nA Coordinate System is a system that uses one or more numbers (coordinates), to uniquely determine the position of points or other geometric elements. By default, ggplots are constructed in a Cartesian coordinate system, consisting of a horizontal x-axis and vertical y-axis.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() +\n  coord_cartesian() # you don't need to explicitly include `coord_cartesian()` since it's the default\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#coord",
    "href": "slides/week1.3-ggplot-review-slides.html#coord",
    "title": "EDS 240",
    "section": "",
    "text": "Changing coordinate systems\n\nDepending on the type of data, axis label length, etc. it may make sense to change this coordinate system. Two options for our bar plot:\n\n\ncoord_flip() switches the x and y axes.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\ncoord_polar() uses polar coordinates.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() + \n  coord_polar()\n\n\n\n\n\n\n\n\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#prebuilt-themes",
    "href": "slides/week1.3-ggplot-review-slides.html#prebuilt-themes",
    "title": "EDS 240",
    "section": "",
    "text": "Use pre-made themes to update plot appearance\n\n{ggplot2} comes with a number of complete themes, which control all non-data display. See two examples below:\n\n\ndisplays x and y axis lines and no gridlines\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\ndisplays light grey lines and axes\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() +\n  theme_light()\n\n\n\n\n\n\n\n\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#custom-themes",
    "href": "slides/week1.3-ggplot-review-slides.html#custom-themes",
    "title": "EDS 240",
    "section": "",
    "text": "Further customize plot appearance using theme()\n\nFurther modify nearly any non-data element of your plot using theme().\n\n\nStart with theme_light():\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() +\n  theme_light()\n\n\n\n\n\n\n\n\n\nFurther modify with theme():\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = species)) +\n  geom_bar() +\n  theme_light() +\n  theme(\n    axis.title = element_text(size = 17, color = \"purple\")\n  )\n\n\n\n\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#plot3",
    "href": "slides/week1.3-ggplot-review-slides.html#plot3",
    "title": "EDS 240",
    "section": "",
    "text": "Plot #3\n\n\nIn this next example, we’ll explore penguin flipper lengths. For this example, we’ll focus on understanding the following layers of a ggplot (bolded):\n\n Graphic layers:\n1. data – in tidy format + define aesthetics (how variables map onto a plot e.g. axes, shape, color, size)\n2. geometric objects (aka geoms) – define the type of plot(s)\n3. statistical transformations – algorithm used to calculate new values for a graph\n4. position adjustments – control the fine details of position when geoms might otherwise overlap\n5. coordinate system – change what x and y axes mean (e.g. Cartesian (default), polar, flipped)\n6. facet – create subplots that each display one subset of the data\n “Enhancing communication” layers:\n1. labels – add / update titles, axis / legend labels\n2. annotations – add textual labels (e.g. to highlight specific data points or trend lines, etc.)\n3. scales – update how the aesthetic mappings manifest visually (e.g. colors scales, axis ticks, legends)\n4. themes– customize the non-data elements of your plot\n5. layout – combine multiple plots into the same graphic"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#basic-histogram",
    "href": "slides/week1.3-ggplot-review-slides.html#basic-histogram",
    "title": "EDS 240",
    "section": "",
    "text": "Initialize + map aesthetics + define geom\n\nWe’ll again start by initializing our plot object with data, mapping our aesthetics, and defining a geometric object. Note that the default statistical transformation for geom_histogram() is stat = \"bin\":\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = flipper_length_mm)) + \n  geom_histogram()\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#color-bins-by-spp",
    "href": "slides/week1.3-ggplot-review-slides.html#color-bins-by-spp",
    "title": "EDS 240",
    "section": "",
    "text": "Use color to differentiate species\n\nJust like in our scatterplot (Plot #1), we’ll modify our plot’s aesthetics (i.e. inside aes()) to color our histrogram bins according to the species variable. Unlike our scatterplot (which uses the color argument), we’ll use the fill argument to fill the bars with color (rather than outline them with color). We’ll also manually define our fill scale:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) + \n  geom_histogram() +\n  scale_fill_manual(values = c(\"#FF8302\", \"#C35CCA\", \"#067575\"))\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#pos-default-hist",
    "href": "slides/week1.3-ggplot-review-slides.html#pos-default-hist",
    "title": "EDS 240",
    "section": "",
    "text": "Update the default position to \"identity\"\n\nLet’s update the position of our binned bars from \"stack\" to \"identity\" and also increase the transparency (using alpha) so that we can see overlapping bars:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) + \n  geom_histogram(position = \"identity\", alpha = 0.5) +\n  scale_fill_manual(values = c(\"#FF8302\", \"#C35CCA\", \"#067575\"))\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#labels",
    "href": "slides/week1.3-ggplot-review-slides.html#labels",
    "title": "EDS 240",
    "section": "",
    "text": "Update / add plot labels\n\nUpdate axis and legend titles and add a plot title using labs():\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) + \n  geom_histogram(position = \"identity\", alpha = 0.5) +\n  scale_fill_manual(values = c(\"#FF8302\", \"#C35CCA\", \"#067575\")) +\n  labs(x = \"Flipper length (mm)\", y = \"Frequency\", fill = \"Species\",\n       title = \"Penguin Flipper Lengths\")\n\n\n\nlabels | annotations | scales | themes | layout"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#faceting",
    "href": "slides/week1.3-ggplot-review-slides.html#faceting",
    "title": "EDS 240",
    "section": "",
    "text": "Create subplots using facets\n\nSometimes (particularly during the data exploration phase) it’s helpful to create subplots (i.e. separate panels) of your data. Here we use facet_wrap() to separate our data by the species variable. By default, it creates a 1 x 3 matrix of plots. We can manually specify how many rows or columns we’d like using nrow or ncol:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) + \n  geom_histogram(position = \"identity\", alpha = 0.5) +\n  scale_fill_manual(values = c(\"#FF8302\", \"#C35CCA\", \"#067575\")) +\n  labs(x = \"Flipper length (mm)\", y = \"Frequency\", fill = \"Species\",\n       title = \"Penguin Flipper Lengths\") + \n  facet_wrap(~species, ncol = 1)\n\n\n\ndata | geometric object | statistical transformation | position adjustment | coordinate system | facet"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#evo-ggplot",
    "href": "slides/week1.3-ggplot-review-slides.html#evo-ggplot",
    "title": "EDS 240",
    "section": "",
    "text": "Building a data viz is an iterative process!\n\nWe’ll spend the next two weeks learning how to build some basic fundamental charts and talking about important considerations when choosing a graphic form for presenting your data. Then, we’ll move into graphic design theory and the tools and packages in the {ggplot2} ecosystem that make it possible.\n\n\nVisualization by Cédric Scherer, from his blog post, The Evolution of a ggplot (Ep.1) – create your own ggplot evolution gif using the {camcorder} package"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#end-break",
    "href": "slides/week1.3-ggplot-review-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "See you next week!\n\n\n~ This is the end of Lesson 3 (of 3) ~"
  },
  {
    "objectID": "slides/week1.3-ggplot-review-slides.html#assignments",
    "href": "slides/week1.3-ggplot-review-slides.html#assignments",
    "title": "EDS 240",
    "section": "",
    "text": "Assignments\n\n\n\nEnd-of-class Survey #1 (EOC #1) – Due Mon 01/08 at 11:55pm\n\n2 multiple choice + 2 short answer + 1 optional question\n\n\nPre-course Reflection (SR #1) – Due Sat 01/13 at 11:59pm\n\n3 sets of questions about school & life, the way you learn best, learning goals, some fun stuff\n\n\n\nHomework Assignment #1 (HW #1) – Due Sat 01/20 at 11:59pm\n\n2 parts:\n\ninterpreting & annotating ggplot code\nfinding data that you’re interested in visualizing for your final assignment"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#title-slide",
    "href": "slides/week4.3-good-viz-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 4.3\nWhat makes a good data viz?\n\nWeek 4 | January 29th, 2024"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#looking-forward",
    "href": "slides/week4.3-good-viz-slides.html#looking-forward",
    "title": "EDS 240",
    "section": "",
    "text": "Looking forward . . .\n\n\n\nNext week, we’ll really start diving into improving the overall aesthetics of our data visualizations\n\n\n\n applying pre-made and custom color palettes\n\n\n\n\n updating fonts\n\n\n\n\n adding annotations\n\n\n\n\n fine-tuning themes\n\n\n\n\n centering our primary message\n\n\n\n\n\nToday, we’ll familiarize ourselves with a general set of rules and best practices."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#good-design1",
    "href": "slides/week4.3-good-viz-slides.html#good-design1",
    "title": "EDS 240",
    "section": "",
    "text": "Good data visualization design considers:\n\n\n\ndata-ink ratio (less is more, within reason)\nhow to reduce eye movement and improve readability / interpretability (e.g. through alternative legend positions, direct annotations)\nputting things in context\nhow to draw the main attention to the most important info\nconsistent use of colors, spacing, typefaces, weights\ntypeface / font choices and how they affect both readability and audience emotions and perceptions\nusing visual hierarchy to guide the reader\ncolor choices (and making sure that they’re colorblindness-friendly)\ncenters the people and communities represented in your data\nincluding alt text\n\n\n\n\nThe above should always be considered in your design process, but may not always be necessary"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#good-design2",
    "href": "slides/week4.3-good-viz-slides.html#good-design2",
    "title": "EDS 240",
    "section": "",
    "text": "Good data visualization design considers:\n\n\ndata-ink ratio (less is more, within reason)\nhow to reduce eye movement and improve readability / interpretability (e.g. through alternative legend positions, direct annotations)\nputting things in context\nhow to draw the main attention to the most important info\nconsistent use of colors, spacing, typefaces, weights\ntypeface / font choices and how they affect both readability and audience emotions and perceptions\nusing visual hierarchy to guide the reader\ncolor choices (and making sure that they’re colorblindness-friendly)\ncenters the people and communities represented in your data\nincluding alt text\n\n\nThe above should always be considered in your design process, but may not always be necessary"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#data-ink-eyes",
    "href": "slides/week4.3-good-viz-slides.html#data-ink-eyes",
    "title": "EDS 240",
    "section": "",
    "text": "Simplify plots to reduce eye movement & improve readability / interpretability"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#data-ink-ratio",
    "href": "slides/week4.3-good-viz-slides.html#data-ink-ratio",
    "title": "EDS 240",
    "section": "",
    "text": "Data-Ink ratio: remove non-data ink\n\nThe Data-Ink ratio was introduced by Edward Tufte (1983) and argues that non-data-ink (i.e. ink used for for everything except the presentation of data itself) should be removed wherever possible.\n\\[\n\\text{Data-ink ratio} = \\frac{\\text{Data-ink}}{\\text{Total ink used to print the graphic}}\n\\]\n\n\nDo so by starting with a complete theme (e.g. theme_classic(), theme_void()) and add / remove elements using theme().\n\n\n\n\nLow Data-Ink ratio\n\n\n\n\n\n\n\n\nHigh Data-Ink ratio"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#data-ink-ratio-criticism",
    "href": "slides/week4.3-good-viz-slides.html#data-ink-ratio-criticism",
    "title": "EDS 240",
    "section": "",
    "text": "Maximizing the Data-Ink ratio isn’t always best\n\n\n\n\nEliminating lots of non-data ink may render visualizations difficult to read\n\nInbar et al. (2007) found that students preferred a more maximalist visualization design over the minimalist version proposed by Tufte\n\n\n\n\n\nDesign choices depend on audience and purpose – how you choose to maximize your data-ink ratio will depend largely on who your visualization is for and the purpose it’s meant to serve (e.g. a scientific publication may have specific requirements for the design / aesthetics of a visualization, while an infographic-style visualization may leave space for more creative liberties)\n\n\n\n\n\nA general rule of thumb: aim to maximize the data-ink ratio while not sacrificing overall design and aesthetics."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#remove-redundant-legend",
    "href": "slides/week4.3-good-viz-slides.html#remove-redundant-legend",
    "title": "EDS 240",
    "section": "",
    "text": "Remove redundant legend information\n\nAsk yourself, “Does this legend provide additional information that I can’t get elsewhere?”. If not, remove a legend using:\n\nplot +\n  theme(\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDoing so increases the data-ink ratio and reduces overall eye movement."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#labels-rotated-text",
    "href": "slides/week4.3-good-viz-slides.html#labels-rotated-text",
    "title": "EDS 240",
    "section": "",
    "text": "Add direct labels & minimize rotated text\n\nWe can use a combination of coord_flip(), geom_text(), labs(), and theme() to further eliminate non-data ink and reduce overall eye movement.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOf course, a visualization like this wouldn’t be appropriate for all audiences / contexts (e.g. scientific journal), but it in many ways simplifies the presentation in a way where an audience could still walk away with the same type of information."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#move-legend-position",
    "href": "slides/week4.3-good-viz-slides.html#move-legend-position",
    "title": "EDS 240",
    "section": "",
    "text": "Move the legend (positioning)\n\nReduce eye movement by updating the legend position (e.g. move it onto the plot panel):\n\nplot + \n  theme(\n    legend.position = c(0.85, 0.15) # you'll need to adjust these values for your plot!\n  )\n\n\n\n\nOriginal plot:\n\n\n\n\n\n\n\n\nUpdated legend position:\n\n\n\n\n\n\n\n\nAlso note the redundant species mapping (color and shape) – sometime redundancy is important for accessibility!"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#legend-ggtext",
    "href": "slides/week4.3-good-viz-slides.html#legend-ggtext",
    "title": "EDS 240",
    "section": "",
    "text": "Move the legend (incorporate into title text)\n\nReduce eye movement and excess ink by including legend info in the plot (sub)title (here, using the {ggtext} package; minimal code example, below):\n\nplot +\n  labs(subtitle = \"Some subtitle text where &lt;span style='color:red;'&gt;**these words**&lt;/span&gt; are bolded and red\") +\n  theme(plot.subtitle(ggtext::element_markdown()))\n\n\n\n\n\nOriginal plot:\n\n\n\n\n\n\n\n\n\n\n\n\nLegend as styled title text:"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#add-direct-labels",
    "href": "slides/week4.3-good-viz-slides.html#add-direct-labels",
    "title": "EDS 240",
    "section": "",
    "text": "Move the legend (use direct labels)\n\nReduce eye movement and excess ink by including legend info as direct labels on the plot (here, using the {geomtextpath} package; minimal code example, below):\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +\n  geom_point(size = 3, alpha = 0.8) +\n  geomtextpath::geom_labelsmooth(aes(label = species), method = \"lm\", size = 5)\n\n\n\n\n\nOriginal plot:\n\n\n\n\n\n\n\n\n\n\n\n\nLegend as direct labels:"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#use-annotations-neil",
    "href": "slides/week4.3-good-viz-slides.html#use-annotations-neil",
    "title": "EDS 240",
    "section": "",
    "text": "Use annotations to improve readability / interpretability\n\nIs the y-axis necessary for this plot? What’s the author’s goal? How do annotations help achieve that goal?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs white space always your friend, by Neil Richards"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#use-annotations-covid",
    "href": "slides/week4.3-good-viz-slides.html#use-annotations-covid",
    "title": "EDS 240",
    "section": "",
    "text": "Use annotations to improve readability / interpretability\n\n\n“The key thing we do is to add a title to the chart, as an entry point and to explain what is going on. Text and other annotations add enourmous value for non-chart people.”\n\n\n-John Burn-Murdoch, Financial Times\n\n\n\n\n\nVaccines and Omicron mean Covid now less deadly than flu in England, by John Burn-Murdoch"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#put-in-context",
    "href": "slides/week4.3-good-viz-slides.html#put-in-context",
    "title": "EDS 240",
    "section": "",
    "text": "Consider ways to provide additional context for your data"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#wilke-context",
    "href": "slides/week4.3-good-viz-slides.html#wilke-context",
    "title": "EDS 240",
    "section": "",
    "text": "Plot groups against the whole when faceting\n\nFacets (aka small multiples) allow us to more easily view individual groups. Here, the author plots individual groups (male vs. female passengers on the Titanic) against the data set total (all passengers):\n\n\n\n\nThe area under each curve corresponds to the total number of male and female passengers with known age (468 (M) and 288 (F)).\n\n\n\n\n\n\n\n\n\n\n\n\nThe colored areas show the density estimates of the ages of M and F passengers, and the gray areas show the overall passenger age distribution.\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Fundamentals of Data Visualization, by Claus Wilke"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#benchmark-values",
    "href": "slides/week4.3-good-viz-slides.html#benchmark-values",
    "title": "EDS 240",
    "section": "",
    "text": "Add benchmark values\n\nAdd vertical (geom_vline()) or horizontal (geom_hline()) lines at important values:\n\n\n\n\n\n\n\n\n\n\n\n\n\nA minimal code example:\n\nplot + \n  geom_vline(xintercept = 11) +\n  geom_vline(xintercept = 16) +\n  geom_vline(xintercept = 21) \n\n\n\nFig cap: Temporal Variation in Bottom Temperature. Monthly bottom (4.5 m depth) temperatures at Mohawk Reef (34.396290, -119.731297) in Santa Barbara, CA compiled from 2005-2017. Vertical dashed lines represent three of four treatment temperatures (11, 16, 21°C). Data Source: Santa Barbara Coastal Long-Term Ecological Research group (adapted from Csik et al. 2023)"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#1-1-line",
    "href": "slides/week4.3-good-viz-slides.html#1-1-line",
    "title": "EDS 240",
    "section": "",
    "text": "Add 1:1 line, if relevant\n\nFor data where the relevant comparison is the x = y line (e.g. scatter plots of paired data), plot the 1:1 line.\nBelow, the author compares gene expression levels in a mutant virus to the non-mutated (wild-type) variant. He presents three (increasingly better) versions of the same plot:\n\n\n\n\nBad\n\n\n\n\n\n\n\n\n\n\n\n\nBetter\n\n\n\n\n\n\n\n\n\n\n\n\nBest\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Fundamentals of Data Visualization, by Claus Wilke"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#draw-attention",
    "href": "slides/week4.3-good-viz-slides.html#draw-attention",
    "title": "EDS 240",
    "section": "",
    "text": "Draw attention to important information / values"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#color-groups",
    "href": "slides/week4.3-good-viz-slides.html#color-groups",
    "title": "EDS 240",
    "section": "",
    "text": "Use color to highlight groups / values\n\nHighlight data by coloring groups of interest either manually or by using helpful packages, like {gghighlight} (we saw an example of this in lecture 3.3):"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#ggforce",
    "href": "slides/week4.3-good-viz-slides.html#ggforce",
    "title": "EDS 240",
    "section": "",
    "text": "Use annotations to highlight groups / values\n\nOr add annotations to your plots to call attention to data of interest (here, shown using the {ggforce} package; minimal code example, below):\n\nplot + \n  ggforce::geom_mark_ellipse(aes(filter = species == \"Gentoo\", label = \"Gentoo penguins\", \n                                 description = \"This species tends to have...\"))"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#show-values-directly1",
    "href": "slides/week4.3-good-viz-slides.html#show-values-directly1",
    "title": "EDS 240",
    "section": "",
    "text": "Show important thresholds / values directly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Looking Back: The Thomas Fire’s Impact on Santa Barbara Air Quality, in The Daily Nexus"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#show-values-directly2",
    "href": "slides/week4.3-good-viz-slides.html#show-values-directly2",
    "title": "EDS 240",
    "section": "",
    "text": "Show important thresholds / values directly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Looking Back: The Thomas Fire’s Impact on Santa Barbara Air Quality, in The Daily Nexus"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#avoid",
    "href": "slides/week4.3-good-viz-slides.html#avoid",
    "title": "EDS 240",
    "section": "",
    "text": "What doesn’t work so well in data visualization?"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#bad-data-viz",
    "href": "slides/week4.3-good-viz-slides.html#bad-data-viz",
    "title": "EDS 240",
    "section": "",
    "text": "Good data visualization design generally avoids…\n\n\n\n\ninformation overload (e.g. too many colors / shapes / fonts, groups, variables)\ndual axes (can easily mislead audiences)\npie charts (really hard for humans to effectively compare the size of angles)\n3D plots (distort perception and are generally distracting)\n\n\n\n\n\nOur job is to make it as easy as possible for our readers to understand our data without having to do mental gymnastics. The chart types above (more often than not) ask too much of our readers in their quest to understand the information being presented.\n\n\n\n  \n\nThere may be circumstances where the above are executed well…but more often than not, you’re safest avoiding them."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#info-overload-map",
    "href": "slides/week4.3-good-viz-slides.html#info-overload-map",
    "title": "EDS 240",
    "section": "",
    "text": "Information overload is no fun . . .\n\nIt can be nearly impossible to easily process many different variables, colors, shapes, etc. on the same visualization (and realistically, most people won’t want to take the time to even try):\n\n\nSource: Stack Exchange"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#info-overload-scatter",
    "href": "slides/week4.3-good-viz-slides.html#info-overload-scatter",
    "title": "EDS 240",
    "section": "",
    "text": "Information overload is no fun . . .\n\nIt can be nearly impossible to easily process many different variables, colors, shapes, etc. on the same visualization (and realistically, most people won’t want to take the time to even try):\n\n\nSource: Unknown, but borrowed from Allison Horst’s lecture"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#info-overload-parallel",
    "href": "slides/week4.3-good-viz-slides.html#info-overload-parallel",
    "title": "EDS 240",
    "section": "",
    "text": "Information overload is no fun . . .\n\nIt can be nearly impossible to easily process many different variables, colors, shapes, etc. on the same visualization (and realistically, most people won’t want to take the time to even try):\n\n\nSource: Unknown, but borrowed from Allison Horst’s lecture"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#info-overload-fixes",
    "href": "slides/week4.3-good-viz-slides.html#info-overload-fixes",
    "title": "EDS 240",
    "section": "",
    "text": "Reduce information overload whenever possible\n\n\nConsider some of the approaches we’ve already discussed:\n\nhighlighting the most important groups / values\nfaceting (small multiples)\ncreating separate visualizations\ncohesive and intuitive color scheme (more on colors next week)\n\n\n\nOr some that we haven’t covered:\n\ncreate interactive tables and / or visualizations using htmlwidgets (e.g. leaflet maps, plotly, charts, DT data tables)\ncreate reactive outputs using tools like {shiny}\n\ncheck out the EDS 430 (Intro to Shiny) materials as a starting point!"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes1",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes1",
    "title": "EDS 240",
    "section": "",
    "text": "Dual y-axes can deliberately mislead readers\n\nThe scales of dual axis charts are arbitrary and therefore can (deliberately) mislead readers about the relationship between the two data series. Let’s take this example using real Worldbank data for the German GDP and the global GDP between 2004 and 2016:\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes2",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes2",
    "title": "EDS 240",
    "section": "",
    "text": "Dual y-axes can deliberately mislead readers\n\nThe scales of dual axis charts are arbitrary and therefore can (deliberately) mislead readers about the relationship between the two data series. Let’s take this example using real Worldbank data for the German GDP and the global GDP between 2004 and 2016:\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth\n\n\nThe proportions of the two scales are often different from each other in dual axis charts. If the left axis would go down to zero, the chart would be twice as long. If the right axis would go down to zero, the chart would be almost three times as long. This is how both axes look like when we extend them to zero.\nSo while the chart looks like the German GDP and the global GDP go up at roughly the same rate (at least until 2014), they don’t. The global GDP increased by 80% until 2014; the GDP of Germany by 40%."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes3",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes3",
    "title": "EDS 240",
    "section": "",
    "text": "Dual y-axes can deliberately mislead readers\n\nThe scales of dual axis charts are arbitrary and therefore can (deliberately) mislead readers about the relationship between the two data series. Let’s take this example using real Worldbank data for the German GDP and the global GDP between 2004 and 2016:\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth\n\n\nThis is how the chart looks like with the same baseline. (Meaning, if we extended both y-axes to zero, they would have the same height.). In the best case, our readers will now think: “Seems like the global GDP increased more than the German GDP”. Yes! Success! In the worst case, our readers will think: “In the first years, the German GDP was higher than the global GDP. And then in 2011, the two GDP’s were the same:”\nIf things look close-by on a chart, it’s hard to constantly remember that actually, they are miles apart."
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes-alt-two-charts",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes-alt-two-charts",
    "title": "EDS 240",
    "section": "",
    "text": "Alternatives to dual y-axes: side-by-side charts\n\nSeparate your data series into side-by-side charts – this allows us to create two different axes for two different charts.\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes-alt-indexed",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes-alt-indexed",
    "title": "EDS 240",
    "section": "",
    "text": "Alternatives to dual y-axes: indexed charts\n\nIndexed charts show the relative change (percentage increase of decrease) of our data series over time. Consider adding labels or tooltips (e.g. using {plotly}) to include important absolute numbers.\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes-alt-prioritize",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes-alt-prioritize",
    "title": "EDS 240",
    "section": "",
    "text": "Alternatives to dual y-axes: prioritize & label\n\nConsider prioritizing and plotting the more important of the two data series. Then use annotations to add information about the omitted variable. This option may not work well for all data sets, but can be effective for dual-axis charts that present both absolute and relative numbers of the same measure.\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#dual-axes-alt-connected-scatter",
    "href": "slides/week4.3-good-viz-slides.html#dual-axes-alt-connected-scatter",
    "title": "EDS 240",
    "section": "",
    "text": "Alternatives to dual y-axes: connected scatterplot\n\nA connected scatterplot places one variable on the y-axis and the other on the x-axis (here, replacing time). Be mindful that these plots are generally less inutitive for a reader and may take more time to decipher patterns.\n\n\n\n\nExample from Why not to use two axes, and what to use instead, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#pie-charts1",
    "href": "slides/week4.3-good-viz-slides.html#pie-charts1",
    "title": "EDS 240",
    "section": "",
    "text": "The problem with pie charts . . .\n\n\n. . . is actually a problem with humans – we’re not so great at comparing angles. We’re bad at comparing angles within a single pie chart if they’re all similar:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples from Allison Horst, who adapted from From Data to Viz"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#pie-charts2",
    "href": "slides/week4.3-good-viz-slides.html#pie-charts2",
    "title": "EDS 240",
    "section": "",
    "text": "The problem with pie charts . . .\n\n\n. . . is actually a problem with humans – we’re not so great at comparing angles. We’re bad at comparing angles within a single pie chart if they’re all similar:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples from Allison Horst, who adapted from From Data to Viz"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#pie-charts3",
    "href": "slides/week4.3-good-viz-slides.html#pie-charts3",
    "title": "EDS 240",
    "section": "",
    "text": "The problem with pie charts . . .\n\n\n. . . is actually a problem with humans – we’re not so great at comparing angles. And we’re even worse at comparing angles across multiple pie charts:\n\n\n\nExamples from Allison Horst, who adapted from From Data to Viz"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#good-pie",
    "href": "slides/week4.3-good-viz-slides.html#good-pie",
    "title": "EDS 240",
    "section": "",
    "text": "Sometimes, pie charts can be a good option\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABC Enterprise Sales. Source: How to Use Charts and Graphs Effectively, by MindTools\n\n\nIF you decide a pie chart is the right option, consider:\n\n\nare the main takeaways clear (e.g. proportions different enough)?\navoiding lots of wedges\naggregating if there are many tiny ones\nemphasizing most important wedge\nlabeling directly on the chart\ncomparing to a bar chart version to see which is a better version\n\n\n\n\n\n\nExamples from Allison Horst, who adapted from From Data to Viz"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#treemap",
    "href": "slides/week4.3-good-viz-slides.html#treemap",
    "title": "EDS 240",
    "section": "",
    "text": "Pie chart alternative: treemap\n\n\nAs an alternative to a pie chart, consider treemaps. Treemaps display hierarchical data as a set of nested rectangles – simpler versions can be used to display parts of a whole using rectangles (which are easier for us to estimate than angles).\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: From Data to Viz\n\n\n\n\n\n\n\n\n\n\n\n\nSource: {treemapify} pkgdown site"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#3d-charts-occlusion",
    "href": "slides/week4.3-good-viz-slides.html#3d-charts-occlusion",
    "title": "EDS 240",
    "section": "",
    "text": "3D charts distort perspective\n\nOcclusion: When we see one object occlude (aka obstruct) another on a 2D surface, our brain perceives the object being hidden as farther away:\n\n\n\n\nSource: Data Visualization: Why 3D charts are a terrible idea"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#3d-charts-pers-dist",
    "href": "slides/week4.3-good-viz-slides.html#3d-charts-pers-dist",
    "title": "EDS 240",
    "section": "",
    "text": "3D charts distort perspective\n\nPerspective distortion: When we view objects in 3D, the objects farther away appear smaller, but our brain perceives them to be of larger size than in the picture:\n\n\n\n\nSource: Data Visualization: Why 3D charts are a terrible idea"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#gratuitous-3d",
    "href": "slides/week4.3-good-viz-slides.html#gratuitous-3d",
    "title": "EDS 240",
    "section": "",
    "text": "Avoid gratuitous 3D\n\nConsider how gray and blue areas visually compare in the 3D version? What about gray and orange? Now how do your interpretations change when inspecting the 2D version?\n\n\n\nThe pie chart on the right is an example of using 3D purely for decorative purposes. Here, the third dimension doesn’t actually convey any additional data. Claus Wilke calls this gratuitous 3D, and you should always avoid it.\n\nSource: Data Visualization: Why 3D charts are a terrible idea"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#3d-position-scales",
    "href": "slides/week4.3-good-viz-slides.html#3d-position-scales",
    "title": "EDS 240",
    "section": "",
    "text": "Avoid 3D position scales\n\nA plot with three genuine position scales (x, y, and z) to represent mtcars data (viewed from four different perspectives:\n\n\nSource: Fundamentals of Data Visualization, by Claus Wilke"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#3d-position-scales-alt1",
    "href": "slides/week4.3-good-viz-slides.html#3d-position-scales-alt1",
    "title": "EDS 240",
    "section": "",
    "text": "Alternative (a) to 3D position scales\n\nIf we primarily care about fuel efficiency as the response variable, plot it twice (once against displacement and once against power):\n\n\n\n\nSource: Fundamentals of Data Visualization, by Claus Wilke"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#3d-position-scales-alt2",
    "href": "slides/week4.3-good-viz-slides.html#3d-position-scales-alt2",
    "title": "EDS 240",
    "section": "",
    "text": "Alternative (b) to 3D position scales\n\nIf we are more interested in how displacement and power relate to each other, with fuel efficiency as a secondary variable of interest, create a bubble chart (plot power vs. displacement and map fuel efficiency onto the size of the dots). Be mindful that three variables (even in a 2D space) are still challenging for readers to quickly comprehend.\n\n\n\n\nSource: Fundamentals of Data Visualization, by Claus Wilke"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#examples",
    "href": "slides/week4.3-good-viz-slides.html#examples",
    "title": "EDS 240",
    "section": "",
    "text": "Let’s consider some example data visualizations together"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#co2-1",
    "href": "slides/week4.3-good-viz-slides.html#co2-1",
    "title": "EDS 240",
    "section": "",
    "text": "CO2 in conference rooms\n\n\n\n\n\n\n\n\n\n\n\n\n\nClearing the Air, by Christopher Ingraham, writing for The Washington Post\n\n\n \nTake some time to discuss the following:\n\nwhere are your eyes drawn first, second, etc.?\nwhat are the main messages / takeaways?\nwhere has the author chosen to simplify this visualization (i.e. reduce extraneous elements)? does it make it easier / more challenging to interpret?\nwhat would you change about this visualization?\n\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#co2-2",
    "href": "slides/week4.3-good-viz-slides.html#co2-2",
    "title": "EDS 240",
    "section": "",
    "text": "Annotations adapted from @chezVoila"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#penguins",
    "href": "slides/week4.3-good-viz-slides.html#penguins",
    "title": "EDS 240",
    "section": "",
    "text": "Palmer penguin classification\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerfectly Proportional Penguins, by Cara Thompson as part of TidyTuesday (code)\n\n\n \nTake some time to discuss the following:\n\nwhere are your eyes drawn first, second, etc.?\nwhat are the main messages / takeaways?\nwhere has the author chosen to simplify this visualization (i.e. reduce extraneous elements)? does it make it easier / more challenging to interpret?\nwhat would you change about this visualization?\n\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#glimmers",
    "href": "slides/week4.3-good-viz-slides.html#glimmers",
    "title": "EDS 240",
    "section": "",
    "text": "Glimmers of hope in large carnivore recovery\n\n\n\n\n\n\n\n\n\n\n\n\n\nFig. 3, by Ingeman et al. 2022: Glimmers of hope and critical cases. Distribution of large carnivore species across categories of current IUCN status (x-axis) and population trend (y-axis). Improvements in status are indicated by gold and declines by blue, with bubble size indicating the number of status category changes. The majority of species have not undergone any changes in status (shown in light gray). Note: No change in status may indicate lack of recent assessment, insufficient data, or, in the case of species designated Least Concern, effective conservation efforts.\n\n\n \nTake some time to discuss the following:\n\nwhere are your eyes drawn first, second, etc.?\nwhat are the main messages / takeaways?\nwhere has the author chosen to simplify this visualization (i.e. reduce extraneous elements)? does it make it easier / more challenging to interpret?\nwhat would you change about this visualization?\n\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#aquaculture",
    "href": "slides/week4.3-good-viz-slides.html#aquaculture",
    "title": "EDS 240",
    "section": "",
    "text": "Public perceptions of aquaculture\n\n\n\n \n\n\n\n\n\n\n\n\n\n\nFig. 3, by Froehlich et al. 2017: Newspaper ‘offshore aquaculture’ media sentiment. Sentiment over time based on the frequency of newspaper headlines with negative (red), positive (blue), and neutral (gray) titles for (A) developed (n = 102) and (B) developing (n = 8) nations. Also depicted are the (C) proportional contributions of sentiment headlines relative to each developed and developing country, with the number of headlines from each country shown in parentheses. All countries used in the analysis are depicted. Headlines were compiled using the LexisNexis® platform.\n\n\n \nTake some time to discuss the following:\n\nwhere are your eyes drawn first, second, etc.?\nwhat are the main messages / takeaways?\nwhere has the author chosen to simplify this visualization (i.e. reduce extraneous elements)? does it make it easier / more challenging to interpret?\nwhat would you change about this visualization?\n\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week4.3-good-viz-slides.html#end-break",
    "href": "slides/week4.3-good-viz-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "See you next week!\n\n\n~ This is the end of Lesson 3 (of 3) ~"
  },
  {
    "objectID": "slides/random-notes.html",
    "href": "slides/random-notes.html",
    "title": "random things to find a place for",
    "section": "",
    "text": "plot data directly\ne.g. plot income and expenses as separate lines or just plot a singe net income line? (latter) plot your data directly, if difference matters more, plot the difference! (need environmental example here)\n\nSOME TIPS\n\nbaselines\nbreaking up plots when data vary so much that presenting them all on a single chart renders it useless (e.g. use fracking data?)\nordering variables / categories – e.g. see trends across age groups by grouping bars by media (see pg 139) (NEED EDS EXAMPLE HERE)\n\n\nuse logical & meaningful baselines\n\nbar, lollipops, histograms, etc should always have a 0 baseline – cannot truncate when main visual cue is height/length measured from a common baseline\nscatterplot, line graph, ec. – can be okay to truncate axes since main visual cue is position, not height/length"
  },
  {
    "objectID": "slides/week5.1-colors-slides.html#title-slide",
    "href": "slides/week5.1-colors-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 4.4\nColors\n\nWeek 4 | January 29th, 2024"
  },
  {
    "objectID": "slides/week5.1-colors-slides.html#choosing-colors",
    "href": "slides/week5.1-colors-slides.html#choosing-colors",
    "title": "EDS 240",
    "section": "",
    "text": "tbd\n\n\npicking colors is hard! use them purposefully\n\nyour brand\npulling colors from a related image\ntake inspiration from other data viz/art\ngoogle “[whatever you like] palette”\n\n\n{monochromeR}\n\ncolors & common pitfalls\n\nwhat to consider when choosing colors for data visualization (datawrapper)\ngradients for cont data\nbe consistent with colors\ncolor gradients (consider binned colors)\nmisleading color palettes (rainbow color palette): https://eagereyes.org/blog/2013/rainbow-color-map\nthink about color palettes before you create your viz! use color blindness tools\n\nhttps://www.cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/ https://blog.datawrapper.de/colors/\n\nexample of bad color map (poverty): https://en.wikipedia.org/wiki/Poverty"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#title-slide",
    "href": "slides/week5.1-typography-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 4.4\nTypography\n\nWeek 4 | January 29th, 2024"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#typeography",
    "href": "slides/week5.1-typography-slides.html#typeography",
    "title": "EDS 240",
    "section": "",
    "text": "Type and font choice influences audience perception and readability"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#typography-defs",
    "href": "slides/week5.1-typography-slides.html#typography-defs",
    "title": "EDS 240",
    "section": "",
    "text": "Typeface vs. font\n\n\n\nTypeface (aka font family): underlying visual design (e.g. Times New Roman, Helvetica, Roboto)\n\n\n\n\n\n\n\n\n\n\nFont: an implementation of a typeface; they can come in different weights and styles (e.g. bold, italic)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou choose a typeface (e.g. Nunito)\n\nYou use a font (e.g. regular, italic, bold)"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#typography-importance",
    "href": "slides/week5.1-typography-slides.html#typography-importance",
    "title": "EDS 240",
    "section": "",
    "text": "Typeface choices affect emotions and perceptions\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n“Typography is the art and technique of arranging type to make written language legible, readable and appealing when displayed.”\n\n\n-Wikipedia\n\n\nLike colors, typefaces / fonts influence the how viewers perceive information (check out this short TEDx talk).\n\n Source: The Daily Egg\n\n\n\nWant to dive deeper into the world of typography? Start with this quick read, Why care about typography? and explore other great articles by Google Fonts."
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#font-psychology",
    "href": "slides/week5.1-typography-slides.html#font-psychology",
    "title": "EDS 240",
    "section": "",
    "text": "Context matters - choose typeface accordingly\n\nTypefaces and fonts communicate beyond more than just the written text – they can evoke emotions and can be used to better connect your audience with your work.\n\n\n\nSource: Typography for a better user experience, by Suvo Ray\n\n\n\nInterested in font pyschology? Check out this short video and this article to learn a bit more."
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#sans-serifs",
    "href": "slides/week5.1-typography-slides.html#sans-serifs",
    "title": "EDS 240",
    "section": "",
    "text": "When in doubt, use sans-serif fonts\n\nSerif fonts have small decorative lines (aka “tails” or “feet”) that extend off characters while sans serif fonts don’t.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSans-serif fonts = cleaner and easier to read.\n\nRoboto, Lato, Open Sans are good, free options\n\nSerif fonts = classy / traditional / professional / serious tone; typically only used for visualization headlines\n\nIf your organization uses a serif font, consider using it in your visualization’s headline\n\n\n\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#lining",
    "href": "slides/week5.1-typography-slides.html#lining",
    "title": "EDS 240",
    "section": "",
    "text": "Use a typeface with lining figures for numerals\n\nDifferent typefaces display numbers differently. Serif fonts tend to have “oldstyle figures”, which extend above and below the “line” – these can be difficult to read in a visualization.\nInstead, look for options with lining figures, where numbers “line up”, i.e. they’re all the same height.\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#monospaced",
    "href": "slides/week5.1-typography-slides.html#monospaced",
    "title": "EDS 240",
    "section": "",
    "text": "Use a monospaced typeface for numerals\n\n\nTypefaces with tabular figures print every character with equal width – you may see these referred to as monospaced typefaces. These work well in tables, visualizations, or any scenario where figures should line up vertically (see how you can quickly identify how many figures a number has in the table on the right, below).\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples from Which fonts to use for your charts and tables, by Lisa Charlotte Muth & Understanding numerals article by Google Fonts"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#symbols",
    "href": "slides/week5.1-typography-slides.html#symbols",
    "title": "EDS 240",
    "section": "",
    "text": "Use a typeface with all the symbols you need\n\n\nConfirm that all symbols (aka glyphs) that you need exist and that they look good for your chosen typeface.\n\n\n\nConsider special characters for different languages, currency symbols, math symbols, reference marks, sub / superscript numbers, etc.\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#bold",
    "href": "slides/week5.1-typography-slides.html#bold",
    "title": "EDS 240",
    "section": "",
    "text": "Use bold fonts for emphasis only\n\nMost typefaces come with fonts for different weights (Google Fonts uses numbers for font weights – extra light (200), light (300), regular (400, default), medium (500), semi bold (600), bold (700), extra bold (800)).\nUse bold text for titles or to emphasize a few words in annotations. Regular or medium weights are often easiest for longer text (descriptions, annotations, notes).\n\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#thin",
    "href": "slides/week5.1-typography-slides.html#thin",
    "title": "EDS 240",
    "section": "",
    "text": "Avoid really thin fonts\n\nThin (light-weight fonts) fonts are hard to read. Only use them in a high-contrast color and in large sizes (often, titles are the only place you’ll want to use think fonts.)\n\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#large-font-size",
    "href": "slides/week5.1-typography-slides.html#large-font-size",
    "title": "EDS 240",
    "section": "",
    "text": "Ensure your font size is large enough\n\nMake sure your font size is large enough, especially when presenting visualizations in a slide-based presentation (this oftentimes means increasing it larger than you would have it in print). In ggplot, adjust font sizes using theme().\n\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#contrast",
    "href": "slides/week5.1-typography-slides.html#contrast",
    "title": "EDS 240",
    "section": "",
    "text": "Use high-contrast color for most text\n\nWeb Content Accessibility Guidelines (WCAG) recommends a minimum contrast ratio of 4.5:1 – use a color contrast checker to check your ratio (e.g. here is a color combo with a good contrast ratio and a combo with a bad contrast ratio).\n\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#uppercase",
    "href": "slides/week5.1-typography-slides.html#uppercase",
    "title": "EDS 240",
    "section": "",
    "text": "Use UPPERCASE text sparingly\n\nUppercase text is more difficult to read compared to sentence case – limit use to headlines or labels. Region labels on maps are commonly uppercase (e.g. see maps in these New York Times pieces, How to Think About Ukraine, in Maps and Charts and Closing the Back Door to Europe).\n\n\n\nExample from Which fonts to use for your charts and tables, by Lisa Charlotte Muth"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#recap-font-choices",
    "href": "slides/week5.1-typography-slides.html#recap-font-choices",
    "title": "EDS 240",
    "section": "",
    "text": "Recap: choosing the right typeface(s) & font(s)\n\n\n\n\ncontext matters – the type(s) should fit the topic and audience\nwhen in doubt, use a sans-serif style\nchoose a monospaced typeface with lining figures for numbers\nensure that your chosen typeface has all the symbols you need and that they look okay\nuse bold fonts for emphasis and avoid thin fonts\nmake font sizes large enough to easily read\nuse high-contrast font colors\nstrategically use types & fonts to create hierarchy\navoid (extensively) using ALL CAPS\n\n\n\n\nAvoid using too many typefaces (stick to just 1-3)\n\n\n\n\nThere are lots of excellent resources out there for choosing the right typeface / font check out the resources page on the course website for some recommendations.\n\n\nHorror films, by Cristophe Nicault https://github.com/cnicault/tidytuesday/tree/master/2022/2022-44-horror-movies"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#typographic-hierarchy",
    "href": "slides/week5.1-typography-slides.html#typographic-hierarchy",
    "title": "EDS 240",
    "section": "",
    "text": "Typographic hierarchy\n\nNo one wants to read a wall of text. You can use font size, style, color, spacing, and typeface (or combinations of these) to create a hierarchy to guide your readers.\n\n\n\n\nSource: The UX Designer’s Guide to Typography"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#change-fonts",
    "href": "slides/week5.1-typography-slides.html#change-fonts",
    "title": "EDS 240",
    "section": "",
    "text": "Let’s learn how to import and use Google fonts in our ggplots"
  },
  {
    "objectID": "slides/week5.1-typography-slides.html#end",
    "href": "slides/week5.1-typography-slides.html#end",
    "title": "EDS 240",
    "section": "",
    "text": "See you next week!\n\n\n~ This is the end of Lesson 4 (of 4) ~"
  },
  {
    "objectID": "getting-unstuck.html",
    "href": "getting-unstuck.html",
    "title": "Getting unstuck",
    "section": "",
    "text": "A large part of being a data scientist is ~being okay~ with not immediately knowing the answers to your code challenges – troubleshooting errors, deciphering code, and trying new things (and likely failing at some…er many…of them) is all a part of the job. We all experience it, no matter how many years we’ve been at it."
  },
  {
    "objectID": "getting-unstuck.html#where-to-find-help",
    "href": "getting-unstuck.html#where-to-find-help",
    "title": "Getting unstuck",
    "section": "Where to find help",
    "text": "Where to find help\nWe often learn the most (and remember more of what we learned) when we take the time to troubleshoot on our own (or at least narrow down the potential problem(s)), so you should always plan to start there . The graphic below shows the order in which you should approach different resources for help:"
  },
  {
    "objectID": "getting-unstuck.html#roadblock-checklist",
    "href": "getting-unstuck.html#roadblock-checklist",
    "title": "Getting unstuck",
    "section": "Roadblock checklist",
    "text": "Roadblock checklist\nIf you hit a roadblock, run through this checklist to make sure you’ve done your due diligence before bringing your question(s) to a peer, TA, or instructor:\n\nrevisit the course materials – your question may already be answered in the slides\nread the documentation – you can do so directly from RStudio by typing ?function_name in the console\nsearch for and read the package’s, vignette if available – these are often linked on CRAN under the Documents section (e.g. see {dplyr} on CRAN) or found by Googling package_name vignette (e.g. the result of Googling dplyr vignette leads to the dplyr vignette)\ntry Googling! – don’t forget to a look back some of our suggested troubleshooting and Googling tips in Teach Me How to Google:"
  },
  {
    "objectID": "getting-unstuck.html#how-to-ask-questions",
    "href": "getting-unstuck.html#how-to-ask-questions",
    "title": "Getting unstuck",
    "section": "How to ask questions",
    "text": "How to ask questions\nWhen you decide you’re going to ask a question to a peer / TA / instructor, be sure to (borrowed from Dr. Allison Horst’s Troubleshooting 101 lecture, EDS 221):\n\nProvide context. For example, “I’m trying to do this…” or “I’m working on the task where we do this…”\nShare the specific challenge. “I’m specifically trying to [insert function / package] to do this thing.”\nShare what happens and what you’ve learned. “I repeatedly get an error message that says [this]. I’ve tried [this] and [this]”\nShow your code ideally with a reprex that they can run / test.\nValue and expect the Socratic method, especially in classes and workshops – our goal is to provide critical thinking that is transferable, not just to provide a quick fix for a single error."
  },
  {
    "objectID": "getting-unstuck.html#some-words-of-wisdom",
    "href": "getting-unstuck.html#some-words-of-wisdom",
    "title": "Getting unstuck",
    "section": "Some words of wisdom",
    "text": "Some words of wisdom\nFinally, Julia Evans shares some funny (and highly relatable) words of wisdom:"
  },
  {
    "objectID": "assignments/SR3-endcourse.html",
    "href": "assignments/SR3-endcourse.html",
    "title": "End-of-course reflection (SR #3)",
    "section": "",
    "text": "In this assignment, you’ll reflect on your learning throughout this class. Revisit your self-evaluations from the start and middle of the quarter, and answer the following questions:\n\nSince your mid-quarter self-evaluation, have you improved any of your existing skills? Have you learned new ones?\nHave you accomplished your learning goals for this quarter (that you set at the beginning of the quarter)? If you did, how did you do it?\nWhat are you proudest of accomplishing in this course?\nWhat are some transferable skills that you developed in this course? How might you apply them to other courses / deliverables within the MEDS program or jobs in the future?\nWhat is one thing that you really liked about this course, and why? What is one thing you think could be improved about this course, and how?\nIs there anything else you’d like the instructors to know about your experience in the course?"
  },
  {
    "objectID": "assignments/SR3-endcourse.html#description",
    "href": "assignments/SR3-endcourse.html#description",
    "title": "End-of-course reflection (SR #3)",
    "section": "",
    "text": "In this assignment, you’ll reflect on your learning throughout this class. Revisit your self-evaluations from the start and middle of the quarter, and answer the following questions:\n\nSince your mid-quarter self-evaluation, have you improved any of your existing skills? Have you learned new ones?\nHave you accomplished your learning goals for this quarter (that you set at the beginning of the quarter)? If you did, how did you do it?\nWhat are you proudest of accomplishing in this course?\nWhat are some transferable skills that you developed in this course? How might you apply them to other courses / deliverables within the MEDS program or jobs in the future?\nWhat is one thing that you really liked about this course, and why? What is one thing you think could be improved about this course, and how?\nIs there anything else you’d like the instructors to know about your experience in the course?"
  },
  {
    "objectID": "assignments/SR3-endcourse.html#rubric-specifications",
    "href": "assignments/SR3-endcourse.html#rubric-specifications",
    "title": "End-of-course reflection (SR #3)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for this End-of-course reflection:\nComplete the following steps in your GitHub Classroom repo (eds240-SR3/SR3-endcourse-reflection.qmd):\n\ninclude your preferred name, and if you feel comfortable, your preferred pronouns in the title of the SR3-endcourse-reflection.qmd YAML\nbe ~300-400 words\naddress the 6 topics above (but please feel free to expand on these if you would like)\npush SR3-endcourse-reflection.qmd to GitHub using GitHub Classrooms by 11:59pm PT on Sat 03/16/2024\n\nAdditionally, please complete the ESCI evaluations associated with this course (EDS 240) for both the instructor (Sam Csik) and TA (tbd) by the deadline (Friday, 03/15/2024)."
  },
  {
    "objectID": "assignments/HW3.html#rubric-specifications",
    "href": "assignments/HW3.html#rubric-specifications",
    "title": "Assignment #3 (HW #3)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for Assignment #3:"
  },
  {
    "objectID": "assignments/HW1.html",
    "href": "assignments/HW1.html",
    "title": "Assignment #1 (HW #1)",
    "section": "",
    "text": "You must earn a “Satisfactory” mark for each individual Part (I and II) to earn a “Satisfactory” mark for Assignment #1.\nNOTE: Assignments are to be submitted via GitHub Classrooms, unless otherwise noted. Each student receives one “free pass” for not submitting assignments via specified channels, after which you will receive a “Not Yet” mark.\nRead each part of the assignment carefully, and use the check boxes to ensure you’ve addressed all elements of the assignment!"
  },
  {
    "objectID": "assignments/HW1.html#learning-outcomes",
    "href": "assignments/HW1.html#learning-outcomes",
    "title": "Assignment #1 (HW #1)",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nread code written by others\nassess, critique, and provide constructive feedback on data visualizations"
  },
  {
    "objectID": "assignments/HW1.html#description",
    "href": "assignments/HW1.html#description",
    "title": "Assignment #1 (HW #1)",
    "section": "Description",
    "text": "Description\nMuch of your time as a data scientist will be spent looking at code written by others – maybe you’re trying to learn from and adapt someone else’s code for your own work, or perhaps you’ve been asked to conduct a code review for a colleague. Being able to look at and make sense of code that you did not write yourself is an invaluable skill and an important one to practice throughout your learning journey. Here, you’ll be asked to interpret and annotate {ggplot2} code written by someone else. This will likely require running code (both as a whole and line-by-line), as well as Googling and / or reading documentation.\nI recognize that there is (likely) a lot of new code presented here, and that we haven’t covered much at all yet in this course. This is intentionally an exercise is resourcefulness! By the end of this exercise, you should feel a bit more confident in your ability to interpret (and maybe even reuse!) code written by others.\n(Part 1a) Annotate the following code, adapted from Christophe Nicault’s visualization titled, Evolution of deaths from indoor air pollution (original code) – to enlarge image (in Chrome) right-click on image &gt; Open Image in New Tab:\n\n\n\n\n\n\n\n\n\nYou can find metadata and additional information about the data set on the rfordatascience/tidytuesday (2022-04-12) readme.md. Note: A select few lines of code have already been annotated for you.\n\n\n\n\n\n\nClick here to expand the code AND for tips on getting started\n\n\n\n\n\nInstall the following packages (if you don’t already have them) using install.packages(\"package_name\") or install.packages(pkgs = c(\"package_name1\", \"package_name2\", ...)):\n\n{tidytuesdayR}\n{tidyverse}\n{patchwork}\n{showtext}\n{sysfonts}\n{countrycode}\n{glue}\n{scales}\n{ragg}\n\nTips:\n\nSee lines 114 and 120 (among others) for examples of code annotations – aim to include this level of detail.\nWriting clean annotations makes it easier for you and others to read them – I love using the {ARTofR} package to create titles, dividers, and block comments in my scripts and Qmd / Rmd files. Read more about how to create different dividers using the {ARTofR} package on this resource page of the course website.\nPull up documentation for a function directly in RStudio’s Help pane by running ?function_name in the console. Vignettes and pkgdown sites are incredible resources as well (e.g. here is a vignette and the pkgdown site for the {patchwork} package)\nIf you don’t immediately understand the purpose of a line / chunk of code, skip over it (temporarily) and continue working your way through the following code – it oftentimes becomes more evident given additional context.\nPlots may look super squished in the RStudio Viewer pane – use the Zoom button to pop them open in a separate window.\nKeep in mind: While this is fairly complex ggplot code, remember that it’s constructed in layers – meaning you can run code line-by-line to see exactly how the plot is changing with each new layer. You may come across functions and arguments that you’re already familiar with (yay!), and of course, others that are totally new.\n\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                  1. setup                                ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(tidyverse) # ANNOTATE (brief explanation of pkg) ----\nlibrary(patchwork) # ANNOTATE (brief explanation of pkg) ----\nlibrary(showtext) # ANNOTATE (brief explanation of pkg) ----\n\n#......................download Google Fonts.....................\n# ANNOTATE (explain differences between arguments `name` & `family`) ----\nfont_add_google(name = \"Roboto\", family = \"roboto\")\nfont_add_google(name = \"Roboto Condensed\", family = \"roboto condensed\")\nfont_add_google(name = \"Oswald\", family = \"oswald\")\nfont_add_google(name = \"Khula\", family = \"khula\")\nfont_add_google(name = \"Share Tech Mono\", family = \"techmono\")\n\n#.....settings for using imported texts in future saved plot.....\nshowtext_opts(dpi = 320) # tell {showtext} the resolution for the device ----\nshowtext_auto(enable = TRUE) # automatically use {showtext} to render text for future devices ----\n\n#................load TidyTuesday data from GitHub...............\ntuesdata &lt;- tidytuesdayR::tt_load(x = 2022, week = 15)\n\n#........extract individual data sets from tuesdata (list).......\nindoor_pollution &lt;- tuesdata$indoor_pollution \ndeath_ts &lt;- tuesdata$death_timeseries\ndeath_full &lt;- tuesdata$death_fuel\nfuel_gdp &lt;- tuesdata$fuel_gdp\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                              2. data wrangling                           ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#......ANNOTATE (generally, what does this code block do?).......\nindoor_pollution &lt;- indoor_pollution %&gt;%\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  rename(perc_death = 4) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  mutate(continent = countrycode::countrycode(sourcevar = Code, origin = \"iso3c\", destination = \"continent\")) \n\n#......ANNOTATE (generally, what does this code block do?).......\ngap_indoor &lt;- indoor_pollution %&gt;%\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  filter(!is.na(Code), Code != \"OWID_WRL\") %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  filter(Year %in% c(1990, 2019)) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  mutate(year = glue::glue(\"Y{Year}\")) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  pivot_wider(id_cols = c(\"Entity\", \"Code\"), names_from = year, values_from = perc_death) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  mutate(gap = Y2019 - Y1990) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  mutate(continent = countrycode::countrycode(sourcevar = Code, origin = \"iso3c\", destination = \"continent\")) \n\n#......ANNOTATE (generally, what does this code block do?).......\nfuel_gdp_clean &lt;- fuel_gdp %&gt;%\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  rename(clean_fuel = 4, gdp = 5, population = 6) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  select(-Continent) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  mutate(continent = countrycode::countrycode(sourcevar = Code, origin = \"iso3c\", destination = \"continent\")) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  filter(!is.na(continent)) \n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                          3. prep ggplot elements                         ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#......ANNOTATE (generally, what does this code block do?).......\npal &lt;- c(\"#02403A\", \"#0A7373\", \"#757A62\", \"#EDAA25\", \"#C43302\")\n\n#......ANNOTATE (generally, what does this code block do?).......\ngraph_legend &lt;- \"The first graph shows the relation between the decrease of the percentage of deaths and the access to clean fuel.\\nEach country is represented by a line connecting all the values from 2002 to 2019.\\nIt shows that for many countries the access to clean fuel for cooking increased over\\n the years resulting in a reduction of percentage of death due to indoor air pollution.\\n\\nThe graph below shows the evolution between 1990 and 2019\\n in the distribution of the percentage of death among\\n the countries of each continent.\"\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                       4. build connected scatterplot                     ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#......ANNOTATE (generally, what does this code block do?).......\nconnected_scatterplot_df &lt;- indoor_pollution %&gt;%\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  select(-continent) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  left_join(fuel_gdp_clean, by = c(\"Entity\" = \"Entity\", \"Code\" = \"Code\", \"Year\" = \"Year\")) %&gt;% \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  filter(!is.na(clean_fuel), !is.na(gdp)) \n\n#..................create connected scatterplot..................\n\n#......ANNOTATE (generally, what does this code block do?).......\nconnected_scatterplot &lt;- ggplot(data = connected_scatterplot_df, aes(x = clean_fuel, y = perc_death, alpha = Year)) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  geom_line(aes(group = Code, color = continent), linewidth = 0.9) + \n  \n  # add scatterplot layer; points colored by 'continent' variable, outlined in white ----\n  geom_point(aes(fill = continent), size = 1, shape = 21, color = \"white\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  annotate(\"text\", x = 96, y = 21, label = graph_legend, family = \"roboto\", size = 4, hjust = 1, vjust = 1) + \n  \n  # convert x-axis & y-axis values to %; add some padding between data and axes ----\n  scale_x_continuous(labels = scales::label_percent(scale = 1), expand = c(0.01, 0.01)) + \n  scale_y_continuous(labels = scales::label_percent(scale = 1, accuracy = 1), expand = c(0.01, 0.01)) + \n  \n  # ANNOTATE (briefly explain these lines of code) ----\n  scale_color_manual(values = rev(pal)) + \n  scale_fill_manual(values = rev(pal)) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  guides(alpha = \"none\", color = \"none\", fill = \"none\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  theme_light(base_family = \"roboto condensed\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  labs(x = \"% of access to clean fuel\", \n       y = \"% of deaths\") + \n  \n  # ANNOTATE (briefly explain these lines of code) ----\n  theme(axis.title.y = element_text(margin = margin(t = -20, r = -80, b = 0, l= 0), angle = 0, size = 12), \n        axis.title.x = element_text(margin = margin(t = 10), size = 12), \n        \n        # ANNOTATE (briefly explain this line of code) ----\n        axis.text = element_text(size = 11), \n        \n        # ANNOTATE (briefly explain this line of code) ----\n        panel.border = element_blank())\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                            5. build histograms                           ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#.............df of % ranges used to build histogram.............\nhisto_evolution_df &lt;- gap_indoor %&gt;%\n  \n  # assign % death to a range (e.g. AFG (Y1990): 19.623 -&gt; range of 15-20), as factors ----\n  mutate(c1990 = cut(Y1990, breaks = c(0,1,2,5,10,15,20,25)), \n         c2019 = cut(Y2019, breaks = c(0,1,2,5,10,15,20,25))) %&gt;% \n  \n  # use regular expressions (regex) to separate the lower and upper range values ----\n  mutate(sep1990 = str_match(c1990, \"^\\\\(([0-9]+),([0-9]+)]$\"), \n         sep2019 = str_match(c2019, \"^\\\\(([0-9]+),([0-9]+)]$\")) %&gt;%\n  \n  # use regex to create nicely-formatted percentage ranges ----\n  mutate(c1990 = glue::glue(\"{sep1990[,2]}% to {sep1990[,3]}%\"), \n         c2019 = glue::glue(\"{sep2019[,2]}% to {sep2019[,3]}%\")) %&gt;% \n  \n  # reorder factors in the c1990 & c2019 cols by values in the `sep1990[,2]` & `sep2019[,2]` columns ----\n  mutate(c1990 = fct_reorder(c1990, parse_number(sep1990[,2])), \n         c2019 = fct_reorder(c2019, parse_number(sep2019[,2]))) %&gt;%\n  \n  # reverse the order of factors (low &gt; high) in c1990 & c2019 cols ----\n  mutate(c2019 = fct_rev(c2019),\n         c1990 = fct_rev(c1990)) \n\n#......ANNOTATE (generally, what does this code block do?).......\n# ANNOTATE (briefly explain this line of code) ----\nhisto_evolution &lt;- ggplot(data = histo_evolution_df) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  geom_histogram(aes(x = c1990), stat = \"count\", alpha = 0) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  annotate(\"rect\", xmin = 4.5 ,xmax = 7.6, ymin = 0, ymax = 36, fill = \"#e1e1e1\", alpha = 0.5) +\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  annotate(\"text\", x = 5, y = 25, label = \"0% to 5%\", color = \"grey60\", family = \"Oswald\", size = 5, fontface = \"bold\") +\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  geom_histogram(aes(x = c1990, fill = continent), stat = \"count\", alpha = 0.3) +\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  geom_histogram(aes(x = c2019, fill = continent), stat = \"count\", width = 0.5) +\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  scale_fill_manual(values = rev(pal)) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  coord_flip() + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  facet_wrap(~continent, ncol = 5) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  guides(fill = \"none\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  labs(caption = \"Number of country for each range of percentage of death from indoor air pollution.\\nThe light bars represent the distribution in 1990 and the dark and narrow bars represent the distribution in 2019.\\nThe bin from 0% to 5% is splitted in 3 differents bins (0% to 1%, 1% to 2% and 2% to 3%) to give more detail for the countries\\n which reached a low level of death, while the other bins represent 5% range.\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  theme_void() + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  theme(axis.text.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), family = \"roboto condensed\", color = \"grey30\", size = 12), \n        \n        # ANNOTATE (briefly explain this line of code) ----\n        axis.text.y = element_text(family = \"roboto condensed\", color = \"grey30\", size = 12),\n        \n        # ANNOTATE (briefly explain this line of code) ----\n        panel.grid.major.x = element_line(color = \"grey60\", linetype = \"13\"), \n        \n        # ANNOTATE (briefly explain this line of code) ----\n        panel.spacing.x = unit(8, \"mm\"), \n        \n        # ANNOTATE (briefly explain this line of code) ----\n        strip.text = element_blank(), \n        \n        # ANNOTATE (briefly explain this line of code) ----\n        plot.caption = element_text(family = \"roboto\", size = 12, color = \"black\", hjust = 0, margin = margin(t = 25, l = 40), lineheight = 1.1)) \n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                              6. build legends                            ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#......ANNOTATE (generally, what does this code block do?).......\nlegend_df &lt;- tibble(pos = c(0, 2, 4, 6, 8),\n                    country = sort(unique(fuel_gdp_clean$continent)))\n\n#......ANNOTATE (generally, what does this code block do?).......\n# ANNOTATE (briefly explain this line of code) ----\nlegend &lt;- ggplot(data = legend_df) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  geom_rect(aes(xmin = pos, xmax = pos + 1, \n                ymin = 0.35, ymax = 0.75, fill = country), size = 6) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  geom_text(aes(x = pos + 0.5, y = 0.45, label = country), \n            family = \"oswald\", color = \"white\", size = 6, \n            hjust = 0.5, vjust = 0, fontface = \"bold\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  scale_fill_manual(values = rev(pal)) +\n  \n  # ANNOTATE (briefly explain this line of code) ----\n  scale_y_continuous(limits = c(0,1)) + \n  scale_x_continuous(limits = c(0,9)) + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  guides(color = \"none\", fill = \"none\") + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  theme_void() \n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##              7. assemble all plot components using {patchwork}           ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n## NOTE: this plot may not look correct when opened in the Viewer! You'll need to save a PNG (in part 8, below) to view it correctly ##\n\n# ANNOTATE (briefly explain this line of code) ----\nfinal_plot &lt;- connected_scatterplot / legend / histo_evolution + \n  \n  # ANNOTATE (briefly explain this line of code) ----\n  plot_layout(heights = c(3, 0.5, 1)) + \n  \n  ## ANNOTATE (briefly explain these lines of code) ----\n  plot_annotation( \n  caption = \"Visualization: Christophe Nicault | Data: Our world in Data\",\n  title = \"Evolution of deaths from indoor air pollution\",\n  subtitle = str_wrap(\"The percentage of death from indoor air pollution decreased in many countries in the last 30 years, due to a better access to clean fuel for cooking. However there are inequalities with many countries still lacking access, particularly in Africa, Oceania and Asia.\", 100),\n  \n  # ANNOTATE (briefly explain these lines of code) ----\n  theme = theme( \n    plot.margin = margin(10,10,5,10),\n    plot.title = element_text(family = \"khula\", size = 22, color = \"#02403A\", face = \"bold\", hjust = 0.5, margin = margin(5,0,10,0)),\n    plot.subtitle = element_text(family = \"khula\", size = 14, color = \"black\", hjust = 0.5, margin = margin(10,0,20,0)),\n    plot.caption = element_text(family = \"techmono\", size = 11, color = \"#02403A\", hjust = 0.95, margin = margin(20,0,5,0))   \n  )\n)\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                            8. save plot as a PNG                         ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#........open plotting device to draw plot to a PNG file.........\n# specify file path/name and png resolution & size\nragg::agg_png(here::here(\"outputs\", paste0(\"indoor_pollution_\", format(Sys.time(), \"%Y%m%d_%H%M%S\"), \".png\")), \n              res = 320, width = 12, height = 13, units = \"in\")\n\n#................plot object that you want to draw...............\nfinal_plot\n\n#....................turn off plotting device....................\n# once off, you should see your .png file appear in outputs/ folder\ndev.off()\n\n\n\n\n(Part 1b) Once complete, answer the following questions:\n\n1. Describe two elements of this plot that you find visually-pleasing / easy to understand / intuitive. Why? (4-10 sentences)\n2. Describe two elements of this plot that you feel could be better presented in a different way. Why? (4-10 sentences)\n3. Describe two new things that you learned by interpreting / annotating this code. These could be packages, functions, or even code organizational approaches that you hadn’t previously known about or considered. (4-10 sentences)"
  },
  {
    "objectID": "assignments/HW1.html#rubric-specifications",
    "href": "assignments/HW1.html#rubric-specifications",
    "title": "Assignment #1 (HW #1)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for Assignment #1, Part I:\nComplete the following steps in your GitHub Classroom repo (eds240-hw1-USERNAME/Part1.qmd):\n\ninclude your preferred name, and if you feel comfortable, your preferred pronouns in the author field of the Part1.qmd YAML\nupdate each comment line in the code that reads, ANNOTATE, with a brief description, written in your own words (see lines 114 & 120 for example annotations; there are other lines that have been already annotated for you as well – you do not need to re-write these annotations – you are allowed up to five incorrect or missing annotations\nleave the code chunk options set to eval: false and echo: true\nanswer all three Part 1b questions adhering to the length requirements specified at the end of each question prompt\nwe (your instructors) should be able to successfully render Part1.qmd locally without errors, however do not push any html files to GitHub (i.e. Part1.html and Part1_files/; consider adding these to your .gitignore so that you don’t accidentally push them)\npush your completed Part1.qmd to GitHub via GitHub Classrooms by 11:59pm PT on Sat 01/20/2024\n\n\n\n End Part I"
  },
  {
    "objectID": "assignments/HW1.html#learning-outcomes-1",
    "href": "assignments/HW1.html#learning-outcomes-1",
    "title": "Assignment #1 (HW #1)",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nNote: This part of HW #1 is the first step in working towards your final course assignment (we’ll be breaking it down a bit, week-by-week). Your final assignment is meant to combine nearly all of the course learning outcomes(!):\n\nidentify which types of visualizations are most appropriate for your data and your audience\nprepare (e.g. clean, explore, wrangle) data so that it’s appropriately formatted for building data visualizations\nbuild effective, responsible, accessible, and aesthetically-pleasing visualizations using the R programming language, and specifically {ggplot2} + ggplot2 extension packages\nwrite code from scratch and read and adapt code written by others\napply a DEI (Diversity, Equity & Inclusion) lens to the process of designing data visualizations\n\nThis week, we’ll mostly be focused on some prep work. Read the description, below, for details."
  },
  {
    "objectID": "assignments/HW1.html#description-1",
    "href": "assignments/HW1.html#description-1",
    "title": "Assignment #1 (HW #1)",
    "section": "Description",
    "text": "Description\nA small part of each homework assignment will be dedicated to working on a series of data visualizations which will be due as part of Assignment #4 at the end of the quarter. Assignment #4 will ask you to build three related, but different data visualizations – all which will use the same data set(s), but present those data differently for three different audiences / purposes:\n\na visualization for a general audience (i.e. without domain expertise) – this data visualization may be designed to prompt conversation, clearly display findings (without the use of jargon), display findings in an atypical but creative way, and / or may blend both art and science\na visualization to be included in a paper, technical documentation, or report – this visualization should tell a story, but can include much more detail, more data, more domain-specific language, etc.\na visualization that you could include in a presentation – you might imagine an audience with familiarity with your domain, but they only have a brief amount of time to process the information being presented; key takeaways should be clearly highlighted, and you may have multiple versions, each with an added layer (as if you’re animating pieces of your visualization onto a slide)\n\nThis week, you’ll focus on finding data that interest you and begin brainstorming some questions that you might explore / answer using those data.\nYour data set(s) may be related to a past project, or even your current Capstone or GP. It may also be a completely new data set(s), unrelated to anything you’re currently working on. Some places to check out if you’re looking for data (you are not limited to just these data sources):\n\nData is Plural – is a weekly newsletter (and seasonal podcast) of useful / curious data sets, published by Jeremy Singer-Vine\nawesome-public-datasets – a repository containing a list of topic-centric public data sources in high quality. They are collected and tidied from blogs, answers, and user responses\nDataOne – a repository of data repositories! Search across all member repositories (including repositories like EDI Data Portal, Arctic Data Center, KNB, etc.) for environmental data (along with curated metadata records)\nKaggle Datasets - Kaggle is an online community for data scientists and machine learning practitioners to find and publish data, as well as enter competitions to solve data science challenges\n\n\n\nOnce you’ve found your data set(s), answer the following questions:\n\n1. Describe your data set(s). Be sure to address the following (&lt;=4 sentences)\n\n1a. Where did you find these data?\n1b. What variables do these data contain? Is there sufficient metadata for understanding what those variables are?\n\n2. What steps are involved in downloading or accessing the data (e.g. “I can download using a button via this online portal,” “There’s an R package for scraping the data,” “I need to use an API to scrape the data,” etc.)? (1-2 sentences)\n3. What question(s) do you want to answer using these data (it’s okay if these questions evolve over time, this is just a starting point)? (&lt;=4 sentences)\n4. Will you need to combine multiple data sets to successfully answer your question(s)? If so, have you found all the necessary data? Do you have a way to combine it (e.g. matching key values across all data sets)? (&lt;=4 sentences)\nOptional: Import your data into R! (this will be a part of the next homework assignment) IMPORTANT: If your data files are large (&gt;2GB) DO NOT push your data to GitHub – instead, add your data file(s) or entire data folder to your .gitignore (you’ll practice this in Discussion section this week)."
  },
  {
    "objectID": "assignments/HW1.html#rubric-specifications-1",
    "href": "assignments/HW1.html#rubric-specifications-1",
    "title": "Assignment #1 (HW #1)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for Assignment #1, Part II:\nComplete the following step under your own personal GitHub profile, not in GitHub Classrooms:\n\ncreate a GitHub repository named lastName-eds240-HW4, which is where you’ll be doing any / all work related to Assignment #4. Be sure to make your repository public, initialize your repository with a README, and add a .gitignore file.\nadd Sam and Sevan as collaborators on your repo (on GitHub: Settings &gt; Collaborators &gt; Add people; our user names are samanthacsik and SevanEsaian)\nadd your repository’s URL next to your name on this Google Sheet\n\nComplete the following steps in your GitHub Classroom repo (eds240-hw1-USERNAME/Part2.qmd):\n\nlink to (or otherwise prove the existence of) at least one data set that you plan to use for Assignment #4\nanswer all parts of the four concluding questions, adhering to the length requirements specified at the end of each question prompt; you do not need to complete the optional importing of data – if you do want to practice importing your data, be sure to do so in your lastName-eds240-HW4 repository\nwe (your instructors) should be able to successfully render Part2.qmd locally without errors, however do not push any html files to GitHub (i.e. Part2.html and Part2_files/; consider adding these to your .gitignore so that you don’t accidentally push them) – only push Part2.qmd\npush your completed Part2.qmd to GitHub via GitHub Classrooms by 11:59pm PT on Sat 01/20/2024\n\n\n\n End Part II"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Earning “Satisfactory” marks on Self-reflections (SRs) and Homework Assignments (HWs) will determine your letter grade (e.g. A, B, etc.) for this course.\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nSR\nPre-course reflection (SR #1)\nMon 01/08/2024\nSat 01/13/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #1\nMon 01/08/2024\nSat 01/20/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #2\nMon 01/22/2024\nSat 02/03/2024, 11:59pm PT\n\n\nSR\nMid-course reflection (SR #2)\nMon 02/05/2024\nSat 02/10/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #3\nMon 02/12/2024\nSat 02/24/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #4\nMon 02/26/2024\nSat 03/09/2024, 11:59pm PT\n\n\nSR\nEnd-of-course reflection (SR #3)\nMon 03/11/2024\nSat 03/16/2024, 11:59pm PT"
  },
  {
    "objectID": "assignments.html#assignments",
    "href": "assignments.html#assignments",
    "title": "Assignments",
    "section": "",
    "text": "Earning “Satisfactory” marks on Self-reflections (SRs) and Homework Assignments (HWs) will determine your letter grade (e.g. A, B, etc.) for this course.\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nSR\nPre-course reflection (SR #1)\nMon 01/08/2024\nSat 01/13/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #1\nMon 01/08/2024\nSat 01/20/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #2\nMon 01/22/2024\nSat 02/03/2024, 11:59pm PT\n\n\nSR\nMid-course reflection (SR #2)\nMon 02/05/2024\nSat 02/10/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #3\nMon 02/12/2024\nSat 02/24/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #4\nMon 02/26/2024\nSat 03/09/2024, 11:59pm PT\n\n\nSR\nEnd-of-course reflection (SR #3)\nMon 03/11/2024\nSat 03/16/2024, 11:59pm PT"
  },
  {
    "objectID": "assignments.html#end-of-class-surveys",
    "href": "assignments.html#end-of-class-surveys",
    "title": "Assignments",
    "section": "End-of-class surveys",
    "text": "End-of-class surveys\nEnd-of-class surveys (EOCs) will become available at the end of each class (Mondays) and are due by end-of-day (11:55pm PT). Completing EOCs by the due dates/times will, in-part (along with class attendance), determine whether you earn a +/- on your course grade.\n\n\n\nEOC link\nDate Assigned\nDate Due\n\n\n\n\nEOC (week 1)\nMon 01/08/2024\nMon 01/08/2024, 11:55pm PT\n\n\nNo lecture or EOC (week 2)\nNA\nNA\n\n\nEOC (week 3)\nMon 01/22/2024\nMon 01/22/2024, 11:55pm PT\n\n\nEOC (week 4)\nMon 01/29/2024\nMon 01/29/2024, 11:55pm PT\n\n\nEOC (week 5)\nMon 02/05/2024\nMon 02/05/2024, 11:55pm PT\n\n\nEOC (week 6)\nMon 02/12/2024\nMon 02/12/2024, 11:55pm PT\n\n\nNo lecture or EOC (week 7)\nNA\nNA\n\n\nEOC (week 8)\nMon 02/26/2024\nMon 02/26/2024, 11:55pm PT\n\n\nEOC (week 9)\nMon 03/04/2024\nMon 03/04/2024, 11:55pm PT\n\n\nEOC (week 10)\nMon 03/11/2024\nMon 03/11/2024, 11:55pm PT"
  },
  {
    "objectID": "assignments.html#grade-tracker",
    "href": "assignments.html#grade-tracker",
    "title": "Assignments",
    "section": "Grade Tracker",
    "text": "Grade Tracker\nUse the Grade Tracker, below, to determine your course grade:\n\n\n\n\n\n\n\n\n\nRedeem tokens in exchange for assignment extensions, missing class, or to revise/resubmit an assignment that received a “Not Yet” mark."
  },
  {
    "objectID": "assignments/SR1-precourse.html",
    "href": "assignments/SR1-precourse.html",
    "title": "Pre-course reflection (SR #1)",
    "section": "",
    "text": "In this assignment, you’ll introduce yourself, come up with a plan for what you’d like to get out of the class, and roughly outline how you’ll accomplish your goals throughout the quarter. You’ll continue visiting the goals you set for yourself in this assignment throughout the quarter, so it’s worthwhile to be reflective!\nBecause everyone is participating under unique circumstances, I want to learn about your learning contexts. I can best support you in this class if you address the following:\n\nSome questions about school and life:\n\nWhere are you coming from (e.g. “I recently finished my undergraduate degree”, “I’ve been working in industry X for Y years”) (1-2 sentences)\nWhat do you hope to get out of this class? (3-4 sentences)\nIf you have a particular career goal in mind, how does this course apply to your future career, if at all? (1-3 sentences)\nWhat do you wish your instructors knew about you, but don’t? (2-4 sentences)\n\nSome questions about the way you like to learn:\n\nWhat kinds of assignments, skills, or behaviors have you felt most comfortable with / enjoy from past classes? Why do you enjoy them? (4-5 sentences)\nHow confident do you feel in your data visualization skills? Why? (3-4 sentences)\nHow confident do you feel in your coding skills (primarily R, but feel free to elaborate on any of the languages you’ve used)? Why? (3-4 sentences)\nWhat have you struggled with in the past in other graduate-level courses? Why? (3-4 sentences)\nOf the courses you’re taking this quarter, which do you expect to be the most challenging? Most demanding? (1-2 sentences)\nWhat responsibilities do you have outside of school, and how do you want to balance them? (3-4 sentences)\nWhich learning goals from the syllabus are you most excited about? (3-4 sentences)\nMost importantly, how do you plan on accomplishing your learning goals for this course? Note: be specific here! Instead of writing, “I will complete homework assignments” or “I will study”, you can make these more specific strategies: “I will create a schedule to map out assignments“ (elaborate on this), “I will use the homework assignments as opportunities to practice X,” I will communicate with classmates to ask for help after trying X,” “I will participate in online learning communities, such as TidyTuesday…” etc. (5-8 sentences)\n\nSome fun questions:\n\nWhat activity(ies) (outside of school / work) brings you the most joy? How do you plan to incorporate that activity into your schedule this quarter (if at all)? If you are unable to do so, is there something else you can plan to do that will bring you similar joy? (3-5 sentences)\nWhat is a piece of media you enjoyed recently? (e.g. music, book, movie, tweet, meme) (2-4 sentences)"
  },
  {
    "objectID": "assignments/SR1-precourse.html#description",
    "href": "assignments/SR1-precourse.html#description",
    "title": "Pre-course reflection (SR #1)",
    "section": "",
    "text": "In this assignment, you’ll introduce yourself, come up with a plan for what you’d like to get out of the class, and roughly outline how you’ll accomplish your goals throughout the quarter. You’ll continue visiting the goals you set for yourself in this assignment throughout the quarter, so it’s worthwhile to be reflective!\nBecause everyone is participating under unique circumstances, I want to learn about your learning contexts. I can best support you in this class if you address the following:\n\nSome questions about school and life:\n\nWhere are you coming from (e.g. “I recently finished my undergraduate degree”, “I’ve been working in industry X for Y years”) (1-2 sentences)\nWhat do you hope to get out of this class? (3-4 sentences)\nIf you have a particular career goal in mind, how does this course apply to your future career, if at all? (1-3 sentences)\nWhat do you wish your instructors knew about you, but don’t? (2-4 sentences)\n\nSome questions about the way you like to learn:\n\nWhat kinds of assignments, skills, or behaviors have you felt most comfortable with / enjoy from past classes? Why do you enjoy them? (4-5 sentences)\nHow confident do you feel in your data visualization skills? Why? (3-4 sentences)\nHow confident do you feel in your coding skills (primarily R, but feel free to elaborate on any of the languages you’ve used)? Why? (3-4 sentences)\nWhat have you struggled with in the past in other graduate-level courses? Why? (3-4 sentences)\nOf the courses you’re taking this quarter, which do you expect to be the most challenging? Most demanding? (1-2 sentences)\nWhat responsibilities do you have outside of school, and how do you want to balance them? (3-4 sentences)\nWhich learning goals from the syllabus are you most excited about? (3-4 sentences)\nMost importantly, how do you plan on accomplishing your learning goals for this course? Note: be specific here! Instead of writing, “I will complete homework assignments” or “I will study”, you can make these more specific strategies: “I will create a schedule to map out assignments“ (elaborate on this), “I will use the homework assignments as opportunities to practice X,” I will communicate with classmates to ask for help after trying X,” “I will participate in online learning communities, such as TidyTuesday…” etc. (5-8 sentences)\n\nSome fun questions:\n\nWhat activity(ies) (outside of school / work) brings you the most joy? How do you plan to incorporate that activity into your schedule this quarter (if at all)? If you are unable to do so, is there something else you can plan to do that will bring you similar joy? (3-5 sentences)\nWhat is a piece of media you enjoyed recently? (e.g. music, book, movie, tweet, meme) (2-4 sentences)"
  },
  {
    "objectID": "assignments/SR1-precourse.html#rubric-specifications",
    "href": "assignments/SR1-precourse.html#rubric-specifications",
    "title": "Pre-course reflection (SR #1)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for this Pre-course reflection:\nComplete the following steps in your GitHub Classroom repo (eds240-sr1-USERNAME/SR1-precourse-reflection.qmd):\n\ninclude your preferred name, and if you feel comfortable, your preferred pronouns in the author field of the SR1-precourse-reflection.qmd YAML\nanswer all questions above, adhering to the length requirements specified at the end of each question prompt\nwe (your instructors) should be able to successfully render SR1-precourse-reflection.qmd locally without error, however do not push any html files to GitHub (i.e. SR1-precourse-reflection.html and SR1-precourse-reflection_files/; consider adding these to your .gitignore so that you don’t accidentally push them)\npush your completed SR1-precourse-reflection.qmd to GitHub via GitHub Classrooms by 11:59pm PT on Sat 01/13/2024"
  },
  {
    "objectID": "assignments/HW2.html",
    "href": "assignments/HW2.html",
    "title": "Assignment #2 (HW #2)",
    "section": "",
    "text": "You must earn a “Satisfactory” mark for each individual Part (I and II) to earn a “Satisfactory” mark for Assignment #2.\nNOTE: Assignments are to be submitted via GitHub Classrooms, unless otherwise noted. Each student receives one “free pass” for not submitting assignments via specified channels, after which you will receive a “Not Yet” mark.\nRead each part of the assignment carefully, and use the check boxes to ensure you’ve addressed all elements of the assignment!"
  },
  {
    "objectID": "assignments/HW2.html#learning-outcomes",
    "href": "assignments/HW2.html#learning-outcomes",
    "title": "Assignment #2 (HW #2)",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nidentify which types of visualizations are most appropriate for your data and your audience\nprepare (e.g. clean, explore, wrangle) data so that it’s appropriately formatted for building data visualizations\nbuild effective, responsible, accessible, and aesthetically-pleasing, visualizations using the R programming language, and specifically {ggplot2} + ggplot2 extension packages"
  },
  {
    "objectID": "assignments/HW2.html#description",
    "href": "assignments/HW2.html#description",
    "title": "Assignment #2 (HW #2)",
    "section": "Description",
    "text": "Description\nIn class, we discussed strategies and considerations for choosing the right graphic form to represent your data and convey your intended message. Here, you’ll apply what we’ve learned to a data set on lobster abundance and sizes, collected from coastal rocky reef sites within the Santa Barbara Coastal LTER. Unfold the following note to read more about the data before continuing on (collapsed to save space):\n\n\n\n\n\n\nLearn about the data:\n\n\n\n\n\n\nAbout SBC LTER\nThe Santa Barbara Coastal Long Term Ecological Research (SBC LTER) site was established in 2000 as part of the LTER Network to understand the ecology of coastal kelp forest ecosystems. Research and long-term ecological and environmental monitoring data is collected within a 10,000 square kilometer area of the northern portion of the Southern California Bight, which includes the Santa Barbara Channel, coastal watersheds, small estuaries, and sandy beaches that border the Channel. You can explore the full data catalog.\n\n\nAbout the data set\nThere are five coastal rocky reef research sites at which the SBC LTER collects long-term monitoring data:\n\nNaples Reef (NAPL)\nIsla Vista Reef (IVEE)\nArroyo Quemado Reef (AQUE)\nMohawk Reef (MOHK)\nCarpinteria Reef (CARP)\n\nIn January 2012, Naples Reef and Isla Vista Reef were designated as Marine Protected Areas (MPAs), prohibiting any future take of lobsters (along with other living marine resources). Since then, the SBC LTER has conducted annual (late summer) benthic surveys at each of the above five sites, where SCUBA divers record lobster abundance and sizes. Explore the metadata for more information.\n\n\nData citation\nReed, D, R. Miller. 2023. SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012 ver 9. Environmental Data Initiative. https://doi.org/10.6073/pasta/3595322687af94cd532620ad9db94c77.\n\n\nFinding this data set\nKnowing how to search for data can be tricky! Here’s how I accessed this particular data set, should you want to search for LTER data yourself, in the future:\n\nFilter the SBC LTER Data Catalog for data sets related to Reef/Kelp Forest habitats (check the box next to the habitat type of interest, or filter by measurement type or LTER Core Research Area). This produces a table of data collections, descriptions, and links to individual data and metadata records.\nChoose a data set of interest. I was interested in the SBC LTER: Spiny lobster in California Collection, which includes three different data sets. I specifically chose, Lobster abundace, size, and fishing pressure – here, you’ll find lots of metadata, including people and organizations involved in this data collection, temporal, geographic, and taxonomic coverage, methods and protocols, and links to data files. Additionally, you’ll see a link to the EDI Data Portal (top right corner), which is the data repository that maintains all data and metadata produced by the LTER. EDI assigns a DOI (Digital Object Identifier) to each version of a data package (data package = data + metadata; SBC LTER updates this data set each year when new data is collected – each update receives a new DOI).\nDownload or import the data. You can download the data file from either the SBC LTER Data Catalog or the EDI Data Package. However I prefer reading in the data directly from online (that way, I don’t need to worry about storing large data files). I recommend doing this from the EDI Data Package (rather than the SBC LTER Data Catalog), since the DOI ensures you can re-reference the exact same version, even after the data set is updated with new data (SBC LTER Data Catalog only has a download link for the most up-to-date version of the data). To do so, right click on the Download Data button, then select Copy Link Address.\n\n\n\n\n\n\n\n\n\n\nUse this url inside read_csv() to import the data into your script or Qmd / Rmd file:\n\nlobster_data &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.77.9&entityid=f32823fba432f58f66c06b589b7efac6\")\n\n\n\n\n\nYour goal is to create a visualization that explores how lobster size differs across each of the five coastal rocky reef SBC LTER sites for the years 2012 (when IVEE and NAPL were established as MPAs) and 2022 (10 years later). This will first require some data exploration and wrangling. Some tips (unfold below):\n\n\n\n\n\n\nData exploration & wrangling tips\n\n\n\n\n\nData exploration tips:\n\nUse glimpse() and / or str() to check out your variables and data types\nExtract unique elements using unique(df$column_name)\nOpen up the spreadsheet-style data viewer using View(df)\nBe sure to review the metadata (including methods & protocols) to fully understand the data\n\nData wrangling tips:\n\nI love starting all my cleaning pipelines with janitor::clean_names() to convert column headers into lowercase snake_case (not necessary, but easy to implement and super helpful for yourself and others)\nYou’ll want to keep just the years of interest\nMissing size measurements are denoted with -99999 – consider how to deal with these\nEach row is not always a single observation, but rather summed lobster counts at each size observed within a site / transect / replicate. You’ll want to wrangle the data such that each row represents a single lobster observation. You may need to do some Googling to figure out a solution for this (HINT: you’re looking to perform the opposite of count()).\nI often find that I’ll need to return to my data wrangling pipeline again after I start plotting my data – it’s at this stage that I’ll often catch variables that are the wrong data type (e.g. numeric, factor, character) for plotting and need to make the appropriate updates.\n\n\n\n\n(Part 1a) After exploring and wrangling your data, answer the following questions:\n\n1. What are your variables of interest and what kinds of data (e.g. numeric, categorical, ordered, etc.) are they? (a bullet point list here is fine)\n2. Using From Data to Viz, identify which graphic forms / geoms are appropriate, given your data. List them out. (a bullet point list here is fine)\n3. Now that you have a list of options, what are some of your considerations as you decide which type of graph create? For example, is it important / valuable to show sample size? Why or why not? How will you represent multiple groups? etc. (3-4 sentences)\n\nNow that you’ve explored and starting wrangling your data, it’s time to create some plots. It’s often important to try out multiple graphic forms (e.g. geom_*()s) as you decide which is the most effective way of presenting your data. This process is commonly referred to as Exploratory Data Analysis or Exploratory Data Visualization. Some tips (unfold below):\n\n\n\n\n\n\nData viz creation tips\n\n\n\n\n\nData viz creation tips:\n\nI always find it helpful to sketch things out on paper first\nThere’s no need to create anything special or particularly visually-pleasing during this exploratory visualization phase. It can be helpful to make minor modifications, (e.g. rearranging groups in a logical order, color groups, etc.) to help you identify any emerging patterns\nWe created a number of different plot types together in class, exploring different geoms and some of the arguments that each ggplot layer can take. Be sure to take a look back at the lecture materials, but also know that you may need to reference documentation and / or online examples to create / modify your intended visualizations.\n\n\n\n\n(Part 1b) Complete the following:\n\nCreate at least three different plots as part of your exploratory data visualization phase to test out which graphic forms / geoms works best. Your last plot should be the version that you feel is best suited for presenting your data. (NOTE: Your first two plots do not need to be at all polished – during the exploratory data visualization phase, we’re most concerned with choosing a graphic form / geom(s) for effectively presenting our data.)\nConsider all three of your plots. What about the graphic forms / geoms used in plots #1 and #2 was not as effective as plot #3? Justify your decision to pursue plot #3. (5-8 sentences)\n(For plot #3 only) Consider modifications that we discussed in lecture that may make this plot easier to interpret (e.g. updating colors, moving or removing legends, highlighting groups, ordering groups) – be sure to update your plot as appropriate.\nExplain why you chose to make the above modifications. If you chose not to make any of these modifications, why not? (3-6 sentences)\nPolish your third (final) plot by updating the labels and theme (we’ll cover theme modifications during week 4 discussion section).\nDescribe two or more challenges you encountered while deciding on / creating your plots – these can be conceptual (e.g. challenges in determining how to best represent your data) and / or technical (e.g. code-based challenges). (4-8 sentences)\nAdd alt text to your final visualization following the formula discussed during week 2’s discussion section and using the #| fig-alt: code chunk option."
  },
  {
    "objectID": "assignments/HW2.html#rubric-specifications",
    "href": "assignments/HW2.html#rubric-specifications",
    "title": "Assignment #2 (HW #2)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for Assignment #2, Part I:\nComplete the following steps in your GitHub Classroom repo (eds240-HW2/Part1.qmd):\n\ninclude your preferred name, and if you feel comfortable, your preferred pronouns in the author field of the Part1.qmd YAML\nanswer the three Part 1a questions, adhering to the length requirements specified at the end of each question prompt\ncreate three different plots (two unpolished exploratory data visualizations and one polished final plot) in accordance with Part 1b instructions (NOTE: there isn’t necessarily a single correct answer here, but your final plot should clearly display the variables of interest and you should be able to justify your choice in your written responses)\ncode should be clearly organized and annotated following conventions and guidelines outlined in the Writing clean code page on the course website\nanswer the three Part 1b questions, adhering to the length requirements specified at the end of each question prompt\nadd alt text to your final visualization in accordance with Part 1b instructions\nwe should be able to run individual lines / chunks of code and render Part1.qmd without errors\nall three plot outputs should appear in your rendered doc\npush your completed Part1.qmd to GitHub via GitHub Classrooms by 11:59pm PT on Sat 02/03/2024\n\n\n\n End Part I"
  },
  {
    "objectID": "assignments/HW2.html#learning-outcomes-1",
    "href": "assignments/HW2.html#learning-outcomes-1",
    "title": "Assignment #2 (HW #2)",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nNote: This part of HW #2 is a continuation of HW #1, Part II and is the next step in working towards your final course assignment. Your final assignment is meant to combine nearly all of the course learning outcomes(!):\n\nidentify which types of visualizations are most appropriate for your data and your audience\nprepare (e.g. clean, explore, wrangle) data so that it’s appropriately formatted for building data visualizations\nbuild effective, responsible, accessible, and aesthetically-pleasing visualizations using the R programming language, and specifically {ggplot2} + ggplot2 extension packages\nwrite code from scratch and read and adapt code written by others\napply a DEI (Diversity, Equity & Inclusion) lens to the process of designing data visualizations\n\nRead the description, below, for details on what to work on this week."
  },
  {
    "objectID": "assignments/HW2.html#description-1",
    "href": "assignments/HW2.html#description-1",
    "title": "Assignment #2 (HW #2)",
    "section": "Description",
    "text": "Description\nA small part of each homework assignment will be dedicated to working on a series of data visualizations which will be due as part of Assignment #4 at the end of the quarter. Assignment #4 will ask you to build three related, but different data visualizations – all which will use the same data set(s), but present those data differently for three different audiences / purposes:\n\na visualization for a general audience (i.e. without domain expertise) – this data visualization may be designed to prompt conversation, clearly display findings (without the use of jargon), display findings in an atypical but creative way, and / or may blend both art and science\na visualization to be included in a paper, technical documentation, or report – this visualization should tell a story, but can include much more detail, more data, more domain-specific language, etc.\na visualization that you could include in a presentation – you might imagine an audience with familiarity with your domain, but they only have a brief amount of time to process the information being presented; key takeaways should be clearly highlighted, and you may have multiple versions, each with an added layer (as if you’re animating pieces of your visualization onto a slide)\n\n(Part 2a) This week, you’ll focus on importing / wrangling / and beginning the exploratory data visualization phase, using the data you found as part of HW #1, Part II. Complete the following:\n\nCreate an file named, HW2-exploration.qmd within your lastName-eds240-HW4 repo and add appropriate YAML fields\nLoad necessary packages and read in your data\nClean & wrangle your data\nCreate at least four (but of course feel free to create more!) exploratory visualizations (similar to plot #1 and #2 in Part I of this assignment).\nIMPORTANT: If you have a downloaded data file saved to your repo (e.g. you’re not reading in your data directly from online, from a server, etc.) be sure to add your data folder / file to your .gitignore, particularly if this file is large.\n\n(Part 2b) After completing the above steps, answer the following questions:\n\n1. What have you learned about your data? Have any potentially interesting patterns emerged? (5-8 sentences)\n2. In HW #1, you outlined some questions that you wanted to answer using these data. Have you made any strides towards answering those questions? If yes, how so? If no, what next steps do you need to take (e.g. I need to create X plot type, I still need to track down Y data, I need to restructure existing data so that you can visualize it in Z ways, etc.)? (8-12 sentences)\n3. What challenges do you foresee encountering with your data? These can be data wrangling and / or visualization challenges. (4-6 sentences)"
  },
  {
    "objectID": "assignments/HW2.html#rubric-specifications-1",
    "href": "assignments/HW2.html#rubric-specifications-1",
    "title": "Assignment #2 (HW #2)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for Assignment #2, Part II:\nComplete the following steps under your lastName-eds240-HW4 repo, not in GitHub Classrooms:\n\nperform all Part 2a steps, as described above, in HW2-exploration.qmd\nanswer Part 2b questions, also in HW2-exploration.qmd, adhering to the length requirements specified at the end of each question prompt\nall four plot outputs should appear in your rendered doc\nHW2-exploration.qmd should be neatly organized – this does not need to be a perfectly polished document, but sections should be clearly labeled with prose and / or annotations so that we can easily follow along.\npush your completed HW2-exploration.qmd to your repo by 11:59pm PT on Sat 02/03/2024\n\n\n\n End Part II"
  },
  {
    "objectID": "assignments/HW4.html#rubric-specifications",
    "href": "assignments/HW4.html#rubric-specifications",
    "title": "Assignment #4 (HW #4)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for Assignment #4:"
  },
  {
    "objectID": "assignments/SR2-midcourse.html",
    "href": "assignments/SR2-midcourse.html",
    "title": "Mid-course reflection (SR #2)",
    "section": "",
    "text": "In this assignment, you’ll be writing about your learning throughout this course so far. Remember that these assignments are opportunities for you to reflect on your own progress in the course.\nReread your responses to your Pre-course reflection (SR #1) to refresh your memory, and answer the following questions in 2-3 sentences:\n\nHow have you progressed towards your learning goals for this course?\nWhat skills are you proud of developing?\nIf you’ve needed help, how have you sought it out? If you haven’t sought out help, why not?\nLooking forward, how have your learning goals changed? Have they stayed the same?\nWhat topics have excited you the most (so far)? Have you spent time or efforts outside of class and/or the assignments diving deeper into any of these topics? If yes, what did you learn?\nHow would you change the structure of this course, if at all? If you wouldn’t, what in particular has been working for you?\nIs there anything about this course that you are really enjoying? Anything that isn’t working for you?\nWhat else would you like me to know about your experience in the course thus far?"
  },
  {
    "objectID": "assignments/SR2-midcourse.html#description",
    "href": "assignments/SR2-midcourse.html#description",
    "title": "Mid-course reflection (SR #2)",
    "section": "",
    "text": "In this assignment, you’ll be writing about your learning throughout this course so far. Remember that these assignments are opportunities for you to reflect on your own progress in the course.\nReread your responses to your Pre-course reflection (SR #1) to refresh your memory, and answer the following questions in 2-3 sentences:\n\nHow have you progressed towards your learning goals for this course?\nWhat skills are you proud of developing?\nIf you’ve needed help, how have you sought it out? If you haven’t sought out help, why not?\nLooking forward, how have your learning goals changed? Have they stayed the same?\nWhat topics have excited you the most (so far)? Have you spent time or efforts outside of class and/or the assignments diving deeper into any of these topics? If yes, what did you learn?\nHow would you change the structure of this course, if at all? If you wouldn’t, what in particular has been working for you?\nIs there anything about this course that you are really enjoying? Anything that isn’t working for you?\nWhat else would you like me to know about your experience in the course thus far?"
  },
  {
    "objectID": "assignments/SR2-midcourse.html#rubric-specifications",
    "href": "assignments/SR2-midcourse.html#rubric-specifications",
    "title": "Mid-course reflection (SR #2)",
    "section": "Rubric (specifications)",
    "text": "Rubric (specifications)\nYou must complete the following, as detailed below, to receive a “Satisfactory” mark for this Mid-course reflection:\nComplete the following steps in your GitHub Classroom repo (eds240-SR2/SR2-midcourse-reflection.qmd):\n\ninclude your preferred name, and if you feel comfortable, your preferred pronouns in the title of the SR1-precourse-reflection.qmd YAML\naddress the 8 topics above (but please feel free to expand on these if you would like)\npush SR2-midcourse-reflection.qmd to GitHub using GitHub Classrooms by 11:59pm PT on Sat 02/10/2024"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Data Visualization & Communication",
    "section": "Course Description",
    "text": "Course Description\nEffectively communicating your work in a responsible, accessible and visually-pleasing way is often (if not, always) a central part of data science. This course will focus on the basic principles for effective communication through data visualization and using technical tools and workflows for creating and sharing data visualizations with diverse audiences.\nBy the end of this course, learners should be able to:\n\nIdentify which types of visualizations are most appropriate for your data and your audience\nPrepare (e.g. clean, explore, wrangle) data so that it’s appropriately formatted for building data visualizations\nBuild effective, responsible, accessible, and aesthetically-pleasing visualizations using the R programming language, and specifically {ggplot2} + ggplot2 extension packages\nWrite code from scratch and read and adapt code written by others\nApply a DEI (Diversity, Equity & Inclusion) lens to the process of designing data visualizations\nAssess, critique, and provide constructive feedback on data visualizations"
  },
  {
    "objectID": "index.html#teaching-team",
    "href": "index.html#teaching-team",
    "title": "Data Visualization & Communication",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nSam Csik\nEmail: scsik@ucsb.edu\nLearn more: samanthacsik.github.io\n\n\n\n\nTA\n\n\n\n\n\n\n\n\n\n\n\nSevan Esaian\nEmail: sevan.esaian@lifesci.ucsb.edu\nLearn more: linkedin.com/in/sevan-esaian"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Data Visualization & Communication",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nBuilding this course meant learning from the many incredible folks who think a lot about producing effective, beautiful, and responsible data visualizations. I relied heavily on the open source R / {ggplot2} / data viz teaching materials and tutorials that this wonderful data science community shares so willingly. Attribution will be included on any slides / materials where content is adapted from other educators."
  },
  {
    "objectID": "slides/sections/3.3-lyme.html",
    "href": "slides/sections/3.3-lyme.html",
    "title": "EDS 240",
    "section": "",
    "text": "Warning: package 'tidycensus' was built under R version 4.3.1\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\nWarning: package 'stringr' was built under R version 4.3.1\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nTo install your API key for use in future sessions, run this function with `install = TRUE`.\n\nRows: 3143 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Ctyname, Stname, ststatus\ndbl (22): STCODE, CTYCODE, Cases2001, Cases2002, Cases2003, Cases2004, Cases...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'year'. You can override using the `.groups` argument.\nJoining with `by = join_by(state)`"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#title-slide",
    "href": "slides/week1.1-logistics-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 1.1\nCourse logistics & syllabus\n\nWeek 1 | January 8th, 2024"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#welcome",
    "href": "slides/week1.1-logistics-slides.html#welcome",
    "title": "EDS 240",
    "section": "",
    "text": "Welcome to EDS 240!\n\nThis course will focus on the basic principles for effective communication through data visualization and using technical tools and workflows for creating and sharing data visualizations with diverse audiences.\n\n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#logistics",
    "href": "slides/week1.1-logistics-slides.html#logistics",
    "title": "EDS 240",
    "section": "",
    "text": "Meeting times & locations\n\n\nClass: Mondays 1:00-4:00pm PT (attendance is mandatory)\nDiscussion Sections: Wednesdays 10:00-10:50am PT & 11:00-11:50am PT\n\n\n\nClass & Discussion Sections meet in the NCEAS 1st floor classroom"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#instructor",
    "href": "slides/week1.1-logistics-slides.html#instructor",
    "title": "EDS 240",
    "section": "",
    "text": "Teaching team\n\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nSam Csik\nEmail: scsik@ucsb.edu\nLearn more: samanthacsik.github.io\nStudent hours: M 4-5pm @ NCEAS\n\n\n\nTA\n\n\n\n\n\n\n\n\n\n\n\nSevan Esaian\nEmail: sevan.esaian@lifesci.ucsb.edu\nLearn more: linkedin.com/in/sevan-esaian Student hours: W 9-10am @ NCEAS"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#meet-one-another",
    "href": "slides/week1.1-logistics-slides.html#meet-one-another",
    "title": "EDS 240",
    "section": "",
    "text": "Meet one another!\n\n\nSpend the next few minutes getting to know your Learning Partners! Below are some conversation starters:\n\n\nWhere do you feel most at home?\n\n\nWhat parts of Santa Barbara have you enjoyed exploring?\n\n\nWhat’s the most exciting thing you’ve learned this year, so far?\n\n\nWhat’s your favorite color or typeface?\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#student-resources",
    "href": "slides/week1.1-logistics-slides.html#student-resources",
    "title": "EDS 240",
    "section": "",
    "text": "Student Resources\n\n\nBasic Needs Resources & Food Security: https://basicneeds.ucsb.edu/ (schedule a CalFresh Appoinment or Basic Needs Advising Session)\nCounseling & Psychological Services (CAPS): http://caps.sa.ucsb.edu\nResource Center for Sexual and Gender Diversity (RCSGD): https://rcsgd.sa.ucsb.edu/\nUndocumented Student Services (USS) Program: https://uss.sa.ucsb.edu/\nCampus Learning Assistance Services (CLAS): http://clas.sa.ucsb.edu\nStudent Resource Building (SRB): http://www.sa.ucsb.edu/student-resource-building/home\nMulticultural Center (MCC): http://mcc.sa.ucsb.edu/\nCampus Advocacy, Resources, & Education (CARE): http://wgse.sa.ucsb.edu/care/home\nFinancial Crisis Response Team: financialcrisis@sa.ucsb.edu (contact)\nHealth and Wellness: https://wellbeing.ucsb.edu/\n\n\n\nYour mental and physical health is more important than your grade in any course.\nI’m always happy to help you identify resources or help on campus – DM or email me!"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#conduct",
    "href": "slides/week1.1-logistics-slides.html#conduct",
    "title": "EDS 240",
    "section": "",
    "text": "Conduct, Inclusion, Accommodations\n\n \nCourse Conduct: We are committed to actively creating, modeling, and maintaining an inclusive climate and supportive learning environment for all – harassment of any kind will not be tolerated. Everyone is expected read and adhere to the Bren School Code of Conduct and the UCSB Code of Conduct\n\n\nAccess & accommodations: It’s never too late to apply for DSP accommodations\n\n\n\nNames & pronouns: Everyone has the right to be addressed and referred by to name and pronouns in accordance with their identity – you can add your pronouns to your UCSB Registrar profile\n\nApplying for DSP accommodations is a multi-step process and students should begin this as soon as possible as it can take 10 days to process applications.\nStep 1: Submit an application with DSP, upload documentation and select the services needed.\nStep 2: For exam accommodations (more time, private setting, etc.) students need to submit a proctor request for each exam in each course that they need accommodations for. DSP has instructions on their website for completing these tasks and students can login to the DSP portal to check the status of their application and requests."
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#course-website",
    "href": "slides/week1.1-logistics-slides.html#course-website",
    "title": "EDS 240",
    "section": "",
    "text": "Everything you’ll need lives on the course website!\n\n\nhttps://samanthacsik.github.io/EDS-240-data-viz\n\n\n\nLink is also bookmarked at the top of the #eds-240-data-viz Slack channel and linked on the Courses page of the MEDS website."
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#tentative-schedule",
    "href": "slides/week1.1-logistics-slides.html#tentative-schedule",
    "title": "EDS 240",
    "section": "",
    "text": "Tentative Schedule & Materials\n\n\n\n\n\n\n\n\n\n\n\nDate\nTentative Topic\n\n\n\n\n1/8\ncourse logistics, intro, {ggplot2} review\n\n\n1/15\nno class\n\n\n1/22\ngraphic forms, fundamental chart types (part I)\n\n\n1/29\nfundamental chart types (part II), good vs. bad viz\n\n\n2/5\nenhancing visualizations\n\n\n2/12\ndata communication\n\n\n2/19\nno class\n\n\n2/26\nvisualizing uncertainty & avoiding the misrepresentation of data\n\n\n3/4\nOJS with Dr. Allison Horst\n\n\n3/11\ngrab bag & catch up\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussion sections are held every week"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#pre-class-prep",
    "href": "slides/week1.1-logistics-slides.html#pre-class-prep",
    "title": "EDS 240",
    "section": "",
    "text": "Complete all items under Pre-class Prep before lecture\n\nPlease be sure to carefully complete all required prep (e.g. installing packages, downloading data) under the Pre-class Prep section (organized by week) before lecture – be mindful that some items may take time to download/install.\n\n\nIt is highly recommended that you do this well in advance of attending lecture."
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#assignments",
    "href": "slides/week1.1-logistics-slides.html#assignments",
    "title": "EDS 240",
    "section": "",
    "text": "Assignments\n\n\n\nYour course grade will be based off the following:\n\n\n\n3 Self-reflections - a place to reflect on your learning plan / goals, challenges, etc. (5 days to complete each)\n4 Homework Assignments - longer assignments where you’ll apply conceptual knowledge & technical skills to data viz tasks (10+ days to complete each)\n8 End-of-class surveys - short surveys to help me better understand your weekly class experience (due by EOD each day there is lecture)\n8 Lectures - a mix of slide-based lectures, live-coding, and individual / group-based critical thinking and technical exercises (attendance mandatory, Mondays 1:00-4:00pm PT)"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#grading",
    "href": "slides/week1.1-logistics-slides.html#grading",
    "title": "EDS 240",
    "section": "",
    "text": "How will I be evaluated?\n\n\nThis class will implement an alternative grading approach called specifications (specs) grading.\n\n\n\n\n“an alternative grading method where instructors create a list of specifications that describe the qualities and characteristics of a successful submission for an assignment. Student work is graded holistically based on those specifications, earning a single mark: “Satisfactory” or “Not Yet”. Students have the chance to use feedback by revisiting and resubmitting for full credit.”\n\n\n\n-expert from “Grading for Growth: A Guide to Alternative Grading Practices That Promote Authentic Learning and Student Engagement in Higher Education”, by David Clark & Robert Talbert"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#why-specs",
    "href": "slides/week1.1-logistics-slides.html#why-specs",
    "title": "EDS 240",
    "section": "",
    "text": "Why Specs grading?\n\n\n“Traditional” grading can come with some challenges:\n\n\n\nlacks feedback loops\nbenefits those who learn fast or have prior experience\nbias-prone (e.g. awarding points, granting extensions)\ncan discourage learning for its own sake\ncan promote unhealthy student-instructor relationships\n\n\n\nTraditional grading = points are awarded for correct answers on assessments; graded assessments contribute some percentage towards your overall course grade; course score (typically a percentage) is convered to a letter grade"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#how-does-specs-look",
    "href": "slides/week1.1-logistics-slides.html#how-does-specs-look",
    "title": "EDS 240",
    "section": "",
    "text": "How does specs grading look in practice for this course?\n\n\nTL;DR: assignments receive either “Satisfactory” or “Not Yet” marks; tokens can be used to revise / resubmit assignments, for assignment extensions, or to miss class; earn tokens by attending discussions\n\n\n\nassignments receive either a “Satisfactory” or “Not Yet” mark\neach assignment will have a clear rubric (containing specifications) which outline what must be completed and how in order to receive a “Satisfactory” mark; not meeting all specifications results in a “Not Yet” mark\nstudents can trade “tokens” for the opportunity to:\n\nrevise / resubmit assignments that receive a “Not Yet” mark (within a week)\nassignment extensions (24 or 72 hours)\nto miss class\n\nstudents earn tokens (primarily) by attending discussion section"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#why-tokens",
    "href": "slides/week1.1-logistics-slides.html#why-tokens",
    "title": "EDS 240",
    "section": "",
    "text": "Why tokens?\n\n\nEveryone has different responsibilities & demands – tokens give you the power and freedom to ask for the accommodations you need.\n\n\nYou do not need to provide a reason to request an extension, resubmission, or to miss class, but you must have enough tokens to do so.\n\n\n\n\nTokens are not limitless and they accrue weekly (i.e. you don’t receive them all at the start), so use them wisely!"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#tokens",
    "href": "slides/week1.1-logistics-slides.html#tokens",
    "title": "EDS 240",
    "section": "",
    "text": "Earning & using tokens\n\n\nEarn tokens:\n\n\neveryone starts with 0 tokens\nearn your first token by attending discussion section on Wednesday 1/10\nearn 2 more tokens by submitting Self-reflection #1\nearn 1 token per week by attending discussion section (full 50 min)\n\n\n\n\nUse tokens:\nFill out this Google form: https://forms.gle/6FdV9g5KA9GgrxXBA and email Sam & Sevan to let them know"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#grade-tracker",
    "href": "slides/week1.1-logistics-slides.html#grade-tracker",
    "title": "EDS 240",
    "section": "",
    "text": "Use the Grade Tracker to determine your course grade"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#GenAI",
    "href": "slides/week1.1-logistics-slides.html#GenAI",
    "title": "EDS 240",
    "section": "",
    "text": "Policy on Generative AI (GenAI)\n\nGenAI tools (such as ChatGPT) are strongly discouraged for the following reasons:\n\n\ncore competencies are built through practice\nbuilding your own programming proficiency will help you engage with GenAI tools more productively\nsubscription versions of GenAI tools may induce an inequitable learning environment\n\n\n\nPlease adhere to these guidelines:\n\n\nyou may use spell / grammar check and / or synonym identification tools\nbe prepared to explain each line of code in your assignments and exercises\nif you use GenAI in assignments, you must include a statement of which GenAI platform used and why, along with a copy of your initial prompt(s) and ensuing “conversation(s)”\n\n\n\n\n\nPlease read the full policy on the course syllabus"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#help",
    "href": "slides/week1.1-logistics-slides.html#help",
    "title": "EDS 240",
    "section": "",
    "text": "Getting unstuck\n\nTroubleshooting, deciphering code, and trying (and failing at) new things is a large part of being a data scientist. Grad school is a safe space to get comfy with and practice these! Here’s how you should approach getting unstuck:\n\nCheck out the getting unstuck page (under “resources”) on the course website for more tips – particularly a reminder of how to ask a question."
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#sucking-less",
    "href": "slides/week1.1-logistics-slides.html#sucking-less",
    "title": "EDS 240",
    "section": "",
    "text": "A note on pushing through the challenges\n\n\n\n \n\n\n“There is no way of [going from] knowing nothing about a subject to knowing something about a subject without going through a period of much frustration and suckiness.” “Push through. You’ll suck less.”\n\n\n\n-Hadley Wickham, author of {ggplot2}\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\nSlide adapted from Andrew Heiss’ lesson, Truth, beauty, and data (PMAP 8101: Data Visualization)"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#slack",
    "href": "slides/week1.1-logistics-slides.html#slack",
    "title": "EDS 240",
    "section": "",
    "text": "A note on using Slack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll course-related content questions should be asked in the #eds-240-data-viz channel – oftentimes there are others who have the same question and will benefit from seeing the discussion!\n\nAny questions sent as DMs will be copied into #eds-240-data-viz and answered there.\n\nOf course, please direct message or email with any personal questions or concerns."
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#expectations",
    "href": "slides/week1.1-logistics-slides.html#expectations",
    "title": "EDS 240",
    "section": "",
    "text": "A note on expectations\n\nReminders:\n\nWe are not mind-readers (as helpful as that would be!). Please help us help you by bringing any issues to our attention (EOC surveys are a great place to do this, or via DM / email) – the earlier the better!\n\n\nPromises:\n\n\nWe are working, and will continue to work, really hard to make this a great class!\nWe are super passionate about teaching, but doesn’t mean it’s easy or that we’re infallible. We will do our best to adapt to student / class needs as the quarter progresses. There may be times where we won’t or can’t make changes to the course plan – if so, we will be transparent in our reasoning why.\n\n\n\n\nBoundaries:\n\n\nThis course (unfortunately) isn’t our only professional responsibility this quarter – we will not be available at all times to respond to requests / questions. Here’s what you can expect:\n\nWe will try our best to respond to Slack questions within 24hr (during the week)\nA response after-hours (5pm - 9am) is not guaranteed (we will try our best, as our personal lives allow for)\nWe will not be responding to questions over the weekend"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#this-course1",
    "href": "slides/week1.1-logistics-slides.html#this-course1",
    "title": "EDS 240",
    "section": "",
    "text": "What is EDS 240?\n\n\n\nEDS 240: Data Visualization and Communication is about two related, but distinct things:\n\n\n\n1. The theory of effective communication and data design\n How people perceive and interpret graphical information\n Human-centered design as it relates to data visualizations\n\n\n\n2. The physical act of building effective data visualizations using software and data science tools\n Using the Grammar of Graphics / {ggplot2} framework to create effective, truthful, and beautiful data visualizations"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#this-course2",
    "href": "slides/week1.1-logistics-slides.html#this-course2",
    "title": "EDS 240",
    "section": "",
    "text": "What is EDS 240?\n\n\n\nThe topic of data visualization is pretty darn massive.\n\n\n\nWe cannot and will not cover every data visualization type, consideration, package, etc.\n\n\n\n\n\nWe will work towards a conceptual and technical understanding of data viz fundamentals.\n\n\n\n\n\nData viz is a science and technical skill, but there’s also a lot of space for creativity.\n\n\n\n\n\nWhat you create can be used in your professional portfolio! The more you put in, the more you’ll get out."
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#LOs",
    "href": "slides/week1.1-logistics-slides.html#LOs",
    "title": "EDS 240",
    "section": "",
    "text": "Course Learning Objectives\n\n Identify which types of visualizations are most appropriate for your data and your audience\n\n\n Prepare (e.g. clean, explore, wrangle) data so that it’s appropriately formatted for building data visualizations\n\n\n\n Build effective, responsible, accessible, and aesthetically-pleasing, visualizations using the R programming language, and specifically ggplot2 + ggplot2 extension packages\n\n\n\n Write code from scratch and read and adapt code written by others\n\n\n\n Apply a DEI (Diversity, Equity & Inclusion) lens to the process of designing data visualizations\n\n\n\n Assess, critique, and provide constructive feedback on data visualizations"
  },
  {
    "objectID": "slides/week1.1-logistics-slides.html#end-break",
    "href": "slides/week1.1-logistics-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "Take a Break\n\n\n~ This is the end of Lesson 1 (of 3) ~\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#title-slide",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 3.1\nChoosing the right graphic form\n\nWeek 3 | January 22nd, 2024"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#viz-complex-nums",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#viz-complex-nums",
    "title": "EDS 240",
    "section": "",
    "text": "We understand complex numbers better when they’re represented visually\n\n\n“Exams will have a total of 137 points rather than the usual 100. This scoring system has no efect on the grade you get in the course, but it seems to make you happier”\n\n\n-Richard H. Thaler, economist & professor\n\n\nEarly years: exam graded 0 - 100 with an average score of 72 points = lots of complaints\nLater years: exam graded 0 - 137 with an average score of 96 points = no complaints\n\n\n\n\n\n\n\n\n\n\n\n\nAlbert Cairo’s visualization of the scores from Thaler’s exam case study"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#vision-sense",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#vision-sense",
    "title": "EDS 240",
    "section": "",
    "text": "Vision is our most well-developed sense\n\n  \n\nMapping data into visual properties is powerful\n\n\n\n\nMapping?\nHow values of a variable(s) of interest are represented by visuals (e.g height of bar, shaded region of area plot, color of data points)"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#choose-graphic",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#choose-graphic",
    "title": "EDS 240",
    "section": "",
    "text": "How do you choose the right graphic form to represent your data?\n\n  \n\n\n“If I had the answer to that, I’d be rich by now…I have no idea, but I can give you some clues to make your own choices based on what we know about why and how visualization works”\n\n\n\n-Albert Cairo1, in his book, The Truthful Art\n\n\n1Someone who, in fact, knows a lot about effectively visualizing data"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#ex-choose-graph",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#ex-choose-graph",
    "title": "EDS 240",
    "section": "",
    "text": "Exercise: Map data to visual properties\n\n  \n\n\n\n−+\n03:00\n\n\n\nLet’s say you want to compare unemployment rates of 5 countries: A, B, C, D, E (the actual values here are not important).\n\n\nHow would you map the unemployment rates to visual properties in a way that enables your readers to accurately compare values without having to read all the numbers?\n\nExample adapted from Albert Cairo’s, The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#ex-possible-choices",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#ex-possible-choices",
    "title": "EDS 240",
    "section": "",
    "text": "Different methods of encoding the same data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraphs recreated based on Albert Cairo’s example (Fig 5.2) in The Truthful Art\nFor all graphics: A (22%), B (25%), C (24%), D (29%), E (32%)\n\n\nLENGHT, HEIGHT, POSITION probably the best (have students discuss)"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#hierarchy",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#hierarchy",
    "title": "EDS 240",
    "section": "",
    "text": "“Hierarchy of elementary perceptual tasks”\n\n\n\n\nWilliam S. Cleveland & Robert McGill (1984) Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods, Journal of the American Statistical Association, 79:387, 531-554, DOI: 10.1080/01621459.1984.10478080\n\n\n\na viewer performs one or more of these mental-visual tasks (judging position, perceiving angles / areas, etc.) to extract the values of real variables represented on most graphs\nsuccessful charts are constructed based on elementary tasks “as high in the hierarchy as possible”\n\nAlbert Cairo’s recreation of Cleveland & McGill’s Hierarchy of Elementary Perceptual Tasks \n\n\n\n\n\n\n\n\n\n\n\nA recreation of Cleveland & McGill’s hierarchy of elementary perceptual tasks, by Albert Cairo"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#compare-circles",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#compare-circles",
    "title": "EDS 240",
    "section": "",
    "text": "Exercise: How many times bigger is the larger circle?\n\n\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#compare-bars",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#compare-bars",
    "title": "EDS 240",
    "section": "",
    "text": "Exercise: How many times bigger is the larger bar?\n\n\n\n\n\n−+\n01:00"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#7x",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#7x",
    "title": "EDS 240",
    "section": "",
    "text": "Both the circles & rectangles differ by a magnitude of 7"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#caveats1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#caveats1",
    "title": "EDS 240",
    "section": "",
    "text": "Caveats to the hierarchy\n\n \n1. Cleveland & McGill only considered statistical charts. What about data maps, for example, that rely on area / shading / hue, which fall lower on the hierarchy?"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#caveats1.1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#caveats1.1",
    "title": "EDS 240",
    "section": "",
    "text": "Caveats to the hierarchy - an example\n\nLower scale methods can be appropriate when the goal is to reveal general patterns. For example, a choropleth map displays divided geographical areas / regions, which are colored in relation to a numeric variable.\n\n\n\n\nPrecipitation data downloaded from NOAA’s National Centers for Environmental Information. Map created using the {maps} package."
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#caveats2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#caveats2",
    "title": "EDS 240",
    "section": "",
    "text": "Caveats to the hierarchy\n\n \n1. Cleveland & McGill only considered statistical charts. What about data maps, for example, that reply on area / shading / hue, which fall lower on the hierarchy?\n\n2. No method of choosing a graphic form is perfect! It’s important to think critically about your graphic’s purpose and how best to represent your data to serve that purpose."
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#caveats2.1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#caveats2.1",
    "title": "EDS 240",
    "section": "",
    "text": "Caveats to the hierarchy - an example\n\nConsider how you might display the same data in the following Sankey diagram depicted the flow of refugees in 2022, using graph types from the top of Cleveland & McGill’s hierarchy. What is the purpose of this chart?\n\n\n\n\n\n\nGraphic recreated following Louise E. Sinks’ blog post, TidyTuesday: Exploring Refugee Flow with A Sankey Diagram\n\nIt would be hard to use a method of encoding from the top of the hierarchy! In this Sankey diagram, readers need to decode length and area, but that’s not a huge issue since the purpose of the chart is to show high-level trends / flows of refugees"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#tips0",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#tips0",
    "title": "EDS 240",
    "section": "",
    "text": "Tips for choosing the right graphic form\n\n\n\nThink about the task(s) you want to enable or message(s) you want to convey. For example, do you want to compare, see change or flow, reveal relationships or connections, envision temporal or spatial patterns.\n\n\n\n\nConsider the number of variables and the number of data points, as well as the data types you’re working with. For example, do you have several vs. many data points? How many categorical and/or numeric variables? Are your variables ordered or not ordered? Data types can dictate which graphical form is appropriate.\n\n\n\n\nTry different graphic forms, especially if you have more than one task to enable or message to convey.\n\n\n\n\nArrange the components of the graphic to make it as easy as possible to extract meaning from your graphic quickly.\n\n\n\n\nTest the outcomes of your graphic on others, particularly on those who are representative of the audience you are trying to reach.\n\n\nMost of the above tips are adapted from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#tips1-2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#tips1-2",
    "title": "EDS 240",
    "section": "",
    "text": "Tips for choosing the right graphic form\n\n\nThink about the task(s) you want to enable or message(s) you want to convey. For example, do you want to compare, see change or flow, reveal relationships or connections, envision temporal or spatial patterns.\nConsider the number of variables and the number of data points, as well as the data types you’re working with. For example, do you have several vs. many data points? How many categorical and/or numeric variables? Are your variables ordered or not ordered? Data types can dictate which graphical form is appropriate.\nTry different graphic forms, especially if you have more than one task to enable or message to convey.\nArrange the components of the graphic to make it as easy as possible to extract meaning from your graphic quickly.\nTest the outcomes of your graphic on others, particularly on those who are representative of the audience you are trying to reach.\n\n\nMost of the above tips are adapted from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#chart-selectors",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#chart-selectors",
    "title": "EDS 240",
    "section": "",
    "text": "1. What task(s) to enable / message(s) to convey\n2. Number of variables & data points, data types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Viz Project\ndisplays one small data set 100 different ways\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Data to Viz\nsearch graphic types by data type or by function (+ R & Python Graph Gallery)\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Visualization Universe\ncompares most popular graphic forms"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#cat-disc1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#cat-disc1",
    "title": "EDS 240",
    "section": "",
    "text": "2. Number of variables & data points, data types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArt by Allison Horst"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#cat-disc2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#cat-disc2",
    "title": "EDS 240",
    "section": "",
    "text": "2. Number of variables & data points, data types\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArt by Allison Horst"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#tips3",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#tips3",
    "title": "EDS 240",
    "section": "",
    "text": "Tips for choosing the right graphic form\n\n\nThink about the task(s) you want to enable or message(s) you want to convey. For example, do you want to compare, see change or flow, reveal relationships or connections, envision temporal or spatial patterns.\nConsider the number of variables and the number of data points, as well as the data types you’re working with. For example, do you have several vs. many data points? How many categorical and/or numeric variables? Are your variables ordered or not ordered? Data types can dictate which graphical form is appropriate.\nTry different graphic forms especially if you have more than one task to enable or message to convey.\nArrange the components of the graphic to make it as easy as possible to extract meaning from your graphic quickly.\nTest the outcomes of your graphic on others, particularly on those who are representative of the audience you are trying to reach.\n\n\nMost of the above tips are adapted from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#choro-bar",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#choro-bar",
    "title": "EDS 240",
    "section": "",
    "text": "3. Try different graphic forms\n\nRecall our choropleth map from earlier, which displays total precipitation by US county. What if we want to compare precipitation between CA counties? Choosing a graphical form from the top of the hierarchy (e.g. bar chart) may be more effective.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we want to show both big picture patterns and detailed comparisons, we may consider including multiple graphic forms in the same visualization."
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#tips4",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#tips4",
    "title": "EDS 240",
    "section": "",
    "text": "Tips for choosing the right graphic form\n\n\nThink about the task(s) you want to enable or message(s) you want to convey. For example, do you want to compare, see change or flow, reveal relationships or connections, envision temporal or spatial patterns.\nConsider the number of variables and the number of data points, as well as the data types you’re working with. For example, do you have several vs. many data points? How many categorical and/or numeric variables? Are your variables ordered or not ordered? Data types can dictate which graphical form is appropriate.\nTry different graphic forms, especially if you have more than one task to enable or message to convey.\nArrange the components of the graphic to make it as easy as possible to extract meaning from your graphic quickly.\nTest the outcomes of your graphic on others, particularly on those who are representative of the audience you are trying to reach.\n\n\nMost of the above tips are adapted from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#ad-methods1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#ad-methods1",
    "title": "EDS 240",
    "section": "",
    "text": "4. Arrange components of the graphic\n\n How does the influence of in-theater advertising change across generations?  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImages from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#ad-methods2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#ad-methods2",
    "title": "EDS 240",
    "section": "",
    "text": "4. Arrange components of the graphic\n\n How does the influence of in-theater advertising change across generations?  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImages from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#fed-spending1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#fed-spending1",
    "title": "EDS 240",
    "section": "",
    "text": "4. Arrange components of the graphic\n\nLet’s say we’re interested in:\n\nchanges in the amount spent on Social Security over time (2012-2015) relative to other major spending categories?\n\n\n\n\n\nExample from Derek L. Sonderegger’s online textbook, STA 141 - Exploratory Data Analysis and Visualization"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#fed-spending2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#fed-spending2",
    "title": "EDS 240",
    "section": "",
    "text": "4. Arrange components of the graphic\n\nLet’s say we’re interested in:\n\nchanges in the amount spent on Social Security over time (2012-2015) relative to other major spending categories?\nthe amount of money spent on Social Security over time (2012-2015)?\n\n\n\n\n\nExample from Derek L. Sonderegger’s online textbook, STA 141 - Exploratory Data Analysis and Visualization"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#internet1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#internet1",
    "title": "EDS 240",
    "section": "",
    "text": "4. Arrange components of the graphic\n\nDo we want to convey:\n\ninternet usage in 2016? or\n\n\n\n\nExample from Claus Wilke’s, Fundamentals of Data Visualization"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#internet2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#internet2",
    "title": "EDS 240",
    "section": "",
    "text": "4. Arrange components of the graphic\n\nDo we want to convey:\n\ninternet usage in 2016? or\nhow early or late adoption of internet relates to current-day usage?\n\n\n\n\nExample from Claus Wilke’s, Fundamentals of Data Visualization"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#tips5",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#tips5",
    "title": "EDS 240",
    "section": "",
    "text": "Tips for choosing the right graphic form\n\n\nThink about the task(s) you want to enable or message(s) you want to convey. For example, do you want to compare, see change or flow, reveal relationships or connections, envision temporal or spatial patterns.\nConsider the number of variables and the number of data points, as well as the data types you’re working with. For example, do you have several vs. many data points? How many categorical and/or numeric variables? Are your variables ordered or not ordered? Data types can dictate which graphical form is appropriate.\nTry different graphic forms, especially if you have more than one task to enable or message to convey.\nArrange the components of the graphic to make it as easy as possible to extract meaning from your graphic quickly.\nTest the outcomes of your graphic on others, particularly on those who are representative of the audience you are trying to reach.\n\n\nMost of the above tips are adapted from Albert Cairo’s The Truthful Art"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#iraq",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#iraq",
    "title": "EDS 240",
    "section": "",
    "text": "5. Test the outcomes of your graphic on others\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Iraq’s bloody toll.\n\n\n\n\nTo enlarge image (in Chrome), right click on image &gt; Open image in New Tab\n\n\n\nWhat is the take home message of this graphic?\nWhat is effective? What is confusing?\n\n\n\n\n−+\n03:00"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#guns1",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#guns1",
    "title": "EDS 240",
    "section": "",
    "text": "5. Test the outcomes of your graphic on others\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: This Chart Shows An Alarming Rise In Florida Gun Deaths After ‘Stand Your Ground’ Was Enacted.\n\n\n\n\nTo enlarge image (in Chrome), right click on image &gt; Open image in New Tab\n\n\n\nWhat is the take home message of this graphic?\nWhat is effective? What is confusing?\n\n\n\n\n−+\n03:00"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#iraq-guns",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#iraq-guns",
    "title": "EDS 240",
    "section": "",
    "text": "5. Test the outcomes of your graphic on others\n\n\n\n\n\n\n\n\n\n\n\n\nBaseline at the top is clear, suggesting that bars are falling from it. Clear metaphor (dripping blood).\n\n\n\n\n\n\n\n\n\n\nEyes are drawn to baseline at the bottom, on top of which data are sitting. Headline indicates rise but visually represented by falling. Thick black line makes white area stand out over red (data).\n\n\n\n\nCritique by Albert Cairo in his post In visualization, baselines and negative space matter"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#guns2",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#guns2",
    "title": "EDS 240",
    "section": "",
    "text": "5. Test the outcomes of your graphic on others\n\nBusiness Insider published an updated graphic (originally designed by Reuters), which was submitted by a reader that, “more clearly shows that gun deaths increased between 2005 and 2007 by flipping the y-axis”:"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#critique-considerations",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#critique-considerations",
    "title": "EDS 240",
    "section": "",
    "text": "5. Test the outcomes of your graphic on others\n\n\nCritiquing a data visualization:\n\nIdentify the primary and secondary insights that the graphic is trying to convey.\nIdentify elementary perceptual tasks (e.g. comparing lengths, angles) and what is confusing or difficult to do.\nIdentify how to use more effective elementary perceptual tasks for the primary and secondary insights.\nIdentify points of confusion and decide how those could be addressed (e.g. a different graphic form, rearranging components, including an introduction graph, better annotation)\n\n\n\nAdapted from Derek L. Sonderegger’s online textbook, STA 141 - Exploratory Data Analysis and Visualization"
  },
  {
    "objectID": "slides/week3.1-choosing-graphic-forms-slides.html#end-break",
    "href": "slides/week3.1-choosing-graphic-forms-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "Take a Break\n\n\n~ This is the end of Lesson 1 (of 3) ~\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#title-slide",
    "href": "slides/week1.2-intro-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 1.2\nData visualization: an intro\n\nWeek 1 | January 8th, 2024"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#what-is-visualization1",
    "href": "slides/week1.2-intro-slides.html#what-is-visualization1",
    "title": "EDS 240",
    "section": "",
    "text": "What is data visualization?\n\n\n“…the practice of designing and creating easy-to-communicate and easy-to-understand graphic or visual representations of a large amount of complex quantitative and qualitative data and information with the help of static, dynamic or interactive visual items.”\n\n\n-from Wikipedia\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreated using {ggplot2}\n\n\n\nCreated using {gganimate}\n\n\n\nCreated using {shiny}"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#what-is-visualization2",
    "href": "slides/week1.2-intro-slides.html#what-is-visualization2",
    "title": "EDS 240",
    "section": "",
    "text": "What is data visualization?\n\n \n\n“any graphical representation of information and data”\n\n\n-Cédric Scherer, Effective Data Visualization\n\n\n\n\n“part art and part science”\n\n\n-Claus O. Wilke, Fundamentals of Data Visualization"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history1",
    "href": "slides/week1.2-intro-slides.html#history1",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nLascaux Caves in the southwest of France; Pleiades star cluster (seven sisters) also found on the cave walls"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history2",
    "href": "slides/week1.2-intro-slides.html#history2",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nTurin Papyrus Map, generally considered the oldest surviving map of topographical interest in the ancient world; was prepared for Ramses IV’s quarrying expedition to the Wadi Hammamat; the expedition purpose was to obtain blocks of stone for building statues of the king"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history3",
    "href": "slides/week1.2-intro-slides.html#history3",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history4",
    "href": "slides/week1.2-intro-slides.html#history4",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nvan Langren was a dutch mathematician / astronomer; served as royal mathematician to King Phillip IV of Spain; worked on one of the most significant problems of his time (accurate determination of longitude between Toledo & Rome, particularly navigation by sea); graph shows all available estimates in distance (inaccuracies resulted in many shipwrecks)"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history5",
    "href": "slides/week1.2-intro-slides.html#history5",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history6",
    "href": "slides/week1.2-intro-slides.html#history6",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\nWillard map maker & founder of first school for women’s higher education in the US; Temple of Time uses the architecture as a metaphor for history; foreground = present; columns represent centuries; she believed that facts must be connected to one another to be meaningful and that they will they be most easily retained if presented visually"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history7",
    "href": "slides/week1.2-intro-slides.html#history7",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nNightingale was an English wartime nurse; campaigned to improve sanitary conditions of military hospitals; collected data and created data viz; used color to emphasize particular aspects; famous “polar-area” viz shows the causes of mortality in the military hospital &gt; deaths from preventable diseases (blue) outnumbered combat fatalities (red) in 1854 & early 1855; the changes she put in place greatly reduced those deaths by April 1855 (see here)"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history8",
    "href": "slides/week1.2-intro-slides.html#history8",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history9",
    "href": "slides/week1.2-intro-slides.html#history9",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nWEB DuBois was an African American writer, scholar and activist; first African American to earn a PhD from Harvard University; helped found the National Association for the Advancement of Colored People (NAACP)."
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history10",
    "href": "slides/week1.2-intro-slides.html#history10",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nTufte: statistician & professor emeritus at Yale; nobably famous for his books on information design; pioneer in the field of data viz; this book is a classic on statistical graphics"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#history11",
    "href": "slides/week1.2-intro-slides.html#history11",
    "title": "EDS 240",
    "section": "",
    "text": "History of data visualization\n\nNote: this is by no means a comprehensive history of the visual representation of information!\n\n\nImages from BBC News, Wikipedia (a, b, c, d), Smithsonian, The Marginalian, Scientific American & Twitter\n\n\n\nR is a programming language for statistical computing and graphics\nTableau is a interactive data visualization software\nD3.js is a JavaScript library for producing dynamic, interactive data visualizations in web browsers"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#why-visualize",
    "href": "slides/week1.2-intro-slides.html#why-visualize",
    "title": "EDS 240",
    "section": "",
    "text": "Why do we visualize data?\n\n\nSpend the next few minutes discussing with your Learning Partners, and if possible, pull up some example visualizations that demonstrate your thoughts / discussion points\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#answer-qs",
    "href": "slides/week1.2-intro-slides.html#answer-qs",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to answer questions / derive insights\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRipple et al. 2023\n\nFig Caption: Unusual climate anomalies in 2023 (the red line, which appears bold in print). Sea ice extent (a, b), temperatures (c–e), and area burned in Canada (f) are presently far outside their historical ranges. These anomalies may be due to both climate change and other factors. Sources and additional details about each variable are provided in supplemental file S1. Each line corresponds to a different year, with darker gray representing later years.\n\n\nA nice Twitter thread on key takeaways from the above paper"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#exploration",
    "href": "slides/week1.2-intro-slides.html#exploration",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to explore & generate new questions\n\n\n“Exploratory data analysis (EDA) is not a formal process with a strict set of rules. More than anything, EDS is a state of mind…you should feel free to investigate every idea that occurs to you. Some of these ideas will pan out, and some will be dead ends. As your exploration continues, you will hone in on a few particularly productive insights that you’ll eventually write-up and communicate to others.”\n\n\n-Hadley Wickham, author of R for Data Science\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(mpg, aes(x = fct_reorder(class, hwy, median), y = hwy)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(diamonds, aes(x = price, y = after_stat(density))) + \n  geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#see-trends",
    "href": "slides/week1.2-intro-slides.html#see-trends",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to identify trends\n\n\nSame summary statistics, different distributions!\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnscombe’s Quartet\n(Anscombe 1973)\n\n\n\nDatasaurus Dozen\n(Matejka & Fitzmaurice 2017, expanding upon Albert Cairo’s Datasaurus)"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#prompt-discussion1",
    "href": "slides/week1.2-intro-slides.html#prompt-discussion1",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to prompt discussion\n\n\n\n\n\nWarming Strips, by Ed Hawkins"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#prompt-discussion2",
    "href": "slides/week1.2-intro-slides.html#prompt-discussion2",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to prompt discussion\n\n\n\n\n\ngif created from Antti Lipponen’s Temperature Anomolies."
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#prompt-discussion3",
    "href": "slides/week1.2-intro-slides.html#prompt-discussion3",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to prompt discussion\n\n\n\n\n\ngif created from Mark SubbaRao’s Climate Spiral. For a similar visualization with accompanying {ggplot2} code, see Nicola Rennie’s TidyTuesday contribution!"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#bremer-pathwork",
    "href": "slides/week1.2-intro-slides.html#bremer-pathwork",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to create art / tell a story\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatchwork Kingdoms, by Nadieh Bremer portraying the “digital divide” in schools across the world\n\n\n\na data & generative art charity collection for the Giga Connect project of UNICEF which aims to connect all of the schools in the world to the internet.\na dataset of 1 million schools and for ±280,000 of those they know if those schools are connected to the internet\ntook this data about the schools, split it into 1000 subsets, and turned each school into a tiny square\nupright kingdoms are schools that are already connected to the internet, while those in the hidden / upside down kingdoms are not. Each of the 1000 pieces is thereby showing the “digital divide” that still exists in our world, and the funds from this sale will help to bring more schools from the hidden to the upright kingdom."
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#astronauts",
    "href": "slides/week1.2-intro-slides.html#astronauts",
    "title": "EDS 240",
    "section": "",
    "text": ". . . to create art / tell a story\n\n\nTo enlarge, Right click &gt; Open Image in New Tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTraveling to Outer Space, by Cédric Scherer\n\n\n\n\n\n\n\n\n\n\n\n\n\nGalaxy of Astronauts, by Ijeamaka Anyene\n\n\n\n\n\n\n\n\n\n\n\n\nAges Through Time and Space, by Cara Thompson\n\n\n\n\n\nFind the data on the TidyTuesday repo"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#vertices",
    "href": "slides/week1.2-intro-slides.html#vertices",
    "title": "EDS 240",
    "section": "",
    "text": "Vertices of Visualization\n\n\n\nVertices of Communication by Albert Cairo, as presented by Cédric Scherer during his 2022 Graphic Design with ggplot2 workshop (slides)"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#r-for-data-viz",
    "href": "slides/week1.2-intro-slides.html#r-for-data-viz",
    "title": "EDS 240",
    "section": "",
    "text": "Why R for data viz?\n\n\n\n   \n\n\nI’m most comfortable in R \ngreat ecosystem of data wrangling & visualization packages (inc. a massive and growing collection of {ggplot2} extensions)\namazing online learning communities\ndata viz fundamentals apply no matter the language / tool"
  },
  {
    "objectID": "slides/week1.2-intro-slides.html#end-break",
    "href": "slides/week1.2-intro-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "Take a Break\n\n\n~ This is the end of Lesson 2 (of 3) ~\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#title-slide",
    "href": "slides/week6.1-good-viz-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 6.1\nWhat makes a good data viz?\n\nWeek 6 | February 12th, 2024"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#credit",
    "href": "slides/week6.1-good-viz-slides.html#credit",
    "title": "EDS 240",
    "section": "",
    "text": "Looking for inspiration?\n\n\n\n\n\nMuch of the following content was borrowed from Cédric Scherer’s talk, Effective Data Visualization and his Graphic Design with ggplot2 workshop from rstudio::conf(2022). If you yet haven’t checked out his work …you should!!!!\n\nHe has a ton of awesome blog posts, shares code from his extensive portfolio of #TidyTuesday creations, and has given lots of online (recorded) talks and workshops about his {ggplot2} and data visualization work."
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#bad-data-viz",
    "href": "slides/week6.1-good-viz-slides.html#bad-data-viz",
    "title": "EDS 240",
    "section": "",
    "text": "What makes a bad data visualization?\n\n \n\n substantive problems (bad data)\n\n\n perceptual problems (bad perception)\n\n\n aesthetic problems (bad design)"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#good-data-viz",
    "href": "slides/week6.1-good-viz-slides.html#good-data-viz",
    "title": "EDS 240",
    "section": "",
    "text": "What makes a good data visualization?\n\n \n\n informative (centers data integrity)\n\n\n story (is it interesting? how will your message be perceived?)\n\n\n visual form (is it beautiful?)\n\n\n\n\nWhile it’s impossible to prescribe a simple set of rules for creating a “good” data visualization, we’ll introduce some important considerations to keep in mind."
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#data-samples1",
    "href": "slides/week6.1-good-viz-slides.html#data-samples1",
    "title": "EDS 240",
    "section": "",
    "text": "Understand your data & be accurate\n\nThis has less to do with the physical act of creating data viz and everything to do with your own critical examination of your data and domain expertise. Two important reminders:\n\n\n\n\n\nOur data is never a perfect reflection of the real world – our data is always a sample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#data-samples2",
    "href": "slides/week6.1-good-viz-slides.html#data-samples2",
    "title": "EDS 240",
    "section": "",
    "text": "Understand your data & be accurate\n\nThis has less to do with the physical act of creating data viz and everything to do with your own critical examination of your data and domain expertise. Two important reminders:\n\n\n\n\nOur data is never a perfect reflection of the real world – our data is always a sample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#what-isnt-true",
    "href": "slides/week6.1-good-viz-slides.html#what-isnt-true",
    "title": "EDS 240",
    "section": "",
    "text": "Understand your data & be accurate\n\nThis has less to do with the physical act of creating data viz and everything to do with your own critical examination of your data and domain expertise. Two important reminders:\n\n\n\n\nOur data is never a perfect reflection of the real world – our data is always a sample\n\n\n\nThe best use of data is to teach us what isn’t true – you should be challenging yourself to find out something with your data, not to show that your assumptions about what you’ll find are true\n\n\n\n\n\n\n\n\n\n\n\n\nAvoiding Data Pitfalls, by Ben Jones\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#id-audience",
    "href": "slides/week6.1-good-viz-slides.html#id-audience",
    "title": "EDS 240",
    "section": "",
    "text": "Identify your audience\n\n\n\nTo tell a clear story, you need to know your audience\n\n\n\n\nWhich story is interesting for them?\nWhat are relevant details to include?\nWhich variables are meaningful to them?\nHow will they encounter the visualization?\nDo I need a visualization at all?\n\n\n\n\n\n\nData viz can look wildly different depending on how you answer the above questions!\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#warming-stripes",
    "href": "slides/week6.1-good-viz-slides.html#warming-stripes",
    "title": "EDS 240",
    "section": "",
    "text": "Consider the audience (Ex. 1)\n\n\n\nEd Hawkins’ Warming Stripes could technically be considered a “bad” data viz (e.g. no axes, legend, etc.), yet it’s become one of the most recognizable climate visualizations created.\n\nInformative | Story | Visual Form\n\n\nElicits emotion. Vertical stripes have become synonymous with temperature."
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#plants",
    "href": "slides/week6.1-good-viz-slides.html#plants",
    "title": "EDS 240",
    "section": "",
    "text": "Consider the audience (Ex. 2)\n\n\nPlants in Danger, by Cédric Scherer (code)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAudience?\n\n\nInformative | Story | Visual Form\n\n\n\n\n−+\n02:00"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#hockey-stick",
    "href": "slides/week6.1-good-viz-slides.html#hockey-stick",
    "title": "EDS 240",
    "section": "",
    "text": "Consider the audience (Ex. 3)\n\n\n“Hockey Stick” graph, by Mann et al. (1999)\n\n\n\nAudience?\n\n\n\n\n−+\n02:00\n\n\n\n\nInformative | Story | Visual Form\n\n\nData from thermometers (red) and from tree rings, corals, ice cores, and historical records (blue)."
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#kirk",
    "href": "slides/week6.1-good-viz-slides.html#kirk",
    "title": "EDS 240",
    "section": "",
    "text": "Our choices affect how viewers perceive and interpret information\n\n\n\n\n\nScheme by Andy Kirk from his book Data Visualisation: A Handbook for Data Driven Design, recreated by Cédric Scherer"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#migration-original",
    "href": "slides/week6.1-good-viz-slides.html#migration-original",
    "title": "EDS 240",
    "section": "",
    "text": "Design choices influence viewers’ perception\n\n\nHow maps in the media make us more negative about migrants, by Maite Vermulen, Leon De Korte, and Henk Van Houtum\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\nArrows reminiscent of battle map\nRed = color of danger\nLARGE, direct arrows (larger than most countries)\nTitle language portrays criminal activity\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#migration-blue",
    "href": "slides/week6.1-good-viz-slides.html#migration-blue",
    "title": "EDS 240",
    "section": "",
    "text": "Design choices influence viewers’ perception\n\n\nHow maps in the media make us more negative about migrants, by Maite Vermulen, Leon De Korte, and Henk Van Houtum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#migration-blue-sm-arrows",
    "href": "slides/week6.1-good-viz-slides.html#migration-blue-sm-arrows",
    "title": "EDS 240",
    "section": "",
    "text": "Design choices influence viewers’ perception\n\n\nHow maps in the media make us more negative about migrants, by Maite Vermulen, Leon De Korte, and Henk Van Houtum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#migration-blue-circles",
    "href": "slides/week6.1-good-viz-slides.html#migration-blue-circles",
    "title": "EDS 240",
    "section": "",
    "text": "Design choices influence viewers’ perception\n\n\nHow maps in the media make us more negative about migrants, by Maite Vermulen, Leon De Korte, and Henk Van Houtum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#migration-bar",
    "href": "slides/week6.1-good-viz-slides.html#migration-bar",
    "title": "EDS 240",
    "section": "",
    "text": "Design choices influence viewers’ perception\n\n\nHow maps in the media make us more negative about migrants, by Maite Vermulen, Leon De Korte, and Henk Van Houtum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#select-graphic-forms1",
    "href": "slides/week6.1-good-viz-slides.html#select-graphic-forms1",
    "title": "EDS 240",
    "section": "",
    "text": "Select graphic forms that help to tell your story\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\nData visualizations map values onto quantifiable features (aesthetics)\n\n      \n\n Albert Cairo’s recreation of Cleveland & McGill’s Hierarchy of Elementary Perceptual Tasks\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#select-graphic-forms2",
    "href": "slides/week6.1-good-viz-slides.html#select-graphic-forms2",
    "title": "EDS 240",
    "section": "",
    "text": "Select graphic forms that help to tell your story\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\nData visualizations map values onto quantifiable features (aesthetics)\nBut a world of just bar & line plots would be incredibly boring…\n\n    \n\n Albert Cairo’s recreation of Cleveland & McGill’s Hierarchy of Elementary Perceptual Tasks\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.1-good-viz-slides.html#select-graphic-forms-ex",
    "href": "slides/week6.1-good-viz-slides.html#select-graphic-forms-ex",
    "title": "EDS 240",
    "section": "",
    "text": "Select graphic forms that help to tell your story\n\n\n\n\n\n\n\n\n\n\n\n\n\nAustralian Fires, by Cédric Scherer (code)\n(puts scale of fires into something more familiar)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNot my cup of coffee, by Cédric Scherer (code)\n(combines many different aesthetics)\n\n\n\n\nInformative | Story | Visual Form"
  },
  {
    "objectID": "slides/week6.2-tbd.html#title-slide",
    "href": "slides/week6.2-tbd.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 6.2\ntbd\n\nWeek 6 | February 12th, 2024"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#title-slide",
    "href": "slides/week4.1-rankings-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 4.1\nVisualizing rankings\n\nWeek 4 | January 29th, 2024"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#data-ranking",
    "href": "slides/week4.1-rankings-slides.html#data-ranking",
    "title": "EDS 240",
    "section": "",
    "text": "Visualizing data rankings?\n\n  \nShowing the relationship between a numeric and categorical variable, i.e. comparing categorical groups based on their numeric values."
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#roadmap",
    "href": "slides/week4.1-rankings-slides.html#roadmap",
    "title": "EDS 240",
    "section": "",
    "text": "Roadmap\n\n\nIn this lesson, we’ll explore two (highly interchangeable) chart types:\n\n1. bar plots\n2. lollipop plots\n\n\nWe’ll discuss:\n\n\nhandling long x-axis labels\nreordering groups\nadding labels\ncomparing multiple groups\ncritical considerations when creating bar/lollipop plots"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#job-data",
    "href": "slides/week4.1-rankings-slides.html#job-data",
    "title": "EDS 240",
    "section": "",
    "text": "The data: women in the workforce\n\nAccording to the American Association of University Women (AAUW), the gender pay gap is defined as “…the gap between what men and women are paid. Most commonly, it refers to the median annual pay of all women who work full time and year-round, compared to the pay of a similar cohort of men.” We’ll explore income data from the Bureau of Labor Statistics and the Census Bureau, which has been moderately pre-processed by TidyTuesday organizers for the March 5, 2021 data set.\n\n\n\nWe’ll use these data to explore a two different questions: (1) What are the top 10 occupations with the highest median earnings (across males and females)? (2) How do median earnings differ between males and females in those same occupations?"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#data-wrangling",
    "href": "slides/week4.1-rankings-slides.html#data-wrangling",
    "title": "EDS 240",
    "section": "",
    "text": "Data wrangling\n\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(tidyverse)\n\n#..........................import data...........................\njobs &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv\")\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                wrangle data                              ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\njobs_clean &lt;- jobs |&gt; \n  \n  # add cols (needed for dumbbell plot) ----\n  mutate(percent_male = 100 - percent_female, # % of females within each industry was already included\n         difference_earnings_male_female = total_earnings_male - total_earnings_female) |&gt;  # diff in earnings between M & F\n  \n  # rearrange columns ----\n  relocate(year, major_category, minor_category, occupation,\n          total_workers, workers_male, workers_female,\n          percent_male, percent_female,\n          total_earnings, total_earnings_male, total_earnings_female, difference_earnings_male_female,\n          wage_percent_of_male) |&gt; \n  \n  # drop rows with missing earning data ----\n  drop_na(total_earnings_male, total_earnings_female) |&gt; \n  \n  # make occupation a factor ----\n  mutate(occupation = as_factor(occupation)) |&gt; \n  \n  # ---- these next steps are necessary for creating our dumbbell plots ----\n\n  # classify jobs by percentage male or female ----\n  mutate(percentage_group_long = case_when(\n    percent_female &gt;= 75 ~ \"Occupations that are 75%+ female\",\n    percent_female &gt;= 45 & percent_female &lt;= 55 ~ \"Occupations that are 45-55% female\",\n    percent_male &gt;= 75 ~ \"Occupations that are 75%+ male\"\n  )) |&gt; \n  \n  # column with short names for groups ----\n  mutate(percentage_group_short = case_when(\n    percent_female &gt;= 75 ~ \"f75\",\n    percent_female &gt;= 45 & percent_female &lt;= 55 ~ \"f50\",\n    percent_male &gt;= 75 ~\"m75\"\n  ))"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#bar-lolli-1group",
    "href": "slides/week4.1-rankings-slides.html#bar-lolli-1group",
    "title": "EDS 240",
    "section": "",
    "text": "Bar & lollipop plots to visualize rankings\n\nLet’s first explore the top ten occupations with the highest median earnings in 2016 (full-time workers &gt; 16 years old). The heights of both the bars and lollipops represent the total estimated median earnings (total_earnings).\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; # filter for just 2016\n  slice_max(order_by = total_earnings, n = 10) |&gt; # keep top 10 jobs with most `total_earnings`\n  ggplot(aes(x = occupation, y = total_earnings)) +\n  geom_col()\n\n\n\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = occupation, y = total_earnings)) +\n  ggalt::geom_lollipop()"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#coord-flip-theme",
    "href": "slides/week4.1-rankings-slides.html#coord-flip-theme",
    "title": "EDS 240",
    "section": "",
    "text": "Make space for long x-axis labels\n\nGive those long x-axis labels some breathing room using coord_flip(), which flips cartesian (x,y) coordinates so that the horizontal becomes the vertical and vice versa.\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = occupation, y = total_earnings)) +\n  geom_col() +\n  coord_flip()\n\n\n\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = occupation, y = total_earnings)) +\n  ggalt::geom_lollipop() +\n  coord_flip()"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#arrange-bars",
    "href": "slides/week4.1-rankings-slides.html#arrange-bars",
    "title": "EDS 240",
    "section": "",
    "text": "Reordering groups helps readers derive insight\n\nHere, we use forcats::fct_reorder() to reorder the levels of our x-axis variable, occupation, based on a numeric variable, total_earnings (NOTE: we do not have to reorder based on the same numeric variable that’s plotted on the y-axis; here it makes sense to do so; also see this blog post):\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings)) +\n  geom_col() +\n  coord_flip()\n\n\n\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings)) +\n  ggalt::geom_lollipop() +\n  coord_flip()"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#add-labels",
    "href": "slides/week4.1-rankings-slides.html#add-labels",
    "title": "EDS 240",
    "section": "",
    "text": "Consider adding labels if the exact values are important\n\ngeom_text() is useful for labeling plots. Here, we pair it with the {scales} package to format dollar values:\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings)) +\n  geom_col() +\n  geom_text(aes(label = scales::dollar(total_earnings)), hjust = 1.2, color = \"white\") + \n  coord_flip()\n\n\n\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = total_earnings)) +\n  ggalt::geom_lollipop() +\n  geom_text(aes(label = scales::dollar(total_earnings)), hjust = -0.2) + \n  scale_y_continuous(limits = c(0, 250000)) + # expand axis to make room for values\n  coord_flip()\n\n\n\n\n\n\n\nFor some more advanced label manipulation, see A Quick How-to on Labelling Bar Graphs in ggplot2, by Cédric Scherer"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#col-vs-bar",
    "href": "slides/week4.1-rankings-slides.html#col-vs-bar",
    "title": "EDS 240",
    "section": "",
    "text": "An aside: geom_col() vs. geom_bar()\n\n\n\nUse geom_col() when your data is already summarized or you have a variable in your data set that includes y-axis values, which will map to the height of the bars. E.g. we already have a numeric variable in our data set called, total_earnings – those numeric values are mapped to the height of each bar in our plot.\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  ggplot(aes(x = occupation, y = total_earnings)) +\n  geom_col() +\n  coord_flip()\n\n\n\n\n\nUse geom_bar() if you want to ggplot to count up numbers of rows and map those counts to the height of bars in your plot. E.g. we want to know how many occupations are included for each major category in our jobs_gender_clean data set (NOTE: we don’t have a count column in our data frame):\n\nggplot(jobs_clean, aes(x = major_category)) +\n  geom_bar() + \n  coord_flip()"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#more-cat-groups",
    "href": "slides/week4.1-rankings-slides.html#more-cat-groups",
    "title": "EDS 240",
    "section": "",
    "text": "Plotting 2+ groups (e.g. male vs. female earnings)\n\nWe’ll need to transform our data from wide to long format, where total earning for males and females are in the same column (we’ll name this earnings_by_group), and a secondary column denotes which group those earnings are associated with (total_earnings_female, total_earnings_male). Also note that because geom_lollipop() doesn’t accept a position parameter, we’ll instead use geom_linerange() + geom_point():\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = \"group\", values_to = \"earnings_by_group\") |&gt; # wide to long (male vs female earnings)\n  mutate(sex = str_remove(group, pattern = \"total_earnings_\")) |&gt; # remove part of string, leaving only \"male\" or \"female\" in `sex` column \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = earnings_by_group, fill = sex)) + \n  geom_col() + # default `position = \"stack\"`\n  coord_flip()\n\n\n\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = \"group\", values_to = \"earnings_by_group\") |&gt; # wide to long (male vs female earnings)\n  mutate(sex = str_remove(group, pattern = \"total_earnings_\")) |&gt; # remove part of string, leaving only \"male\" or \"female\" in `sex` column \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = earnings_by_group, color = sex)) +\n  geom_point() + # default `position = \"stack\"`\n  geom_linerange(aes(xmin = occupation, xmax = occupation, ymin = 0, ymax = earnings_by_group)) + # default `position = \"stack\"`\n  coord_flip()"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#dodge",
    "href": "slides/week4.1-rankings-slides.html#dodge",
    "title": "EDS 240",
    "section": "",
    "text": "Plot groups side-by-side\n\nUpdate position = \"dodge\" or position = position_dodge() (which allows you to specify additional arguments about how dodging occurs):\n\n\n\njobs_clean |&gt; \n  filter(year == 2016) |&gt; \n  slice_max(order_by = total_earnings, n = 10) |&gt; \n  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = \"group\", values_to = \"earnings_by_group\") |&gt; \n  mutate(sex = str_remove(group, pattern = \"total_earnings_\")) |&gt; \n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = earnings_by_group, fill = sex)) +\n  geom_col(position = position_dodge()) +\n  coord_flip()\n\n\n\n\n\n\njobs_clean |&gt;\n  filter(year == 2016) |&gt;\n  slice_max(order_by = total_earnings, n = 10) |&gt;\n  pivot_longer(cols = c(total_earnings_female, total_earnings_male), names_to = \"group\", values_to = \"earnings_by_group\") |&gt;\n  mutate(sex = str_remove(group, pattern = \"total_earnings_\")) |&gt;\n  ggplot(aes(x = fct_reorder(occupation, total_earnings), y = earnings_by_group, color = sex)) +\n  geom_point(position = position_dodge(width = 0.5)) +\n  geom_linerange(aes(xmin = occupation, xmax = occupation, \n                     ymin = 0, ymax = earnings_by_group),\n                 position = position_dodge(width = 0.5)) +\n  coord_flip()"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#truncated-axis",
    "href": "slides/week4.1-rankings-slides.html#truncated-axis",
    "title": "EDS 240",
    "section": "",
    "text": "IMPORTANT: Avoid truncated axes\n\n\nThe axis of a bar (or related) plot must start at zero\n\nTruncated axes leads viewers to perceive illustrated differences as larger or more important than they actually are (i.e. a truncation effect). Yang et al. 2021 empirically tested this effect and found that this truncation effect persisted even after viewers were taught about the effects of y-axis truncation.\n\n\n\nFigure 2 from Yang et al. 2021. The left-most plot without a truncated y-axis was presented to the control group of viewers. The right-most plot with a truncated y-axis was presented to the test group of viewers.\n\n\n\nYang et al. (2021) Truncating bar graphs persistently misleads viewers. Journal of Applied Research in Memory and Cognition 10:2, 298-311. https://doi.org/10.1016/j.jarmac.2020.10.002"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#cat-not-cont",
    "href": "slides/week4.1-rankings-slides.html#cat-not-cont",
    "title": "EDS 240",
    "section": "",
    "text": "IMPORTANT: Bar (& related) plots are for categorical data\n\nBar charts were designed for categorical data. but they’re often (incorrectly) used to visualize continuous data. Weissgerber et al. (2015) cautions against this popular practice, since many different data distributions can lead to the same bar plots.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1 from Weissgerber et al. 2015, which illustrates how many different data distributions can lead to the same bar plots\n\n\n\n\n\n\n\n\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\n\nWeissgerber et al. (2015) Beyond Bar and Line Graphs: Time for a New Data Presentation Paradigm. PLOS Biology 13:e1002128.\nhttps://doi.org/10.1371/journal.pbio.1002128"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#dumbbell-plot",
    "href": "slides/week4.1-rankings-slides.html#dumbbell-plot",
    "title": "EDS 240",
    "section": "",
    "text": "Lollipop variant: dumbbell plot\n\nDumbbell plots can be a really simple and intuitive way to visualize a change or difference in two sets of data points:\n\nWe can make dumbbell plots using a combination of geom_segment() and geom_point().\n\nSee note: https://stackoverflow.com/questions/35322919/grouped-data-by-factor-with-geom-segment\n“You can think of geom_linerange() as a convenient version of geom_segment for a specific use case. geom_segment() is for when you need to draw arbitrary line segments in a fairly non-systematic way. geom_linerange() is for the specific case of a collection of vertical bars at specified x values with different lengths (e.g. error bars, etc)”"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#dumbbell-plot-subset",
    "href": "slides/week4.1-rankings-slides.html#dumbbell-plot-subset",
    "title": "EDS 240",
    "section": "",
    "text": "Subset occupation data\n\nLet’s say we want to explore differences in male vs. female median salaries across occupations that are female dominated (75%+ female), male dominated (75%+ male), and those that are a relatively even split (45-55% female). Let’s first randomly select 10 occupations from each of those categories:\n\n#....guarantee the same random samples each time we run code.....\nset.seed(123)\n\n#.........get 10 random jobs that are 75%+ female (2016).........\nf75 &lt;- jobs_clean |&gt; \n  filter(year == 2016,\n         percentage_group_short == \"f75\") |&gt; \n  slice_sample(n = 10)\n\n#..........get 10 random jobs that are 75%+ male (2016)..........\nm75 &lt;- jobs_clean |&gt; \n  filter(year == 2016,\n         percentage_group_short == \"m75\") |&gt; \n  slice_sample(n = 10)\n\n#........get 10 random jobs that are 45-55%+ female (2016).......\nf50 &lt;- jobs_clean |&gt; \n  filter(year == 2016,\n         percentage_group_short == \"f50\") |&gt; \n  slice_sample(n = 10)\n\n#..........................combine dfs...........................\nsubset_jobs &lt;- rbind(f75, m75, f50) |&gt; \n  \n  # relevel factors (for plotting order) ----\n  mutate(percentage_group_short = fct_relevel(percentage_group_short, \"f75\", \"f50\", \"m75\"),\n         percentage_group_long = fct_relevel(percentage_group_long, \"Occupations that are 75%+ female\", \n                                             \"Occupations that are 45-55% female\", \"Occupations that are 75%+ male\"))"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#dumbbell-plot-create",
    "href": "slides/week4.1-rankings-slides.html#dumbbell-plot-create",
    "title": "EDS 240",
    "section": "",
    "text": "Create dumbbell plot\n\n\nggplot(subset_jobs) +\n  \n  # create dumbbells ----\n  geom_segment(aes(x = total_earnings_female, xend = total_earnings_male, \n                   y = fct_reorder(occupation, total_earnings), yend = occupation)) + # reorder occupation by avg_salary here\n  geom_point(aes(x = total_earnings_male, y = occupation), color = \"#CD93D8\", size = 2.5) +\n  geom_point(aes(x = total_earnings_female, y = occupation), color = \"#6A1E99\", size = 2.5) +\n  \n  # facet wrap by group ----\n  facet_wrap(~percentage_group_long, nrow = 3, scales = \"free_y\") + # \"free_y\" plots only the axis labels that exist in each group\n  \n  # axis breaks & $ labels ----\n  scale_x_continuous(labels = scales::label_dollar(scale = 0.001, suffix = \"k\"),\n                     breaks = c(25000, 50000, 75000, 100000, 125000))"
  },
  {
    "objectID": "slides/week4.1-rankings-slides.html#end-break",
    "href": "slides/week4.1-rankings-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "Take a Break\n\n\n~ This is the end of Lesson 1 (of 3) ~\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#title-slide",
    "href": "slides/week3.2-distributions-slides.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Lecture 3.2\nVisualizing distributions\n\nWeek 3 | January 22nd, 2024"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#what-is-dist",
    "href": "slides/week3.2-distributions-slides.html#what-is-dist",
    "title": "EDS 240",
    "section": "",
    "text": "Visualizing data distribution?\n\n   \n\n\nVisualizing the spread of a numeric variable(s)"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#viz-dist",
    "href": "slides/week3.2-distributions-slides.html#viz-dist",
    "title": "EDS 240",
    "section": "",
    "text": "“Core” distribution chart types\n\n\n\n\nHistograms\n\n\n\n\n\n\n\n\n\n\n\n\nDensity plots\n\n\n\n\n\n\n\n\n\n\n\n\nRidgeline plots\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBox plots\n\n\n\n\n\n\n\n\n\n\n\n\nViolin plots\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples show the distribution of penguin body masses (g) for Adelie, Chinstrap & Gentoo penguins."
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#mko-temps-intro",
    "href": "slides/week3.2-distributions-slides.html#mko-temps-intro",
    "title": "EDS 240",
    "section": "",
    "text": "The data: bottom temperatures at Mohawk Reef\n\nThe Santa Barbara Coastal Long Term Ecolgical Research (SBC LTER) site was established in 2000 to understand the ecology of coastal kelp forest ecosystems. A number of coastal rocky reef sites are outfitted with instrumentation that collect long-term monitoring data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll be exploring bottom temperatures recorded at Mohawk Reef, a near-shore rocky reef and one of the Santa Barbara Coastal (SBC) LTER research sites."
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#mko-temps-wrangling",
    "href": "slides/week3.2-distributions-slides.html#mko-temps-wrangling",
    "title": "EDS 240",
    "section": "",
    "text": "Data wrangling\n\nData are imported directly from the EDI Data Portal. Explore the metadata package online to learn more about these data.\n\n#..........................load packages.........................\nlibrary(tidyverse)\nlibrary(chron)\nlibrary(naniar)\n\n#..........................import data...........................\nmko &lt;- read_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa\")\n\n#..........................wrangle data..........................\nmko_clean &lt;- mko |&gt;\n\n  # keep only necessary columns ----\n  select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |&gt;\n\n  # create datetime column ----\n  unite(date, year, month, day, sep = \"-\", remove = FALSE) |&gt;\n  mutate(time = chron::times(as.numeric(decimal_time))) |&gt;\n  unite(date_time, date, time, sep = \" \") |&gt;\n\n  # coerce data types ----\n  mutate(date_time = as.POSIXct(date_time, \"%Y-%m-%d %H:%M:%S\", tz = \"GMT\"),\n         year = as.factor(year),\n         month = as.factor(month),\n         day = as.numeric(day),\n         Temp_top = as.numeric(Temp_top),\n         Temp_mid = as.numeric(Temp_mid),\n         Temp_bot = as.numeric(Temp_bot)) |&gt;\n\n  # add month abbreviation ----\n  mutate(month_name = as.factor(month.name[month])) |&gt;\n\n  # replace 9999s with NAs ----\n  replace_with_na(replace = list(Temp_bot = 9999, Temp_top = 9999, Temp_mid = 9999)) |&gt;\n\n  # select/reorder desired columns ----\n  select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)\n\n#......................explore missing data......................\n\n# counts and percentage of missing data by year ----\nsee_NAs &lt;- mko_clean %&gt;%\n  group_by(year) %&gt;%\n  naniar::miss_var_summary() |&gt;\n  filter(variable == \"Temp_bot\")\n\n# visualize missing Temp_bot ----\nbottom &lt;- mko_clean |&gt; select(Temp_bot)\nmissing_temps &lt;- naniar::vis_miss(bottom)"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#hist-overview",
    "href": "slides/week3.2-distributions-slides.html#hist-overview",
    "title": "EDS 240",
    "section": "",
    "text": "Histograms - ggplot2::geom_histogram()\n\nWhat are they?\n\nHistograms are used to represent the distribution of a numeric variable(s), which is cut into several bins. The number of observations per bin is represented by the height of the bar.\n\n\n\nNeed:\n\na numeric variable with lots of values\nmeaningful differences between values\n\nImportant considerations:\n\nbin width (30 bins by default)\nnumber of groups that you’re comparing (generally &lt;=3 is best)"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#hist-group-num",
    "href": "slides/week3.2-distributions-slides.html#hist-group-num",
    "title": "EDS 240",
    "section": "",
    "text": "Histograms - avoid plotting too many groups\n\nTwelve groups (month_name) is too many groups!\n\nmko_clean |&gt; \n  mutate(month_name = factor(month_name, levels = month.name)) |&gt; \n  ggplot(aes(x = Temp_bot, fill = month_name)) +\n  geom_histogram(position = \"identity\", alpha = 0.5)"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#hist-updates",
    "href": "slides/week3.2-distributions-slides.html#hist-updates",
    "title": "EDS 240",
    "section": "",
    "text": "Histograms - adjustments\n\n\nSmall multiplesFewer groupsAdjust colorsModify bin widths\n\n\nIf you want to plot all groups, consider splitting them into small multiples. If so, does color add any valuable information? Remove if not:\n\nmko_clean |&gt; \n  mutate(month_name = factor(month_name, levels = month.name)) |&gt; \n  ggplot(aes(x = Temp_bot)) +\n  geom_histogram(position = \"identity\") +\n  facet_wrap(~month_name)\n\n\n\n\n\n\nLet’s instead compare just three months: April (generally the coldest month), October (generally a hot month), June (somewhere in between):\n\nmko_clean |&gt; \n  mutate(month_name = factor(month_name, levels = month.name)) |&gt; \n  filter(month_name %in% c(\"April\", \"June\", \"October\")) |&gt; \n  ggplot(aes(x = Temp_bot, fill = month_name)) + # piping data into ggplot, so don't need to define `data` arg\n  geom_histogram(position = \"identity\", alpha = 0.5)\n\n\n\n\n\n\nUse fill to fill bars with a specified color(s) and color to outline bars with a specified color(s):\n\nmko_clean |&gt; \n  mutate(month_name = factor(month_name, levels = month.name)) |&gt; \n  filter(month_name %in% c(\"April\", \"June\", \"October\")) |&gt; \n  ggplot(aes(x = Temp_bot, fill = month_name)) + \n  geom_histogram(position = \"identity\", alpha = 0.5,  color = \"black\") +\n  scale_fill_manual(values = c(\"#2C5374\", \"#ADD8E6\", \"#8B3A3A\"))\n\n\n\n\n\n\nModify binwidth (30 bins by default) – does a bin width of 1 (degree Celsius) actually make sense? Consider scale of interest.\n\nmko_clean |&gt; \n  filter(month_name %in% c(\"April\", \"June\", \"October\")) |&gt; \n  mutate(month_name = factor(month_name, levels = month.name)) |&gt; \n  ggplot(aes(x = Temp_bot, fill = month_name)) +\n  geom_histogram(position = \"identity\", alpha = 0.5, binwidth = 1) +\n  scale_fill_manual(values = c(\"#2C5374\", \"#ADD8E6\", \"#8B3A3A\"))"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#density-overview",
    "href": "slides/week3.2-distributions-slides.html#density-overview",
    "title": "EDS 240",
    "section": "",
    "text": "Density plots - ggplot2::geom_density()\n\nWhat are they?\n\nA smoothed version of a histogram. Density plots are representations of the distribution of a numeric variable(s), which uses a kernel density estimate (KDE) to show the probability density function of the variable. The area under each curve is equal to 1.\n\n\n\nNeed:\n\na numeric variable with lots of values\n\nImportant considerations:\n\ncan be misleading with small data sets\nband width, which affects level of smoothing\nnumber of groups that you’re comparing (generally &lt;=3 is best)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out this cool interactive tool, by Matthew Conlen, for a succinct and clear explanation of KDE."
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#density-group-num",
    "href": "slides/week3.2-distributions-slides.html#density-group-num",
    "title": "EDS 240",
    "section": "",
    "text": "Density plots - avoid plotting too many groups\n\nSimilar to the histogram, twelve groups (month_name) is too many groups! Consider small multiples (using facet_wrap()) if you want to keep all groups.\n\nggplot(mko_clean, aes(x = Temp_bot, fill = month_name)) +\n  geom_density(alpha = 0.5)"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#density-updates",
    "href": "slides/week3.2-distributions-slides.html#density-updates",
    "title": "EDS 240",
    "section": "",
    "text": "Density plots - adjustments\n\n\nFewer groupsModify band widths\n\n\nLet’s instead compare three months: April (generally the coldest month), October (generally a hot month), June (somewhere in between):\n\nmko_clean |&gt; \n  filter(month_name %in% c(\"April\", \"June\", \"October\")) |&gt; \n  ggplot(aes(x = Temp_bot, fill = month_name)) +\n  geom_density(alpha = 0.5) + \n  scale_fill_manual(values = c(\"#2C5374\", \"#ADD8E6\", \"#8B3A3A\"))\n\n\n\n\n\n\nModify bandwidth by declaring a multiplier of the default bandwidth adjustment. Reducing the adjust argument reduces the amount of smoothing (default adjust = 1):\n\nmko_clean |&gt; \n  filter(month_name %in% c(\"April\", \"June\", \"October\")) |&gt; \n  ggplot(aes(x = Temp_bot, fill = month_name)) +\n  geom_density(alpha = 0.5, adjust = 1/2) + \n  scale_fill_manual(values = c(\"#2C5374\", \"#ADD8E6\", \"#8B3A3A\"))"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#density-hist-combo",
    "href": "slides/week3.2-distributions-slides.html#density-hist-combo",
    "title": "EDS 240",
    "section": "",
    "text": "Combining geoms - histogram & density plot\n\nOverlaying a histogram and density plot requires scaling down the histogram to match the density curve scale. Adding y = ..density.. within the aes() function rescales the histogram counts so that bar areas integrate to 1:\n\nggplot(mko_clean, aes(x = Temp_bot, y = ..density..)) + # scale down hist to match density curve\n  geom_histogram(fill = \"gray\", color = \"black\", alpha = 0.75) +\n  geom_density(size = 1) # increase line thickness\n\n\n\nSee https://stackoverflow.com/questions/46734555/ggplot2-histogram-why-do-y-density-and-stat-density-differ"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#ridgeline-overview",
    "href": "slides/week3.2-distributions-slides.html#ridgeline-overview",
    "title": "EDS 240",
    "section": "",
    "text": "Ridgeline plots - {ggridges}\n\nWhat are they?\n\nRidgeline plots show the distribution of a numeric variable for multiple groups.\n\n\n\nNeed:\n\na numeric variable with lots of values\nmedium to high group numbers\n\nImportant considerations:\n\nwork best when you have &gt; 6 groups\nworks well when there is a clear pattern in the result (e.g. if there is an obvious ranking in groups) and/or when visualizing changes in distributions over time or space"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#ridgeline-groups",
    "href": "slides/week3.2-distributions-slides.html#ridgeline-groups",
    "title": "EDS 240",
    "section": "",
    "text": "Ridgeline plots - good for multiple groups\n\nThe {ggridges} package has a number of different geoms for creating ridgeline plots that work well for datasets with larger group numbers (e.g. month_name). Two great geoms to explore (to start):\n\n\ngeom_density_ridges() to create a basic ridgeline plot:\n\nggplot(mko_clean, aes(x = Temp_bot, y = month_name)) +\n  ggridges::geom_density_ridges()\n\n\n\n\n\ngeom_density_ridges_gradient() to fill with a color gradient:\n\nggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +\n  ggridges::geom_density_ridges_gradient() +\n  scale_fill_gradientn(colors = c(\"#2C5374\",\"#778798\", \"#ADD8E6\", \"#EF8080\", \"#8B3A3A\"))"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#ridgeline-adjustments",
    "href": "slides/week3.2-distributions-slides.html#ridgeline-adjustments",
    "title": "EDS 240",
    "section": "",
    "text": "Ridgeline plots - adjustments\n\n\nGroup orderOverlap & tailsHistogram variantQuantilesJitter raw data\n\n\n\n\nOrder by month (ideal, since months have an inherent order):\n\nggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +\n  ggridges::geom_density_ridges_gradient() +\n  scale_y_discrete(limits = rev(month.name)) +\n  scale_fill_gradientn(colors = c(\"#2C5374\",\"#778798\", \"#ADD8E6\", \"#EF8080\", \"#8B3A3A\"))\n\n\n\n\n\nOrder by mean or median (makes more sense when you have unordered groups):\n\nmko_clean |&gt; \n  mutate(month_name = fct_reorder(month_name, Temp_bot, .fun = mean)) |&gt; \n  ggplot(mko_clean, mapping = aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +\n  ggridges::geom_density_ridges_gradient() +\n  scale_fill_gradientn(colors = c(\"#2C5374\",\"#778798\", \"#ADD8E6\", \"#EF8080\", \"#8B3A3A\"))\n\n\n\n\n\n\n\n\nrel_min_height adjusts trailing tails and scale controls the extent to which the different densities overlap)\n\nggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +\n  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +\n  scale_y_discrete(limits = rev(month.name)) +\n  scale_fill_gradientn(colors = c(\"#2C5374\",\"#778798\", \"#ADD8E6\", \"#EF8080\", \"#8B3A3A\"))\n\n\n\n\n\n\nMake ridgeline plots using histogram bars by updating the stat to \"binline\"(filling with a continous scale gradient not advised):\n\nggplot(mko_clean, aes(x = Temp_bot, y = month_name)) +\n  ggridges::geom_density_ridges(rel_min_height = 0.01, scale = 3,\n                                stat = \"binline\", binwidth = 1) +\n  scale_y_discrete(limits = rev(month.name)) \n\n\n\n\n\n\nInclude a median line by using the stat_density_ridges() geom and setting the number of quantiles to 2:\n\nggplot(mko_clean, aes(x = Temp_bot, y = month_name)) +\n  ggridges::stat_density_ridges(rel_min_height = 0.01, scale = 3,\n                                quantile_lines = TRUE, quantiles = 2) +\n  scale_y_discrete(limits = rev(month.name))\n\n\n\n\n\n\nVisualize the raw data underlying the density ridges (since our temperature data is too large (&gt;473,000 rows), so we’ll use the palmerpenguins::penguins data set to demo):\n\n\n\nJittered points\n\n\nggplot(penguins, aes(x = body_mass_g, y = species)) +\n  ggridges::geom_density_ridges(jittered_points = TRUE, \n                                alpha = 0.5, point_size = 0.5)\n\n\n\n\n\n\nRaincloud plot:\n\n\nggplot(penguins, aes(x = body_mass_g, y = species)) +\n  ggridges::geom_density_ridges(jittered_points = TRUE, alpha = 0.5, \n                                point_size = 0.5, scale = 0.6,\n                                position = \"raincloud\")"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#boxplot-overview",
    "href": "slides/week3.2-distributions-slides.html#boxplot-overview",
    "title": "EDS 240",
    "section": "",
    "text": "Box plots - ggplot2::geom_boxplot()\n\nWhat are they?\n\nBox plots summarize the distribution of a numeric variable for one or serveral groups, providing the median (line that divides the box), the upper (Q3) and lower (Q1) quartiles (ends of the box), the highest and lowest values, excluding outliers (the whiskers), and potential outliers (dots extending beyond the end of the whiskers).\n\n\n\nNeed:\n\na numeric variable, often with multiple groups\n\nImportant considerations:\n\nbox plots summarize data, meaning we can’t see the underlying distribution (no way to know sample size)\nadd jittered points on top, or if large sample size, consider a violin plot"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#boxplot-groups",
    "href": "slides/week3.2-distributions-slides.html#boxplot-groups",
    "title": "EDS 240",
    "section": "",
    "text": "Box plots - good for multiple groups\n\nBox plots are great for a few to multiple groups (too many boxes just results in a lot of information to synthesize, as a viewer). If your x-axis text is long, consider flipping your axes to make them less crunched:\n\nggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +\n  geom_boxplot() +\n  scale_x_discrete(limits = rev(month.name)) +\n  coord_flip()"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#boxplot-adjustments",
    "href": "slides/week3.2-distributions-slides.html#boxplot-adjustments",
    "title": "EDS 240",
    "section": "",
    "text": "Box plots - adjustments\n\n\nOutliersHighlight a group(s)Jitter raw dataDodged groupsOverlay beeswarm\n\n\nYou can modify outlier aesthetics inside geom_boxplot():\n\nggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +\n  geom_boxplot(outlier.colour = \"purple\", outlier.shape = \"circle open\", outlier.size = 5) +\n  scale_x_discrete(limits = rev(month.name)) +\n  coord_flip()\n\n\n\n\n\n\nHighlight a group of interest – one easy way to do so is by using the {gghighlight} package. Here, we specify a specific month (\"October\") to highlight:\n\nmko_clean |&gt; \n  ggplot(aes(x = month_name, y = Temp_bot, fill = month_name)) +\n  geom_boxplot() +\n  scale_x_discrete(limits = rev(month.name)) +\n  gghighlight::gghighlight(month_name == \"October\") +\n  coord_flip() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\nSince box plots hide sample size, consider overlaying raw data points using geom_jitter() (since our temperature data is too large (&gt;473,000 rows), we’ll use the palmerpenguins::penguins data set to demo):\nNOTE: Be sure to remove outliers, since plotting raw data will result in those data points being a second time:\n\nggplot(na.omit(penguins), aes(x = species, y = body_mass_g)) +\n  geom_boxplot(outlier.shape = NA) +\n  geom_jitter(color = \"black\", alpha = 0.5, width = 0.2) +\n  coord_flip()\n\n\n\n\n\n\nYou may have data where you want to include an additional grouping variable – for example, let’s say we want to plot penguin body masses by species and year. We’ll need to at least dodge our overlaid points so that they sit on top of the correct box. Preferably, we both jitter and dodge our points:\n\npenguins |&gt; \n  mutate(year = as.factor(year)) |&gt; \n  ggplot(aes(x = species, y = body_mass_g, color = year)) +\n  geom_boxplot(outlier.shape = NA) +\n  geom_point(alpha = 0.5, position = position_jitterdodge(jitter.width = 0.2)) +\n  coord_flip()\n\n\n\n\n\n\nSimilar to overlaying the raw jittered data points, we can combine our box plot with a beeswarm plot using {ggbeeswarm}. Beeswarm plots visualize the density of data at each point, as well as arrange points that would normally overlap so that they fall next to one another instead. Consider using a standalone beeswarm plot here as well! We’ll again use the palmerpenguins::penguins data set to demo:\n\nggplot(na.omit(penguins), aes(x = species, y = body_mass_g)) +\n  geom_boxplot(outlier.shape = NA) +\n  ggbeeswarm::geom_beeswarm(size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#violin-plot-overview",
    "href": "slides/week3.2-distributions-slides.html#violin-plot-overview",
    "title": "EDS 240",
    "section": "",
    "text": "Violin plots - ggplot2::geom_violin()\n\nWhat are they?\n\nViolin plots visualize the distribution of a numeric variable for one or several groups, where the shape of the violin represents the density estimate of the variable (i.e. the more data points in a specific range, the larger the violin is for that range). They provide more information about the underlying distribution than a box plot.\n\n\n\nNeed:\n\na numeric variable, often with multiple groups\n\nImportant considerations:\n\nordering groups by median value can make it easier to understand\n\nshow sample size when comparing groups with very different distributions (e.g. half violin plot)"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#violin-plot-groups",
    "href": "slides/week3.2-distributions-slides.html#violin-plot-groups",
    "title": "EDS 240",
    "section": "",
    "text": "Violin plots - good for multiple groups with lots of data\n\nViolin plots are great for a few to multiple groups, and are often a better choice than box plots when you have a very large data set (and overlaying jittered points looks busy or downright unreasonable). If your x-axis text is long, consider flipping your axes to make them less crunched:\n\nggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +\n  geom_violin() +\n  scale_x_discrete(limits = rev(month.name)) +\n  coord_flip()"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#box-violin-combo",
    "href": "slides/week3.2-distributions-slides.html#box-violin-combo",
    "title": "EDS 240",
    "section": "",
    "text": "Combining geoms - adjustments\n\n\nOverlay boxplotHalf-violin half-dot plot\n\n\nOverlaying a box plot inside a violin plot can be helpful in providing your audience with summary stats in a compact form:\n\nggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +\n  geom_violin() +\n  geom_boxplot(width = 0.1, color = \"gray\", alpha = 0.5, \n               outlier.color = \"red\") +\n  scale_x_discrete(limits = rev(month.name)) +\n  coord_flip()\n\n\n\n\n\n\nThe {see} package provides geom_violindot(), which is useful for simultaneously visualizing distribution and sample size. Because it can quickly get overcrowded with large sample sizes (like Temp_bot), we’ll use palmerpenguins::penguins to demo here:\n\nggplot(penguins, aes(x = species, y = bill_length_mm, fill = species)) +\n  see::geom_violindot(size_dots = 5, alpha = 0.5) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "slides/week3.2-distributions-slides.html#end-break",
    "href": "slides/week3.2-distributions-slides.html#end-break",
    "title": "EDS 240",
    "section": "",
    "text": "Take a Break\n\n\n~ This is the end of Lesson 2 (of 3) ~\n\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "clean-code-guide.html",
    "href": "clean-code-guide.html",
    "title": "Writing clean code",
    "section": "",
    "text": "Writing clean, easily readable, and reproducible code is just as important as understanding any of the data visualization tools you’ll learn in this class. Now is the time to practice this skill so that you can take your beautiful code and styling skills with you into the workforce!"
  },
  {
    "objectID": "clean-code-guide.html#general-conventions",
    "href": "clean-code-guide.html#general-conventions",
    "title": "Writing clean code",
    "section": "General conventions",
    "text": "General conventions\nStick to these standards (as suggested by The tidyverse style guide) whenever possible:\n\nNaming conventions:\n\nSnake case for variable names – for example, my_data\nKebab case for file names – for example, my-script.R\n\n\n\n\n\n\n\n\n\n\n\nArt by Allison Horst\n\n\n\nWhitespace conventions:\n\nSpace around any infix operators (==, +, -, &lt;-, etc) – for example:\n\n\nmy_data_clean &lt;- my_data |&gt; \n  filter(x == 2023)\n\n\nNo space around operators with high precedence (::, :::, $, @, [, [[, ^, unary -, unary +, and :) – for example:\n\n\nsqrt(x^2 + y^2)\ndf$z\nx &lt;- 1:10\n\n\nSpace before a pipe, |&gt; or %&gt;%, and (most often) a new line after – for example:\n\n\nmy_data |&gt; \n  filter(...)\n\n\nSpace before a ggplot +, and a new line after – for example:\n\n\nggplot(data, aes(x = x, y = y)) +\n  geom_point()\n\n\nSpace between arguments, commas, and operators, but no space between a parentheses and the following or proceeding argument/value – for example:\n\n\nggplot(data, aes(x = x, y = y, color = z)) +\n  geom_point(alpha = 0.8)\n\n\nOnly one level of indentation when piping into a ggplot – for example:\n\n\ndata |&gt; \n  filter(...) |&gt; \n  ggplot(aes(x = x, y = y, fill = z)) +\n  geom_point()\n\n\nIf arguments to a ggplot layer don’t all fit on one line, put each argument on it’s own line and indent – for example:\n\n\nggplot(data, aes(x = x, y = y, color = z)) +\n  geom_point() + \n  labs(\n    x = \"My x-axis label\",\n    y = \"My y-axis label\",\n    title = \"My plot title\",\n    caption = \"My plot caption\"\n  )"
  },
  {
    "objectID": "clean-code-guide.html#annotating-code",
    "href": "clean-code-guide.html#annotating-code",
    "title": "Writing clean code",
    "section": "Annotating code",
    "text": "Annotating code\nThe {ARTofR} package is wonderful for creating clean titles, dividers, and block comments for your code. Install the RStudio Addin, or call {ARTofR} functions in your console to generate comments, copy to your clipboard, and paste into your scripts.\nI’ve always opted for the console approach:\n\nLoading the package (library(ARTofR)) in your console (rather than in your script/qmd file)\nType your preferred divider (see the package README for options) and message, also in the console\nThe resulting divider is automatically copied to your clipboard\nPaste into your script\n\nA couple dividers that I use often:\n\nFor major section dividers, xxx_title2(\"text here\") renders as:\n\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                  text here                               ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nFor subsection dividers, xxx_divider1(\"text here\") renders as:\n\n\n#............................text here...........................\n\n\nFor line-level annotations, I also often use (not created using {ARTofR}):\n\n\n# text here ---- \n\nHere’s a short example script demonstrating how I like to use these dividers:\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    Setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#.........................load libraries.........................\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n#..........................import data...........................\n# ~ if you're reading in data, this is a great place to do it ~\n  \n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                          Data wrangling / cleaning                       ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npenguins_wrangled &lt;- penguins |&gt; \n  \n  # select relevant cols ----\n  select(species, bill_length_mm, bill_depth_mm, year) |&gt; \n  \n  # filter for year of interest ----\n  filter(year == 2009)\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                             Data visualization                           ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# histogram of penguin bill lengths in the year 2009 ----\nggplot(penguins, aes(x = bill_length_m, fill = species)) +\n  geom_histogram()\n\n# scatterplot of penguin bill lengths by bill depths in the year 2009 ----\nggplot(penguins_wrangled, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point()"
  },
  {
    "objectID": "clean-code-guide.html#style-guides",
    "href": "clean-code-guide.html#style-guides",
    "title": "Writing clean code",
    "section": "Style guides",
    "text": "Style guides\n\nTidyverse style guide, by Hadley Wickham – a book that describes the style used throughout the {tidyverse}\nTidy design principles, by Hadley Wickham – a book to help you write better R code (currently under development)"
  },
  {
    "objectID": "course-materials/week9.html#pre-class-prep",
    "href": "course-materials/week9.html#pre-class-prep",
    "title": "Building interactive data viz using Observable JS, with Dr. Allison Horst",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nComing soon"
  },
  {
    "objectID": "course-materials/week9.html#lecture-materials",
    "href": "course-materials/week9.html#lecture-materials",
    "title": "Building interactive data viz using Observable JS, with Dr. Allison Horst",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week9.html#discussion-materials",
    "href": "course-materials/week9.html#discussion-materials",
    "title": "Building interactive data viz using Observable JS, with Dr. Allison Horst",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week9.html#assignment-reminders",
    "href": "course-materials/week9.html#assignment-reminders",
    "title": "Building interactive data viz using Observable JS, with Dr. Allison Horst",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 9)\nMon 03/04/2024\nMon 03/04/2024, 11:55pm PT\n\n\nHW\nHomework Assignment #4\nMon 02/26/2024\nSat 03/16/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week2.html#pre-class-prep",
    "href": "course-materials/week2.html#pre-class-prep",
    "title": "[No Lecture]",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nNA"
  },
  {
    "objectID": "course-materials/week2.html#lecture-materials",
    "href": "course-materials/week2.html#lecture-materials",
    "title": "[No Lecture]",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nThere is no lecture this week!"
  },
  {
    "objectID": "course-materials/week2.html#discussion-materials",
    "href": "course-materials/week2.html#discussion-materials",
    "title": "[No Lecture]",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nAlternative text, aka alt text, makes our data visualizations accessible to a broader community. Today’s section will focus crafting effective alt text, as well as how to include it when rendering visualizations in reproducible reports, websites, etc. using publishing tools like Quarto.\n\n Week 2 discussion slides"
  },
  {
    "objectID": "course-materials/week2.html#assignment-reminders",
    "href": "course-materials/week2.html#assignment-reminders",
    "title": "[No Lecture]",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nHW\nHomework Assignment #1\nMon 01/08/2024\nSat 01/20/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week7.html",
    "href": "course-materials/week7.html",
    "title": "[No Lecture]",
    "section": "",
    "text": "NA"
  },
  {
    "objectID": "course-materials/week7.html#pre-class-prep",
    "href": "course-materials/week7.html#pre-class-prep",
    "title": "[No Lecture]",
    "section": "",
    "text": "NA"
  },
  {
    "objectID": "course-materials/week7.html#lecture-materials",
    "href": "course-materials/week7.html#lecture-materials",
    "title": "[No Lecture]",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nThere is no lecture this week!"
  },
  {
    "objectID": "course-materials/week7.html#discussion-materials",
    "href": "course-materials/week7.html#discussion-materials",
    "title": "[No Lecture]",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week7.html#assignment-reminders",
    "href": "course-materials/week7.html#assignment-reminders",
    "title": "[No Lecture]",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nHW\nHomework Assignment #3\nMon 02/12/2024\nSat 02/24/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/week4.html#pre-class-prep",
    "href": "course-materials/week4.html#pre-class-prep",
    "title": "Fundamental chart types (part II), What makes a good data viz?",
    "section": "Pre-class Prep",
    "text": "Pre-class Prep\nPlease be sure to complete the following before class:\n\nInstall required packages\n\ninstall.packages(\"ggalt\") # extra coordinate systems, geoms, statistical transformations, scales and fonts for 'ggplot2' (includes `geom_lollipop()`)\ninstall.packages(\"ggExtra\") # {ggplot2} extension2222 which can be used to add marginal histograms/boxplots/density plots to ggplot2 scatterplots\ninstall.packages(\"ggdensity\") # {ggplot2} extension providing more interpretable visualizations of density estimates based on highest density regions (HDRs)"
  },
  {
    "objectID": "course-materials/week4.html#lecture-materials",
    "href": "course-materials/week4.html#lecture-materials",
    "title": "Fundamental chart types (part II), What makes a good data viz?",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nWeek 4 instruction is broken down into three lessons:\n\n\n\nVisualizing rankings\n lecture 4.1 slides\n\n\n\n\nVisualizing relationships\n lecture 4.2 slides\n\n\n\n\nWhat makes a good viz?\n lecture 4.3 slides"
  },
  {
    "objectID": "course-materials/week4.html#discussion-materials",
    "href": "course-materials/week4.html#discussion-materials",
    "title": "Fundamental chart types (part II), What makes a good data viz?",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nThemes are used to modify the non-data components of plots (e.g. titles, labels, fonts, background, gridlines, legend). In addition to using pre-built themes (available via the {ggplot2} package and also from extension packages), you can fine-tune the appearance of your plots theme by making adjustments using the theme() function. This week’s discussion section will introduce the use of themes so that you can start to really make your data visualizations stand out \n\nApplying pre-built themes:\n{ggplot2} comes with eight complete themes, which can be applied as-is, or further modified using theme() (see next section, below). There are also many additional themes which can be applied via ggplot extension packages. A small handful of packages are listed in the expandable note, below:\n\n\n\n\n\n\nA non-exhaustive list of ggplot theme extension packages\n\n\n\n\n\n\n{ggthemes}: a collection of popular themes, some of which also come with corresponding color scales\n{hrbrthemes}: typographic-centric themes and theme components\n{ggthemr}: a collection of color palettes and plot layouts for quickly setting a ggplot theme\n{ggtech}: themes based off large tech company color palettes\n{ggdark}: dark mode for ggplot complete themes\n{firatheme}: a ggplot theme with Fira font\n{urbnthemes}: tools for creating Urban Institute-themed plots and maps in R (also check out the Urban Institute Data Visualization Style Guide for a really great example of how an organization enforces a cohesive style across all published data viz content)\n{bbplot}: tools for creating ggplots in the style used by the BBC News data team\n{ggpomological}: a ggplot2 theme based on the USDA Pomological Watercolor Collection\n{tvthemes}: a collection of ggplot themes and color / fill palettes based on everybody’s favorite TV shows\n\nKeep your eye out for extension packages that supply both a geom(s) and a pre-build theme(s) designed specifically to work with that geom. For example, the {ggridges} package provides both a few different ridgeline plot geoms and a pre-built theme_ridges() theme to pair with them.\n\n\n\n\n\nUsing ggplot2::theme() to control plot elements:\nUse this (non-exhaustive) list to start tweaking elements of your plot’s appearance. It’s most common to start with a pre-built theme (see above) and modify from there. For a complete list of elements, explore the documentation for ggplot::theme().\n\n\n\n\n\n\n\n\n\n\nAdapted from Reproducible Science for Busy Researchers: How to Save Time using Literate Programming, by Andrew P. Lapointe\n\n\n\nExercise\nThis week, you’ll practice updating different ggplot theme elements. Choose some of the starter code below, apply a pre-built theme, then modify different pieces of the plot using theme(). Plan to share out something new that you’ve learned with the rest of the class.\n\n\n\n\n\n\nFind starter code here!\n\n\n\n\n\ncode here"
  },
  {
    "objectID": "course-materials/week4.html#assignment-reminders",
    "href": "course-materials/week4.html#assignment-reminders",
    "title": "Fundamental chart types (part II), What makes a good data viz?",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 4)\nMon 01/29/2024\nMon 01/29/2024, 11:55pm PT\n\n\nHW\nHomework Assignment #2\nMon 01/22/2024\nSat 02/03/2024, 11:59pm PT"
  },
  {
    "objectID": "course-materials/discussion/week1/tidy-fracking.html",
    "href": "course-materials/discussion/week1/tidy-fracking.html",
    "title": "EDS 240",
    "section": "",
    "text": "##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                                    setup                                 ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#..........................load packages.........................\nlibrary(tidyverse)\nlibrary(janitor)\n\n#......................import fracking data......................\nfracking &lt;- read_csv(here::here(\"week1\", \"data\", \"fracking.csv\"))\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##                        clean/wrangle fracking data                       ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfracking_clean &lt;- fracking |&gt; \n  \n  # clean column names ----\n  janitor::clean_names() |&gt; \n  \n  # clean up dates ----\n  mutate(job_start_date = str_remove(job_start_date, \" AM\")) |&gt; # remove 'AM' from string\n  mutate(datetime_start = mdy_hms(job_start_date)) |&gt; # convert from string to date (save to new col)\n  mutate(year = year(datetime_start)) |&gt; # create 'year' col from date\n\n  # select relevant cols ----\n  select(datetime_start, year, state_name, county_name, well_name, total_base_water_volume) |&gt; \n  \n  # filter out non-state names ----\n  filter(!state_name %in% c(\"Beaver\", \"Beckham\", \"Harper\", \"Hemphill\", \"Midland\", \"Red River\", \"Roosevelt\", \"Rusk\", \"State\", \"WARD\")) |&gt; \n  \n  # rename state_name to something shorter for typing out when using case_when (not necessary) ----\n  rename(sn = state_name) |&gt; \n  \n  # make all words title case ----\n  mutate(sn = str_to_title(sn)) |&gt; \n  \n  # fix misspelled state names ----\n  mutate(sn = case_when(\n    sn == \"Colordao\" ~ \"Colorado\",\n    sn == \"Loiusiana\" ~ \"Louisiana\",\n    sn == \"Louisianna\" ~ \"Louisiana\",\n    sn == \"Lousiana\" ~ \"Louisiana\",\n    sn == \"New Mexcio\" ~ \"New Mexico\",\n    sn == \"Norh Dakota\" ~ \"North Dakota\",\n    sn == \"Norht Dakota\" ~ \"North Dakota\",\n    sn == \"North  Dakota\" ~ \"North Dakota\",\n    sn == \"North Dakata\" ~ \"North Dakota\",\n    sn == \"North Dakotta\" ~ \"North Dakota\",\n    sn == \"Noth Dakota\" ~ \"North Dakota\",\n    sn == \"Pennslvania\" ~ \"Pennsylvania\",\n    sn == \"Pennsylavania\" ~ \"Pennsylvania\",\n    sn == \"Pennsylvanya\" ~ \"Pennsylvania\",\n    sn == \"Penssylvania\" ~ \"Pennsylvania\",\n    sn == \"Texasa\" ~ \"Texas\",\n    sn == \"Texs\" ~ \"Texas\", \n    sn == \"West Viginia\" ~ \"West Virginia\",\n    sn == \"Wyominng\" ~ \"Wyoming\", \n    TRUE ~ sn # copy over rest of state names from as-is\n  )) |&gt; \n  \n  # remove rows that have a '?' mark ----\n  filter(!str_detect(string = sn, pattern = \"\\\\?\")) |&gt; # `?` is a special chr; escape with `\\\\` prefix\n  \n  # make all uppercase (so that we can covert abbreviation to state names) ----\n  mutate(sn = str_to_upper(sn)) |&gt; \n  \n  # mutate abbreviations to full state names ----\n  mutate(sn = ifelse(test = str_length(sn) == 2, # if string in 'sn' col is 2 chrs long\n                     yes = usdata::abbr2state(sn), # replace abbreviation with full state name \n                     no = sn)) |&gt; # if string in 'sn' col is not 2 chrs long, keep state name as-is\n  \n  # make all words title case again ----\n  mutate(sn = str_to_title(sn)) |&gt; \n  \n  # create a column of just state abbreviations ----\n  mutate(state_abb = usdata::state2abbr(sn)) |&gt; \n  \n  # rename 'sn' to 'state_name' again for clarity ----\n  rename(state_name = sn, total_base_water_volume_gal = total_base_water_volume) |&gt; \n  \n  # move 'state_abb' col after state_name col ----\n  relocate(state_abb, .after = state_name) |&gt; \n  \n  # convert 'state_name' & 'state_abb' from string to factor ----\n  mutate(state_name = as.factor(state_name),\n         state_abb = as.factor(state_abb)) |&gt; \n  \n  # remove obs that don't have a measurement for 'total_base_water_volume' (NA) ----\n  drop_na(total_base_water_volume_gal)\n\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##          some exploratory data viz + a few plot mods for practice        ----\n##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfracking_clean |&gt; \n  filter(state_name %in% c(\"Texas\", \"Colorado\", \"North Dakota\")) |&gt; \n  filter(year == 2015) |&gt; \n  group_by(state_name) |&gt; # pipe directly into ggplot\n  ggplot(aes(x = fct_rev(fct_infreq(state_name)), y = total_base_water_volume_gal)) + # need to reverse fct order for coord_flip() (plots lowest freq at top by default)\n  geom_jitter(width = 0.3, alpha = 0.5, color = \"gray15\") +\n  geom_violin(color = \"red4\", alpha = 0.3) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  labs(y = \"Total base water volumn (gal)\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    axis.title.y = element_blank()\n    )"
  },
  {
    "objectID": "course-materials/discussion/week4/week4-themes.html#title-slide",
    "href": "course-materials/discussion/week4/week4-themes.html#title-slide",
    "title": "EDS 240",
    "section": "",
    "text": "EDS 240: Discussion 4\nggplot themes\n\nWeek 4 | January 31st, 2024"
  },
  {
    "objectID": "course-materials/week10.html",
    "href": "course-materials/week10.html",
    "title": "Grab Bag & Catch up",
    "section": "",
    "text": "Coming soon"
  },
  {
    "objectID": "course-materials/week10.html#pre-class-prep",
    "href": "course-materials/week10.html#pre-class-prep",
    "title": "Grab Bag & Catch up",
    "section": "",
    "text": "Coming soon"
  },
  {
    "objectID": "course-materials/week10.html#lecture-materials",
    "href": "course-materials/week10.html#lecture-materials",
    "title": "Grab Bag & Catch up",
    "section": "Lecture Materials",
    "text": "Lecture Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week10.html#discussion-materials",
    "href": "course-materials/week10.html#discussion-materials",
    "title": "Grab Bag & Catch up",
    "section": "Discussion Materials",
    "text": "Discussion Materials\nComing soon!"
  },
  {
    "objectID": "course-materials/week10.html#assignment-reminders",
    "href": "course-materials/week10.html#assignment-reminders",
    "title": "Grab Bag & Catch up",
    "section": "Assignment Reminders",
    "text": "Assignment Reminders\n\n\n\n\n\n\n\n\n\nAssignment Type\nAssignment Title\nDate Assigned\nDate Due\n\n\n\n\nEOC\nEOC (week 10)\nMon 03/11/2024\nMon 03/11/2024, 11:55pm PT\n\n\nSR\nEnd-of-course reflection (SR #3)\nMon 03/11/2024\nSat 03/16/2024, 11:59pm PT\n\n\nHW\nHomework Assignment #4\nMon 02/26/2024\nSat 03/16/2024, 11:59pm PT"
  }
]